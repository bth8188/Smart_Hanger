
Smart_Hanger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000118  00800100  0000228c  00002320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000228c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  00800218  00800218  00002438  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002438  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000468  00000000  00000000  000024d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004979  00000000  00000000  0000293c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019ab  00000000  00000000  000072b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000256a  00000000  00000000  00008c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b84  00000000  00000000  0000b1cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c2b  00000000  00000000  0000bd50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000376d  00000000  00000000  0000c97b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b8  00000000  00000000  000100e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ae c7       	rjmp	.+3932   	; 0xf7a <__vector_7>
      1e:	00 00       	nop
      20:	d3 c7       	rjmp	.+4006   	; 0xfc8 <__vector_8>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4f c7       	rjmp	.+3742   	; 0xedc <__vector_15>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	59 c7       	rjmp	.+3762   	; 0xf2c <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e8       	ldi	r30, 0x8C	; 140
      a0:	f2 e2       	ldi	r31, 0x22	; 34
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 31       	cpi	r26, 0x18	; 24
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a8 e1       	ldi	r26, 0x18	; 24
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 37       	cpi	r26, 0x7C	; 124
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	a9 d7       	rcall	.+3922   	; 0x1016 <main>
      c4:	0c 94 44 11 	jmp	0x2288	; 0x2288 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <ADC_Init>:
 */ 
#include "ADC.h"

void ADC_Init()
{
	ADMUX |= (1 << REFS0);	//AVCC를 기준전압으로 선택
      ca:	3e 9a       	sbi	0x07, 6	; 7
	
	ADCSRA |= 0X07;		//분주비 설정
      cc:	86 b1       	in	r24, 0x06	; 6
      ce:	87 60       	ori	r24, 0x07	; 7
      d0:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADEN);		//ADC 활성화
      d2:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (0 << ADFR);		//프리러닝 모드
      d4:	86 b1       	in	r24, 0x06	; 6
      d6:	86 b9       	out	0x06, r24	; 6
      d8:	08 95       	ret

000000da <BT_Init>:

unsigned char BT_receive()
{
	while ( !(BTCSRA & (1<<BTRXC)) );
	return BTDR;
}
      da:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
      de:	87 e6       	ldi	r24, 0x67	; 103
      e0:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
      e4:	88 e9       	ldi	r24, 0x98	; 152
      e6:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
      ea:	08 95       	ret

000000ec <BT_transmit>:
      ec:	eb e9       	ldi	r30, 0x9B	; 155
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	90 81       	ld	r25, Z
      f2:	95 ff       	sbrs	r25, 5
      f4:	fd cf       	rjmp	.-6      	; 0xf0 <BT_transmit+0x4>
      f6:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
      fa:	08 95       	ret

000000fc <BT_printf_string>:


void BT_printf_string(char *str)
{
      fc:	cf 93       	push	r28
      fe:	df 93       	push	r29
     100:	ec 01       	movw	r28, r24
	for (int i=0; str[i]; i++)
     102:	88 81       	ld	r24, Y
     104:	88 23       	and	r24, r24
     106:	29 f0       	breq	.+10     	; 0x112 <BT_printf_string+0x16>
     108:	21 96       	adiw	r28, 0x01	; 1
	BT_transmit(str[i]);
     10a:	f0 df       	rcall	.-32     	; 0xec <BT_transmit>
}


void BT_printf_string(char *str)
{
	for (int i=0; str[i]; i++)
     10c:	89 91       	ld	r24, Y+
     10e:	81 11       	cpse	r24, r1
     110:	fc cf       	rjmp	.-8      	; 0x10a <BT_printf_string+0xe>
	BT_transmit(str[i]);
}
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	08 95       	ret

00000118 <isBTString>:

uint8_t isBTString()
{
	return BT_Receive_Flag;
     118:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <BT_Receive_Flag>
}
     11c:	08 95       	ret

0000011e <getBTtring>:

uint8_t *getBTtring()
{
	BT_Receive_Flag = 0;
     11e:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <BT_Receive_Flag>
	return BT_String;
}
     122:	8a e1       	ldi	r24, 0x1A	; 26
     124:	92 e0       	ldi	r25, 0x02	; 2
     126:	08 95       	ret

00000128 <BT_ISR_Receive>:

void BT_ISR_Receive()
{
     128:	cf 93       	push	r28
     12a:	df 93       	push	r29
     12c:	1f 92       	push	r1
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
	static uint8_t thead = 0;
	volatile uint8_t data;
	data= BTDR;
     132:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     136:	89 83       	std	Y+1, r24	; 0x01
	
	if(data == '\n' || data == '\r')
     138:	89 81       	ldd	r24, Y+1	; 0x01
     13a:	8a 30       	cpi	r24, 0x0A	; 10
     13c:	19 f0       	breq	.+6      	; 0x144 <BT_ISR_Receive+0x1c>
     13e:	89 81       	ldd	r24, Y+1	; 0x01
     140:	8d 30       	cpi	r24, 0x0D	; 13
     142:	61 f4       	brne	.+24     	; 0x15c <BT_ISR_Receive+0x34>
	{
		BT_String[thead] = '\0';
     144:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <__data_end>
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	e6 5e       	subi	r30, 0xE6	; 230
     14c:	fd 4f       	sbci	r31, 0xFD	; 253
     14e:	10 82       	st	Z, r1
		thead = 0;
     150:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <__data_end>
		BT_Receive_Flag = 1;
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <BT_Receive_Flag>
     15a:	0e c0       	rjmp	.+28     	; 0x178 <BT_ISR_Receive+0x50>
	}
	else if(data != '\n')
     15c:	89 81       	ldd	r24, Y+1	; 0x01
     15e:	8a 30       	cpi	r24, 0x0A	; 10
     160:	59 f0       	breq	.+22     	; 0x178 <BT_ISR_Receive+0x50>
	{
		BT_String[thead] = data;
     162:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
     166:	e8 2f       	mov	r30, r24
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	99 81       	ldd	r25, Y+1	; 0x01
     16c:	e6 5e       	subi	r30, 0xE6	; 230
     16e:	fd 4f       	sbci	r31, 0xFD	; 253
     170:	90 83       	st	Z, r25
		thead ++;
     172:	8f 5f       	subi	r24, 0xFF	; 255
     174:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <__data_end>
	}
}
     178:	0f 90       	pop	r0
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	08 95       	ret

00000180 <Button_Init>:

static uint8_t button_state[] = {0, 0, 0, 0, 0, 0, 0, 0};

void Button_Init(int _pin)
{
	BUTTON_DDR &= ~(1 << _pin);
     180:	e4 e6       	ldi	r30, 0x64	; 100
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	90 81       	ld	r25, Z
     186:	21 e0       	ldi	r18, 0x01	; 1
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	02 c0       	rjmp	.+4      	; 0x190 <Button_Init+0x10>
     18c:	22 0f       	add	r18, r18
     18e:	33 1f       	adc	r19, r19
     190:	8a 95       	dec	r24
     192:	e2 f7       	brpl	.-8      	; 0x18c <Button_Init+0xc>
     194:	20 95       	com	r18
     196:	29 23       	and	r18, r25
     198:	20 83       	st	Z, r18
     19a:	08 95       	ret

0000019c <button>:
}

int button(uint8_t _num)
{
		
	if( ((BUTTON_PIN & (1<<_num)) == 0) && (button_state[_num] == 0) )
     19c:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
     1a0:	68 2f       	mov	r22, r24
     1a2:	70 e0       	ldi	r23, 0x00	; 0
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	08 2e       	mov	r0, r24
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <button+0x12>
     1aa:	35 95       	asr	r19
     1ac:	27 95       	ror	r18
     1ae:	0a 94       	dec	r0
     1b0:	e2 f7       	brpl	.-8      	; 0x1aa <button+0xe>
     1b2:	a9 01       	movw	r20, r18
     1b4:	41 70       	andi	r20, 0x01	; 1
     1b6:	55 27       	eor	r21, r21
     1b8:	20 fd       	sbrc	r18, 0
     1ba:	0c c0       	rjmp	.+24     	; 0x1d4 <button+0x38>
     1bc:	fb 01       	movw	r30, r22
     1be:	e6 5a       	subi	r30, 0xA6	; 166
     1c0:	fd 4f       	sbci	r31, 0xFD	; 253
     1c2:	90 81       	ld	r25, Z
     1c4:	91 11       	cpse	r25, r1
     1c6:	06 c0       	rjmp	.+12     	; 0x1d4 <button+0x38>
	{
		button_state[_num] = 1;
     1c8:	fb 01       	movw	r30, r22
     1ca:	e6 5a       	subi	r30, 0xA6	; 166
     1cc:	fd 4f       	sbci	r31, 0xFD	; 253
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	80 83       	st	Z, r24
		return 0;
     1d2:	22 c0       	rjmp	.+68     	; 0x218 <button+0x7c>
	}
	else if( ((BUTTON_PIN & (1 << _num)) == (1 << _num)) && (button_state[_num] == 1) )
     1d4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
     1d8:	21 e0       	ldi	r18, 0x01	; 1
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <button+0x46>
     1de:	22 0f       	add	r18, r18
     1e0:	33 1f       	adc	r19, r19
     1e2:	8a 95       	dec	r24
     1e4:	e2 f7       	brpl	.-8      	; 0x1de <button+0x42>
     1e6:	89 2f       	mov	r24, r25
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	82 23       	and	r24, r18
     1ec:	93 23       	and	r25, r19
     1ee:	28 17       	cp	r18, r24
     1f0:	39 07       	cpc	r19, r25
     1f2:	69 f4       	brne	.+26     	; 0x20e <button+0x72>
     1f4:	fb 01       	movw	r30, r22
     1f6:	e6 5a       	subi	r30, 0xA6	; 166
     1f8:	fd 4f       	sbci	r31, 0xFD	; 253
     1fa:	80 81       	ld	r24, Z
     1fc:	81 30       	cpi	r24, 0x01	; 1
     1fe:	51 f4       	brne	.+20     	; 0x214 <button+0x78>
	{
		button_state[_num] = 0;
     200:	fb 01       	movw	r30, r22
     202:	e6 5a       	subi	r30, 0xA6	; 166
     204:	fd 4f       	sbci	r31, 0xFD	; 253
     206:	10 82       	st	Z, r1
		return 1;
     208:	41 e0       	ldi	r20, 0x01	; 1
     20a:	50 e0       	ldi	r21, 0x00	; 0
     20c:	05 c0       	rjmp	.+10     	; 0x218 <button+0x7c>
	}
	return 0;
     20e:	40 e0       	ldi	r20, 0x00	; 0
     210:	50 e0       	ldi	r21, 0x00	; 0
     212:	02 c0       	rjmp	.+4      	; 0x218 <button+0x7c>
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
}
     218:	ca 01       	movw	r24, r20
     21a:	08 95       	ret

0000021c <nobuzzer>:
	setbuzzer(2551);
	playbuzzer();
	_delay_ms(150);
	setbuzzer(2865);
	_delay_ms(150);
	nobuzzer();
     21c:	85 b5       	in	r24, 0x25	; 37
     21e:	8f 7c       	andi	r24, 0xCF	; 207
     220:	85 bd       	out	0x25, r24	; 37
     222:	08 95       	ret

00000224 <buzzerInit>:
     224:	bf 9a       	sbi	0x17, 7	; 23
     226:	85 b5       	in	r24, 0x25	; 37
     228:	8b 67       	ori	r24, 0x7B	; 123
     22a:	85 bd       	out	0x25, r24	; 37
     22c:	88 ec       	ldi	r24, 0xC8	; 200
     22e:	83 bd       	out	0x23, r24	; 35
     230:	f5 cf       	rjmp	.-22     	; 0x21c <nobuzzer>
     232:	08 95       	ret

00000234 <playbuzzer>:
     234:	85 b5       	in	r24, 0x25	; 37
     236:	80 63       	ori	r24, 0x30	; 48
     238:	85 bd       	out	0x25, r24	; 37
     23a:	08 95       	ret

0000023c <start_sound>:
     23c:	80 e3       	ldi	r24, 0x30	; 48
     23e:	83 bd       	out	0x23, r24	; 35
     240:	f9 df       	rcall	.-14     	; 0x234 <playbuzzer>
     242:	2f ef       	ldi	r18, 0xFF	; 255
     244:	85 ea       	ldi	r24, 0xA5	; 165
     246:	9e e0       	ldi	r25, 0x0E	; 14
     248:	21 50       	subi	r18, 0x01	; 1
     24a:	80 40       	sbci	r24, 0x00	; 0
     24c:	90 40       	sbci	r25, 0x00	; 0
     24e:	e1 f7       	brne	.-8      	; 0x248 <start_sound+0xc>
     250:	00 c0       	rjmp	.+0      	; 0x252 <start_sound+0x16>
     252:	00 00       	nop
     254:	85 e5       	ldi	r24, 0x55	; 85
     256:	83 bd       	out	0x23, r24	; 35
     258:	2f ef       	ldi	r18, 0xFF	; 255
     25a:	85 ea       	ldi	r24, 0xA5	; 165
     25c:	9e e0       	ldi	r25, 0x0E	; 14
     25e:	21 50       	subi	r18, 0x01	; 1
     260:	80 40       	sbci	r24, 0x00	; 0
     262:	90 40       	sbci	r25, 0x00	; 0
     264:	e1 f7       	brne	.-8      	; 0x25e <start_sound+0x22>
     266:	00 c0       	rjmp	.+0      	; 0x268 <start_sound+0x2c>
     268:	00 00       	nop
     26a:	88 e4       	ldi	r24, 0x48	; 72
     26c:	83 bd       	out	0x23, r24	; 35
     26e:	2f ef       	ldi	r18, 0xFF	; 255
     270:	85 ea       	ldi	r24, 0xA5	; 165
     272:	9e e0       	ldi	r25, 0x0E	; 14
     274:	21 50       	subi	r18, 0x01	; 1
     276:	80 40       	sbci	r24, 0x00	; 0
     278:	90 40       	sbci	r25, 0x00	; 0
     27a:	e1 f7       	brne	.-8      	; 0x274 <start_sound+0x38>
     27c:	00 c0       	rjmp	.+0      	; 0x27e <start_sound+0x42>
     27e:	00 00       	nop
     280:	cd cf       	rjmp	.-102    	; 0x21c <nobuzzer>
     282:	08 95       	ret

00000284 <ready_sound>:
}

void setbuzzer(int note)
{
	int ocr_value = 1000000 / (note/8) ;
	OCR2 = ocr_value;
     284:	89 ee       	ldi	r24, 0xE9	; 233
     286:	83 bd       	out	0x23, r24	; 35


void ready_sound()
{
	setbuzzer(2865);
	playbuzzer();
     288:	d5 df       	rcall	.-86     	; 0x234 <playbuzzer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     28a:	2f ef       	ldi	r18, 0xFF	; 255
     28c:	82 e5       	ldi	r24, 0x52	; 82
     28e:	97 e0       	ldi	r25, 0x07	; 7
     290:	21 50       	subi	r18, 0x01	; 1
     292:	80 40       	sbci	r24, 0x00	; 0
     294:	90 40       	sbci	r25, 0x00	; 0
     296:	e1 f7       	brne	.-8      	; 0x290 <ready_sound+0xc>
     298:	00 c0       	rjmp	.+0      	; 0x29a <ready_sound+0x16>
     29a:	00 00       	nop
}

void setbuzzer(int note)
{
	int ocr_value = 1000000 / (note/8) ;
	OCR2 = ocr_value;
     29c:	88 e4       	ldi	r24, 0x48	; 72
     29e:	83 bd       	out	0x23, r24	; 35
     2a0:	2f ef       	ldi	r18, 0xFF	; 255
     2a2:	82 e5       	ldi	r24, 0x52	; 82
     2a4:	97 e0       	ldi	r25, 0x07	; 7
     2a6:	21 50       	subi	r18, 0x01	; 1
     2a8:	80 40       	sbci	r24, 0x00	; 0
     2aa:	90 40       	sbci	r25, 0x00	; 0
     2ac:	e1 f7       	brne	.-8      	; 0x2a6 <ready_sound+0x22>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <ready_sound+0x2c>
	setbuzzer(2865);
	playbuzzer();
	_delay_ms(150);
	setbuzzer(2551);
	_delay_ms(150);
	nobuzzer();
     2b0:	00 00       	nop
     2b2:	b4 cf       	rjmp	.-152    	; 0x21c <nobuzzer>
     2b4:	08 95       	ret

000002b6 <DCmotorInit>:
#include "dcmotor.h"


void DCmotorInit()
{
	DDRE = 0xff;
     2b6:	8f ef       	ldi	r24, 0xFF	; 255
     2b8:	82 b9       	out	0x02, r24	; 2
	TCCR3B |= _BV(CS30) | _BV(WGM32);
     2ba:	ea e8       	ldi	r30, 0x8A	; 138
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	80 81       	ld	r24, Z
     2c0:	89 60       	ori	r24, 0x09	; 9
     2c2:	80 83       	st	Z, r24
	TCCR3A |= _BV(WGM30);
     2c4:	eb e8       	ldi	r30, 0x8B	; 139
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	80 81       	ld	r24, Z
     2ca:	81 60       	ori	r24, 0x01	; 1
     2cc:	80 83       	st	Z, r24
	TCCR3A |= _BV(COM3A1) | _BV(COM3B1) | _BV(COM3C1);
     2ce:	80 81       	ld	r24, Z
     2d0:	88 6a       	ori	r24, 0xA8	; 168
     2d2:	80 83       	st	Z, r24
     2d4:	08 95       	ret

000002d6 <DCmotorstop>:
}

void DCmotorstop()
{
	MOTOR_R = 0;
     2d6:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     2da:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	MOTOR_L = 0;
     2de:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     2e2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     2e6:	08 95       	ret

000002e8 <DCmotorleft>:
}

void DCmotorleft(uint8_t leftspeed)
{
	MOTOR_R = 0;if(leftspeed > 255) leftspeed = 255;
     2e8:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     2ec:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	else if(leftspeed < 0) leftspeed =0;
	MOTOR_L = leftspeed;
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     2f6:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     2fa:	08 95       	ret

000002fc <DCmotorright>:

void DCmotorright(uint8_t rightspeed)
{
	if(rightspeed > 255) rightspeed = 255;
	else if(rightspeed < 0) rightspeed =0;
	MOTOR_R = rightspeed;
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     302:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	MOTOR_L = 0;
     306:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     30a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     30e:	08 95       	ret

00000310 <Blower_Fan>:
}

void Blower_Fan(uint8_t speed)
{
	Blower = speed;
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     316:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     31a:	08 95       	ret

0000031c <check_timeout>:
{
	return DHT_status;
}

uint8_t check_timeout(uint8_t *_checker, uint8_t _timer)
{
     31c:	fc 01       	movw	r30, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     31e:	8a e0       	ldi	r24, 0x0A	; 10
     320:	8a 95       	dec	r24
     322:	f1 f7       	brne	.-4      	; 0x320 <check_timeout+0x4>
     324:	00 c0       	rjmp	.+0      	; 0x326 <check_timeout+0xa>
	_delay_us(2);
	(*_checker) ++;
     326:	90 81       	ld	r25, Z
     328:	9f 5f       	subi	r25, 0xFF	; 255
     32a:	90 83       	st	Z, r25
	if(*_checker > _timer)
     32c:	69 17       	cp	r22, r25
     32e:	28 f4       	brcc	.+10     	; 0x33a <check_timeout+0x1e>
	{
		DHT_status = Timeout;
     330:	84 e0       	ldi	r24, 0x04	; 4
     332:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <DHT_status>
		return 1;
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	08 95       	ret
	}
	return 0;
     33a:	80 e0       	ldi	r24, 0x00	; 0
}
     33c:	08 95       	ret

0000033e <send_s_signal>:

void send_s_signal(uint8_t _pin)
{
	DHT_DDR |= (0x01 << (DHT_DATA_PIN + _pin));		// DDR 출력 설정
     33e:	44 b3       	in	r20, 0x14	; 20
     340:	21 e0       	ldi	r18, 0x01	; 1
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	b9 01       	movw	r22, r18
     346:	02 c0       	rjmp	.+4      	; 0x34c <send_s_signal+0xe>
     348:	66 0f       	add	r22, r22
     34a:	77 1f       	adc	r23, r23
     34c:	8a 95       	dec	r24
     34e:	e2 f7       	brpl	.-8      	; 0x348 <send_s_signal+0xa>
     350:	cb 01       	movw	r24, r22
     352:	46 2b       	or	r20, r22
     354:	44 bb       	out	0x14, r20	; 20
	DHT_PORT |= (0x01 << (DHT_DATA_PIN + _pin));		// high 신호 송출
     356:	95 b3       	in	r25, 0x15	; 21
     358:	98 2b       	or	r25, r24
     35a:	95 bb       	out	0x15, r25	; 21
	DHT_PORT &= ~(0x01 << (DHT_DATA_PIN + _pin));	// low 신호 송출
     35c:	95 b3       	in	r25, 0x15	; 21
     35e:	28 2f       	mov	r18, r24
     360:	20 95       	com	r18
     362:	92 23       	and	r25, r18
     364:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     366:	7f ef       	ldi	r23, 0xFF	; 255
     368:	29 ef       	ldi	r18, 0xF9	; 249
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	71 50       	subi	r23, 0x01	; 1
     36e:	20 40       	sbci	r18, 0x00	; 0
     370:	30 40       	sbci	r19, 0x00	; 0
     372:	e1 f7       	brne	.-8      	; 0x36c <send_s_signal+0x2e>
     374:	00 c0       	rjmp	.+0      	; 0x376 <send_s_signal+0x38>
     376:	00 00       	nop
	_delay_ms(20);		// 최소 18ms이상의 대기시간
	DHT_PORT |= (0x01 << (DHT_DATA_PIN + _pin));		// high 신호 송출
     378:	95 b3       	in	r25, 0x15	; 21
     37a:	89 2b       	or	r24, r25
     37c:	85 bb       	out	0x15, r24	; 21
     37e:	08 95       	ret

00000380 <receive_signal>:
}

void receive_signal(uint8_t _pin)
{
     380:	0f 93       	push	r16
     382:	1f 93       	push	r17
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	1f 92       	push	r1
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
	uint8_t checker = 0;
     38e:	19 82       	std	Y+1, r1	; 0x01
	DHT_DDR &= ~(0x01 << (DHT_DATA_PIN + _pin));
     390:	94 b3       	in	r25, 0x14	; 20
     392:	01 e0       	ldi	r16, 0x01	; 1
     394:	10 e0       	ldi	r17, 0x00	; 0
     396:	02 c0       	rjmp	.+4      	; 0x39c <receive_signal+0x1c>
     398:	00 0f       	add	r16, r16
     39a:	11 1f       	adc	r17, r17
     39c:	8a 95       	dec	r24
     39e:	e2 f7       	brpl	.-8      	; 0x398 <receive_signal+0x18>
     3a0:	80 2f       	mov	r24, r16
     3a2:	80 95       	com	r24
     3a4:	98 23       	and	r25, r24
     3a6:	94 bb       	out	0x14, r25	; 20
	while((DHT_PIN & (0x01 << (DHT_DATA_PIN + _pin))))		//DHT 신호가 0이 되는걸 대기
     3a8:	06 c0       	rjmp	.+12     	; 0x3b6 <receive_signal+0x36>
	{
		if(check_timeout(&checker, 30)) break;
     3aa:	6e e1       	ldi	r22, 0x1E	; 30
     3ac:	ce 01       	movw	r24, r28
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	b5 df       	rcall	.-150    	; 0x31c <check_timeout>
     3b2:	81 11       	cpse	r24, r1
     3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <receive_signal+0x42>

void receive_signal(uint8_t _pin)
{
	uint8_t checker = 0;
	DHT_DDR &= ~(0x01 << (DHT_DATA_PIN + _pin));
	while((DHT_PIN & (0x01 << (DHT_DATA_PIN + _pin))))		//DHT 신호가 0이 되는걸 대기
     3b6:	83 b3       	in	r24, 0x13	; 19
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	80 23       	and	r24, r16
     3bc:	91 23       	and	r25, r17
     3be:	89 2b       	or	r24, r25
     3c0:	a1 f7       	brne	.-24     	; 0x3aa <receive_signal+0x2a>
	{
		if(check_timeout(&checker, 30)) break;
	}
	checker = 0;
     3c2:	19 82       	std	Y+1, r1	; 0x01
	if(DHT_status == OK)
     3c4:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <DHT_status>
     3c8:	88 23       	and	r24, r24
     3ca:	39 f0       	breq	.+14     	; 0x3da <receive_signal+0x5a>
     3cc:	1a c0       	rjmp	.+52     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	{
		while(!(DHT_PIN&(0x01 << (DHT_DATA_PIN + _pin))))		//DHT 신호가 1이 되는걸 대기
		{
			if(check_timeout(&checker, 50)) break;
     3ce:	62 e3       	ldi	r22, 0x32	; 50
     3d0:	ce 01       	movw	r24, r28
     3d2:	01 96       	adiw	r24, 0x01	; 1
     3d4:	a3 df       	rcall	.-186    	; 0x31c <check_timeout>
     3d6:	81 11       	cpse	r24, r1
     3d8:	06 c0       	rjmp	.+12     	; 0x3e6 <receive_signal+0x66>
		if(check_timeout(&checker, 30)) break;
	}
	checker = 0;
	if(DHT_status == OK)
	{
		while(!(DHT_PIN&(0x01 << (DHT_DATA_PIN + _pin))))		//DHT 신호가 1이 되는걸 대기
     3da:	83 b3       	in	r24, 0x13	; 19
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	80 23       	and	r24, r16
     3e0:	91 23       	and	r25, r17
     3e2:	89 2b       	or	r24, r25
     3e4:	a1 f3       	breq	.-24     	; 0x3ce <receive_signal+0x4e>
		{
			if(check_timeout(&checker, 50)) break;
		}
		checker = 0;
     3e6:	19 82       	std	Y+1, r1	; 0x01
		while((DHT_PIN & (0x01 << (DHT_DATA_PIN + _pin))))	//DHT 신호가 0이 되는걸 대기
     3e8:	06 c0       	rjmp	.+12     	; 0x3f6 <receive_signal+0x76>
		{
			if(check_timeout(&checker, 50)) break;
     3ea:	62 e3       	ldi	r22, 0x32	; 50
     3ec:	ce 01       	movw	r24, r28
     3ee:	01 96       	adiw	r24, 0x01	; 1
     3f0:	95 df       	rcall	.-214    	; 0x31c <check_timeout>
     3f2:	81 11       	cpse	r24, r1
     3f4:	06 c0       	rjmp	.+12     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		while(!(DHT_PIN&(0x01 << (DHT_DATA_PIN + _pin))))		//DHT 신호가 1이 되는걸 대기
		{
			if(check_timeout(&checker, 50)) break;
		}
		checker = 0;
		while((DHT_PIN & (0x01 << (DHT_DATA_PIN + _pin))))	//DHT 신호가 0이 되는걸 대기
     3f6:	83 b3       	in	r24, 0x13	; 19
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	80 23       	and	r24, r16
     3fc:	91 23       	and	r25, r17
     3fe:	89 2b       	or	r24, r25
     400:	a1 f7       	brne	.-24     	; 0x3ea <receive_signal+0x6a>
		{
			if(check_timeout(&checker, 50)) break;
		}
		checker = 0;
	}
}
     402:	0f 90       	pop	r0
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	08 95       	ret

0000040e <receive_raw_data>:

void receive_raw_data(uint8_t _data[4] ,uint8_t _pin, uint8_t _type)
{
     40e:	5f 92       	push	r5
     410:	6f 92       	push	r6
     412:	7f 92       	push	r7
     414:	8f 92       	push	r8
     416:	9f 92       	push	r9
     418:	af 92       	push	r10
     41a:	bf 92       	push	r11
     41c:	cf 92       	push	r12
     41e:	df 92       	push	r13
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	00 d0       	rcall	.+0      	; 0x42e <receive_raw_data+0x20>
     42e:	00 d0       	rcall	.+0      	; 0x430 <receive_raw_data+0x22>
     430:	00 d0       	rcall	.+0      	; 0x432 <receive_raw_data+0x24>
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62
     436:	4c 01       	movw	r8, r24
     438:	56 2e       	mov	r5, r22
	uint8_t checker = 0, raw_data[5];
     43a:	19 82       	std	Y+1, r1	; 0x01
	DHT_type = _type;
     43c:	40 93 71 02 	sts	0x0271, r20	; 0x800271 <DHT_type>
	int conH =0, conV =0;
	cli();
     440:	f8 94       	cli
	DHT_status = OK;
     442:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <DHT_status>
	send_s_signal(_pin);
     446:	86 2f       	mov	r24, r22
     448:	7a df       	rcall	.-268    	; 0x33e <send_s_signal>
	receive_signal(_pin);
     44a:	85 2d       	mov	r24, r5
     44c:	99 df       	rcall	.-206    	; 0x380 <receive_signal>
	if(DHT_status == OK)
     44e:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <DHT_status>
     452:	81 11       	cpse	r24, r1
     454:	71 c0       	rjmp	.+226    	; 0x538 <receive_raw_data+0x12a>
     456:	01 e0       	ldi	r16, 0x01	; 1
     458:	10 e0       	ldi	r17, 0x00	; 0
     45a:	05 2c       	mov	r0, r5
     45c:	02 c0       	rjmp	.+4      	; 0x462 <receive_raw_data+0x54>
     45e:	00 0f       	add	r16, r16
     460:	11 1f       	adc	r17, r17
     462:	0a 94       	dec	r0
     464:	e2 f7       	brpl	.-8      	; 0x45e <receive_raw_data+0x50>
		for(int i=0; i< 5; i++)
		{
			raw_data[i] = 0;
			for(int j =7; j> -1; j--)
			{
				while(!(DHT_PIN&(0x01 << (DHT_DATA_PIN + _pin))))		//신호가 1이 되는걸 대기
     466:	c1 2c       	mov	r12, r1
     468:	d1 2c       	mov	r13, r1
				}
				checker = 0;
				if(DHT_status == OK)
				{
					_delay_us(35);
					raw_data[i] |= (DHT_PIN&(0x01 << (DHT_DATA_PIN + _pin))) == (0x01 << (DHT_DATA_PIN + _pin))? (1 << j) : 0;
     46a:	aa 24       	eor	r10, r10
     46c:	a3 94       	inc	r10
     46e:	b1 2c       	mov	r11, r1
     470:	61 2c       	mov	r6, r1
     472:	71 2c       	mov	r7, r1
	receive_signal(_pin);
	if(DHT_status == OK)
	{
		for(int i=0; i< 5; i++)
		{
			raw_data[i] = 0;
     474:	e2 e0       	ldi	r30, 0x02	; 2
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	ec 0f       	add	r30, r28
     47a:	fd 1f       	adc	r31, r29
     47c:	ec 0d       	add	r30, r12
     47e:	fd 1d       	adc	r31, r13
     480:	10 82       	st	Z, r1
			for(int j =7; j> -1; j--)
     482:	0f 2e       	mov	r0, r31
     484:	f7 e0       	ldi	r31, 0x07	; 7
     486:	ef 2e       	mov	r14, r31
     488:	f1 2c       	mov	r15, r1
     48a:	f0 2d       	mov	r31, r0
     48c:	06 c0       	rjmp	.+12     	; 0x49a <receive_raw_data+0x8c>
			{
				while(!(DHT_PIN&(0x01 << (DHT_DATA_PIN + _pin))))		//신호가 1이 되는걸 대기
				{
					if(check_timeout(&checker, 20))
     48e:	64 e1       	ldi	r22, 0x14	; 20
     490:	ce 01       	movw	r24, r28
     492:	01 96       	adiw	r24, 0x01	; 1
     494:	43 df       	rcall	.-378    	; 0x31c <check_timeout>
     496:	81 11       	cpse	r24, r1
     498:	07 c0       	rjmp	.+14     	; 0x4a8 <receive_raw_data+0x9a>
		for(int i=0; i< 5; i++)
		{
			raw_data[i] = 0;
			for(int j =7; j> -1; j--)
			{
				while(!(DHT_PIN&(0x01 << (DHT_DATA_PIN + _pin))))		//신호가 1이 되는걸 대기
     49a:	83 b3       	in	r24, 0x13	; 19
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	80 23       	and	r24, r16
     4a0:	91 23       	and	r25, r17
     4a2:	89 2b       	or	r24, r25
     4a4:	a1 f3       	breq	.-24     	; 0x48e <receive_raw_data+0x80>
     4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <receive_raw_data+0xa4>
				{
					if(check_timeout(&checker, 20))
					{
						i = 5;
     4a8:	0f 2e       	mov	r0, r31
     4aa:	f5 e0       	ldi	r31, 0x05	; 5
     4ac:	cf 2e       	mov	r12, r31
     4ae:	d1 2c       	mov	r13, r1
     4b0:	f0 2d       	mov	r31, r0
						break;
					}
				}
				checker = 0;
     4b2:	19 82       	std	Y+1, r1	; 0x01
				if(DHT_status == OK)
     4b4:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <DHT_status>
     4b8:	81 11       	cpse	r24, r1
     4ba:	31 c0       	rjmp	.+98     	; 0x51e <receive_raw_data+0x110>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4bc:	2a eb       	ldi	r18, 0xBA	; 186
     4be:	2a 95       	dec	r18
     4c0:	f1 f7       	brne	.-4      	; 0x4be <receive_raw_data+0xb0>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <receive_raw_data+0xb6>
				{
					_delay_us(35);
					raw_data[i] |= (DHT_PIN&(0x01 << (DHT_DATA_PIN + _pin))) == (0x01 << (DHT_DATA_PIN + _pin))? (1 << j) : 0;
     4c4:	83 b3       	in	r24, 0x13	; 19
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	80 23       	and	r24, r16
     4ca:	91 23       	and	r25, r17
     4cc:	80 17       	cp	r24, r16
     4ce:	91 07       	cpc	r25, r17
     4d0:	41 f4       	brne	.+16     	; 0x4e2 <receive_raw_data+0xd4>
     4d2:	c5 01       	movw	r24, r10
     4d4:	0e 2c       	mov	r0, r14
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <receive_raw_data+0xce>
     4d8:	88 0f       	add	r24, r24
     4da:	99 1f       	adc	r25, r25
     4dc:	0a 94       	dec	r0
     4de:	e2 f7       	brpl	.-8      	; 0x4d8 <receive_raw_data+0xca>
     4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <receive_raw_data+0xd6>
     4e2:	86 2d       	mov	r24, r6
     4e4:	e2 e0       	ldi	r30, 0x02	; 2
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	ec 0f       	add	r30, r28
     4ea:	fd 1f       	adc	r31, r29
     4ec:	ec 0d       	add	r30, r12
     4ee:	fd 1d       	adc	r31, r13
     4f0:	90 81       	ld	r25, Z
     4f2:	89 2b       	or	r24, r25
     4f4:	80 83       	st	Z, r24
					while((DHT_PIN&(0x01 << (DHT_DATA_PIN + _pin))))
     4f6:	06 c0       	rjmp	.+12     	; 0x504 <receive_raw_data+0xf6>
					{
						if(check_timeout(&checker, 25))
     4f8:	69 e1       	ldi	r22, 0x19	; 25
     4fa:	ce 01       	movw	r24, r28
     4fc:	01 96       	adiw	r24, 0x01	; 1
     4fe:	0e df       	rcall	.-484    	; 0x31c <check_timeout>
     500:	81 11       	cpse	r24, r1
     502:	07 c0       	rjmp	.+14     	; 0x512 <receive_raw_data+0x104>
				checker = 0;
				if(DHT_status == OK)
				{
					_delay_us(35);
					raw_data[i] |= (DHT_PIN&(0x01 << (DHT_DATA_PIN + _pin))) == (0x01 << (DHT_DATA_PIN + _pin))? (1 << j) : 0;
					while((DHT_PIN&(0x01 << (DHT_DATA_PIN + _pin))))
     504:	83 b3       	in	r24, 0x13	; 19
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	80 23       	and	r24, r16
     50a:	91 23       	and	r25, r17
     50c:	89 2b       	or	r24, r25
     50e:	a1 f7       	brne	.-24     	; 0x4f8 <receive_raw_data+0xea>
     510:	05 c0       	rjmp	.+10     	; 0x51c <receive_raw_data+0x10e>
					{
						if(check_timeout(&checker, 25))
						{
							i = 5;
     512:	0f 2e       	mov	r0, r31
     514:	f5 e0       	ldi	r31, 0x05	; 5
     516:	cf 2e       	mov	r12, r31
     518:	d1 2c       	mov	r13, r1
     51a:	f0 2d       	mov	r31, r0
							break;
						}
					}
					checker =0;
     51c:	19 82       	std	Y+1, r1	; 0x01
	if(DHT_status == OK)
	{
		for(int i=0; i< 5; i++)
		{
			raw_data[i] = 0;
			for(int j =7; j> -1; j--)
     51e:	41 e0       	ldi	r20, 0x01	; 1
     520:	e4 1a       	sub	r14, r20
     522:	f1 08       	sbc	r15, r1
     524:	08 f0       	brcs	.+2      	; 0x528 <receive_raw_data+0x11a>
     526:	b9 cf       	rjmp	.-142    	; 0x49a <receive_raw_data+0x8c>
	DHT_status = OK;
	send_s_signal(_pin);
	receive_signal(_pin);
	if(DHT_status == OK)
	{
		for(int i=0; i< 5; i++)
     528:	ef ef       	ldi	r30, 0xFF	; 255
     52a:	ce 1a       	sub	r12, r30
     52c:	de 0a       	sbc	r13, r30
     52e:	f5 e0       	ldi	r31, 0x05	; 5
     530:	cf 16       	cp	r12, r31
     532:	d1 04       	cpc	r13, r1
     534:	0c f4       	brge	.+2      	; 0x538 <receive_raw_data+0x12a>
     536:	9e cf       	rjmp	.-196    	; 0x474 <receive_raw_data+0x66>
					checker =0;
				}
			}
		}
	}
	DHT_DDR |= (0x01 << (DHT_DATA_PIN + _pin));		// DDR 출력 설정
     538:	24 b3       	in	r18, 0x14	; 20
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	02 c0       	rjmp	.+4      	; 0x544 <receive_raw_data+0x136>
     540:	88 0f       	add	r24, r24
     542:	99 1f       	adc	r25, r25
     544:	5a 94       	dec	r5
     546:	e2 f7       	brpl	.-8      	; 0x540 <receive_raw_data+0x132>
     548:	92 2f       	mov	r25, r18
     54a:	98 2b       	or	r25, r24
     54c:	94 bb       	out	0x14, r25	; 20
	DHT_PORT |= (0x01 << (DHT_DATA_PIN + _pin));		// high 신호 송출
     54e:	95 b3       	in	r25, 0x15	; 21
     550:	89 2b       	or	r24, r25
     552:	85 bb       	out	0x15, r24	; 21
	sei();
     554:	78 94       	sei
 	if(DHT_status == OK)
     556:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <DHT_status>
     55a:	81 11       	cpse	r24, r1
     55c:	57 c0       	rjmp	.+174    	; 0x60c <receive_raw_data+0x1fe>
 	{
		if ((DHT_type == _DHT11))
     55e:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <DHT_type>
     562:	81 30       	cpi	r24, 0x01	; 1
     564:	09 f0       	breq	.+2      	; 0x568 <receive_raw_data+0x15a>
     566:	5d c0       	rjmp	.+186    	; 0x622 <receive_raw_data+0x214>
	 	if(raw_data[0] + raw_data[1] + raw_data[2] + raw_data[3] != raw_data[4]) DHT_status = checksum;
     568:	2a 81       	ldd	r18, Y+2	; 0x02
     56a:	3c 81       	ldd	r19, Y+4	; 0x04
     56c:	4b 81       	ldd	r20, Y+3	; 0x03
     56e:	82 2f       	mov	r24, r18
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	84 0f       	add	r24, r20
     574:	91 1d       	adc	r25, r1
     576:	83 0f       	add	r24, r19
     578:	91 1d       	adc	r25, r1
     57a:	4d 81       	ldd	r20, Y+5	; 0x05
     57c:	84 0f       	add	r24, r20
     57e:	91 1d       	adc	r25, r1
     580:	4e 81       	ldd	r20, Y+6	; 0x06
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	84 17       	cp	r24, r20
     586:	95 07       	cpc	r25, r21
     588:	09 f4       	brne	.+2      	; 0x58c <receive_raw_data+0x17e>
     58a:	46 c0       	rjmp	.+140    	; 0x618 <receive_raw_data+0x20a>
     58c:	83 e0       	ldi	r24, 0x03	; 3
     58e:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <DHT_status>
     592:	42 c0       	rjmp	.+132    	; 0x618 <receive_raw_data+0x20a>
			else if(raw_data[0] + raw_data[1] + raw_data[2] + raw_data[3] != raw_data[4]) DHT_status = checksum;
		}
		 
		if (DHT_type == _DHT11)
		{
			if((raw_data[0] >95) || (raw_data[0]) < 15) DHT_status = Fail_H;
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <DHT_status>
			if((raw_data[2] >52) || (raw_data[2]) < -2) DHT_status = Fail_T;
     59a:	35 33       	cpi	r19, 0x35	; 53
     59c:	18 f4       	brcc	.+6      	; 0x5a4 <receive_raw_data+0x196>
     59e:	36 c0       	rjmp	.+108    	; 0x60c <receive_raw_data+0x1fe>
     5a0:	35 33       	cpi	r19, 0x35	; 53
     5a2:	08 f1       	brcs	.+66     	; 0x5e6 <receive_raw_data+0x1d8>
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <DHT_status>
     5aa:	30 c0       	rjmp	.+96     	; 0x60c <receive_raw_data+0x1fe>
		
		
		else if (DHT_type == _DHT22)
		{
			conH |= ((uint16_t)raw_data[0]<<8) | raw_data[1];
			conV |= ((uint16_t)raw_data[2]<<8) | raw_data[3];
     5ac:	8c 81       	ldd	r24, Y+4	; 0x04
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	98 2f       	mov	r25, r24
     5b2:	88 27       	eor	r24, r24
     5b4:	2d 81       	ldd	r18, Y+5	; 0x05
     5b6:	82 2b       	or	r24, r18
			if( (conH >1020) || ( conH < -20) ) DHT_status = Fail_H;
     5b8:	2a 81       	ldd	r18, Y+2	; 0x02
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	32 2f       	mov	r19, r18
     5be:	22 27       	eor	r18, r18
     5c0:	4b 81       	ldd	r20, Y+3	; 0x03
     5c2:	24 2b       	or	r18, r20
     5c4:	2c 5e       	subi	r18, 0xEC	; 236
     5c6:	3f 4f       	sbci	r19, 0xFF	; 255
     5c8:	21 31       	cpi	r18, 0x11	; 17
     5ca:	34 40       	sbci	r19, 0x04	; 4
     5cc:	68 f1       	brcs	.+90     	; 0x628 <receive_raw_data+0x21a>
     5ce:	21 e0       	ldi	r18, 0x01	; 1
     5d0:	20 93 70 02 	sts	0x0270, r18	; 0x800270 <DHT_status>
			if(  (conV > 800) || ( conV < -400) ) DHT_status = Fail_T;
     5d4:	80 57       	subi	r24, 0x70	; 112
     5d6:	9e 4f       	sbci	r25, 0xFE	; 254
     5d8:	81 3b       	cpi	r24, 0xB1	; 177
     5da:	94 40       	sbci	r25, 0x04	; 4
     5dc:	b8 f0       	brcs	.+46     	; 0x60c <receive_raw_data+0x1fe>
     5de:	82 e0       	ldi	r24, 0x02	; 2
     5e0:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <DHT_status>
     5e4:	13 c0       	rjmp	.+38     	; 0x60c <receive_raw_data+0x1fe>
		}
		
  		
 	}
	if(DHT_status == OK)
     5e6:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <DHT_status>
     5ea:	81 11       	cpse	r24, r1
     5ec:	0f c0       	rjmp	.+30     	; 0x60c <receive_raw_data+0x1fe>
     5ee:	fe 01       	movw	r30, r28
     5f0:	32 96       	adiw	r30, 0x02	; 2
     5f2:	d4 01       	movw	r26, r8
     5f4:	9e 01       	movw	r18, r28
     5f6:	2a 5f       	subi	r18, 0xFA	; 250
     5f8:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		for(int k = 0; k < 4; k++) _data[k] = raw_data[k];
     5fa:	81 91       	ld	r24, Z+
     5fc:	8d 93       	st	X+, r24
     5fe:	e2 17       	cp	r30, r18
     600:	f3 07       	cpc	r31, r19
     602:	d9 f7       	brne	.-10     	; 0x5fa <receive_raw_data+0x1ec>
	}
 	if(DHT_status != OK)
     604:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <DHT_status>
     608:	88 23       	and	r24, r24
     60a:	a1 f0       	breq	.+40     	; 0x634 <receive_raw_data+0x226>
 	{
 		for(int k = 0; k < 4; k++) _data[k] = '\0';
     60c:	f4 01       	movw	r30, r8
     60e:	10 82       	st	Z, r1
     610:	11 82       	std	Z+1, r1	; 0x01
     612:	12 82       	std	Z+2, r1	; 0x02
     614:	13 82       	std	Z+3, r1	; 0x03
 	}
}
     616:	0e c0       	rjmp	.+28     	; 0x634 <receive_raw_data+0x226>
			else if(raw_data[0] + raw_data[1] + raw_data[2] + raw_data[3] != raw_data[4]) DHT_status = checksum;
		}
		 
		if (DHT_type == _DHT11)
		{
			if((raw_data[0] >95) || (raw_data[0]) < 15) DHT_status = Fail_H;
     618:	2f 50       	subi	r18, 0x0F	; 15
     61a:	21 35       	cpi	r18, 0x51	; 81
     61c:	08 f0       	brcs	.+2      	; 0x620 <receive_raw_data+0x212>
     61e:	ba cf       	rjmp	.-140    	; 0x594 <receive_raw_data+0x186>
     620:	bf cf       	rjmp	.-130    	; 0x5a0 <receive_raw_data+0x192>
			if((raw_data[2] >52) || (raw_data[2]) < -2) DHT_status = Fail_T;
		}
		
		
		else if (DHT_type == _DHT22)
     622:	82 30       	cpi	r24, 0x02	; 2
     624:	21 f7       	brne	.-56     	; 0x5ee <receive_raw_data+0x1e0>
     626:	c2 cf       	rjmp	.-124    	; 0x5ac <receive_raw_data+0x19e>
		{
			conH |= ((uint16_t)raw_data[0]<<8) | raw_data[1];
			conV |= ((uint16_t)raw_data[2]<<8) | raw_data[3];
			if( (conH >1020) || ( conH < -20) ) DHT_status = Fail_H;
			if(  (conV > 800) || ( conV < -400) ) DHT_status = Fail_T;
     628:	80 57       	subi	r24, 0x70	; 112
     62a:	9e 4f       	sbci	r25, 0xFE	; 254
     62c:	81 3b       	cpi	r24, 0xB1	; 177
     62e:	94 40       	sbci	r25, 0x04	; 4
     630:	f0 f2       	brcs	.-68     	; 0x5ee <receive_raw_data+0x1e0>
     632:	d5 cf       	rjmp	.-86     	; 0x5de <receive_raw_data+0x1d0>
	}
 	if(DHT_status != OK)
 	{
 		for(int k = 0; k < 4; k++) _data[k] = '\0';
 	}
}
     634:	26 96       	adiw	r28, 0x06	; 6
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	cd bf       	out	0x3d, r28	; 61
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	df 90       	pop	r13
     64e:	cf 90       	pop	r12
     650:	bf 90       	pop	r11
     652:	af 90       	pop	r10
     654:	9f 90       	pop	r9
     656:	8f 90       	pop	r8
     658:	7f 90       	pop	r7
     65a:	6f 90       	pop	r6
     65c:	5f 90       	pop	r5
     65e:	08 95       	ret

00000660 <get_DHT_data>:


void get_DHT_data(uint8_t humi[2], uint8_t temp[2], uint8_t _pin, uint8_t _type)
{
     660:	ef 92       	push	r14
     662:	ff 92       	push	r15
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	00 d0       	rcall	.+0      	; 0x66e <get_DHT_data+0xe>
     66e:	00 d0       	rcall	.+0      	; 0x670 <get_DHT_data+0x10>
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62
     674:	7c 01       	movw	r14, r24
     676:	8b 01       	movw	r16, r22
     678:	64 2f       	mov	r22, r20
	uint8_t data[4];
	
	receive_raw_data(data, _pin, _type);
     67a:	42 2f       	mov	r20, r18
     67c:	ce 01       	movw	r24, r28
     67e:	01 96       	adiw	r24, 0x01	; 1
     680:	c6 de       	rcall	.-628    	; 0x40e <receive_raw_data>
	
if (DHT_type == _DHT11)
     682:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <DHT_type>
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	a1 f4       	brne	.+40     	; 0x6b2 <get_DHT_data+0x52>
{
	humi[0] = data[0] +8;
     68a:	89 81       	ldd	r24, Y+1	; 0x01
     68c:	88 5f       	subi	r24, 0xF8	; 248
	if(humi[0]>99) humi[0] = 99;
     68e:	84 36       	cpi	r24, 0x64	; 100
     690:	18 f4       	brcc	.+6      	; 0x698 <get_DHT_data+0x38>
	
	receive_raw_data(data, _pin, _type);
	
if (DHT_type == _DHT11)
{
	humi[0] = data[0] +8;
     692:	d7 01       	movw	r26, r14
     694:	8c 93       	st	X, r24
     696:	03 c0       	rjmp	.+6      	; 0x69e <get_DHT_data+0x3e>
	if(humi[0]>99) humi[0] = 99;
     698:	83 e6       	ldi	r24, 0x63	; 99
     69a:	f7 01       	movw	r30, r14
     69c:	80 83       	st	Z, r24
	humi[1] = data[1];
     69e:	8a 81       	ldd	r24, Y+2	; 0x02
     6a0:	d7 01       	movw	r26, r14
     6a2:	11 96       	adiw	r26, 0x01	; 1
     6a4:	8c 93       	st	X, r24
	temp[0] = data[2];
     6a6:	8b 81       	ldd	r24, Y+3	; 0x03
     6a8:	f8 01       	movw	r30, r16
     6aa:	80 83       	st	Z, r24
	temp[1] = data[3];
     6ac:	8c 81       	ldd	r24, Y+4	; 0x04
     6ae:	81 83       	std	Z+1, r24	; 0x01
     6b0:	46 c0       	rjmp	.+140    	; 0x73e <get_DHT_data+0xde>
}

else if (DHT_type == _DHT22)
     6b2:	82 30       	cpi	r24, 0x02	; 2
     6b4:	09 f0       	breq	.+2      	; 0x6b8 <get_DHT_data+0x58>
     6b6:	43 c0       	rjmp	.+134    	; 0x73e <get_DHT_data+0xde>
{
	uint16_t _humi =0, _temp =0;
	_humi |= ((uint16_t)data[0]<<8) | data[1];
     6b8:	e9 81       	ldd	r30, Y+1	; 0x01
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	fe 2f       	mov	r31, r30
     6be:	ee 27       	eor	r30, r30
     6c0:	8a 81       	ldd	r24, Y+2	; 0x02
     6c2:	e8 2b       	or	r30, r24
	_temp |= ((uint16_t)data[2]<<8) | data[3];
     6c4:	4b 81       	ldd	r20, Y+3	; 0x03
     6c6:	50 e0       	ldi	r21, 0x00	; 0
     6c8:	54 2f       	mov	r21, r20
     6ca:	44 27       	eor	r20, r20
     6cc:	8c 81       	ldd	r24, Y+4	; 0x04
     6ce:	48 2b       	or	r20, r24
	
	humi[0] = _humi / 10;
     6d0:	9f 01       	movw	r18, r30
     6d2:	ad ec       	ldi	r26, 0xCD	; 205
     6d4:	bc ec       	ldi	r27, 0xCC	; 204
     6d6:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__umulhisi3>
     6da:	96 95       	lsr	r25
     6dc:	87 95       	ror	r24
     6de:	96 95       	lsr	r25
     6e0:	87 95       	ror	r24
     6e2:	96 95       	lsr	r25
     6e4:	87 95       	ror	r24
     6e6:	d7 01       	movw	r26, r14
     6e8:	8c 93       	st	X, r24
	humi[1] = _humi % 10;
     6ea:	9c 01       	movw	r18, r24
     6ec:	22 0f       	add	r18, r18
     6ee:	33 1f       	adc	r19, r19
     6f0:	88 0f       	add	r24, r24
     6f2:	99 1f       	adc	r25, r25
     6f4:	88 0f       	add	r24, r24
     6f6:	99 1f       	adc	r25, r25
     6f8:	88 0f       	add	r24, r24
     6fa:	99 1f       	adc	r25, r25
     6fc:	82 0f       	add	r24, r18
     6fe:	93 1f       	adc	r25, r19
     700:	e8 1b       	sub	r30, r24
     702:	f9 0b       	sbc	r31, r25
     704:	11 96       	adiw	r26, 0x01	; 1
     706:	ec 93       	st	X, r30
	
	temp[0] = _temp / 10;
     708:	9a 01       	movw	r18, r20
     70a:	ad ec       	ldi	r26, 0xCD	; 205
     70c:	bc ec       	ldi	r27, 0xCC	; 204
     70e:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__umulhisi3>
     712:	96 95       	lsr	r25
     714:	87 95       	ror	r24
     716:	96 95       	lsr	r25
     718:	87 95       	ror	r24
     71a:	96 95       	lsr	r25
     71c:	87 95       	ror	r24
     71e:	f8 01       	movw	r30, r16
     720:	80 83       	st	Z, r24
	temp[1] = _temp % 10;
     722:	9c 01       	movw	r18, r24
     724:	22 0f       	add	r18, r18
     726:	33 1f       	adc	r19, r19
     728:	88 0f       	add	r24, r24
     72a:	99 1f       	adc	r25, r25
     72c:	88 0f       	add	r24, r24
     72e:	99 1f       	adc	r25, r25
     730:	88 0f       	add	r24, r24
     732:	99 1f       	adc	r25, r25
     734:	82 0f       	add	r24, r18
     736:	93 1f       	adc	r25, r19
     738:	48 1b       	sub	r20, r24
     73a:	59 0b       	sbc	r21, r25
     73c:	41 83       	std	Z+1, r20	; 0x01
}
                        
}
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	ff 90       	pop	r15
     750:	ef 90       	pop	r14
     752:	08 95       	ret

00000754 <avg_hum>:

float avg_hum(uint8_t _pin, uint8_t _type)
{
     754:	2f 92       	push	r2
     756:	3f 92       	push	r3
     758:	4f 92       	push	r4
     75a:	5f 92       	push	r5
     75c:	6f 92       	push	r6
     75e:	7f 92       	push	r7
     760:	8f 92       	push	r8
     762:	9f 92       	push	r9
     764:	af 92       	push	r10
     766:	bf 92       	push	r11
     768:	cf 92       	push	r12
     76a:	df 92       	push	r13
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	cd b7       	in	r28, 0x3d	; 61
     77a:	de b7       	in	r29, 0x3e	; 62
     77c:	6c 97       	sbiw	r28, 0x1c	; 28
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	f8 94       	cli
     782:	de bf       	out	0x3e, r29	; 62
     784:	0f be       	out	0x3f, r0	; 63
     786:	cd bf       	out	0x3d, r28	; 61
     788:	48 2e       	mov	r4, r24
     78a:	56 2e       	mov	r5, r22
     78c:	8e 01       	movw	r16, r28
     78e:	0f 5f       	subi	r16, 0xFF	; 255
     790:	1f 4f       	sbci	r17, 0xFF	; 255
     792:	5e 01       	movw	r10, r28
     794:	8f e0       	ldi	r24, 0x0F	; 15
     796:	a8 0e       	add	r10, r24
     798:	b1 1c       	adc	r11, r1
		get_DHT_data(hum[i], tem[i], _pin, _type);
		if(i == 0)
		{
			Hmax = hum[i][0];
			Hmin = hum[i][0];
			Imax = i;
     79a:	88 24       	eor	r8, r8
     79c:	83 94       	inc	r8
     79e:	91 2c       	mov	r9, r1
     7a0:	e1 2c       	mov	r14, r1
     7a2:	f1 2c       	mov	r15, r1

float avg_hum(uint8_t _pin, uint8_t _type)
{
	uint8_t hum[7][2], tem[7][2];
	uint8_t Hmax, Hmin, Imax, Imin;
	uint16_t sum = 0;
     7a4:	c1 2c       	mov	r12, r1
     7a6:	d1 2c       	mov	r13, r1
     7a8:	0b c0       	rjmp	.+22     	; 0x7c0 <avg_hum+0x6c>
     7aa:	9f ef       	ldi	r25, 0xFF	; 255
     7ac:	e9 1a       	sub	r14, r25
     7ae:	f9 0a       	sbc	r15, r25
     7b0:	0e 5f       	subi	r16, 0xFE	; 254
     7b2:	1f 4f       	sbci	r17, 0xFF	; 255
     7b4:	e2 e0       	ldi	r30, 0x02	; 2
     7b6:	ae 0e       	add	r10, r30
     7b8:	b1 1c       	adc	r11, r1
     7ba:	ff ef       	ldi	r31, 0xFF	; 255
     7bc:	8f 1a       	sub	r8, r31
     7be:	9f 0a       	sbc	r9, r31
	for(int i = 0; i<7; i++)
	{
		get_DHT_data(hum[i], tem[i], _pin, _type);
     7c0:	25 2d       	mov	r18, r5
     7c2:	44 2d       	mov	r20, r4
     7c4:	b5 01       	movw	r22, r10
     7c6:	c8 01       	movw	r24, r16
     7c8:	4b df       	rcall	.-362    	; 0x660 <get_DHT_data>
		if(i == 0)
     7ca:	e1 14       	cp	r14, r1
     7cc:	f1 04       	cpc	r15, r1
     7ce:	49 f4       	brne	.+18     	; 0x7e2 <avg_hum+0x8e>
		{
			Hmax = hum[i][0];
     7d0:	39 80       	ldd	r3, Y+1	; 0x01
		else
		{
			Imax = hum[i][0] > Hmax? i : Imax;
			Imin = hum[i][0] < Hmin? i : Imin;
		}
		sum += hum[i][0];
     7d2:	f8 01       	movw	r30, r16
     7d4:	80 81       	ld	r24, Z
     7d6:	c8 0e       	add	r12, r24
     7d8:	d1 1c       	adc	r13, r1
	{
		get_DHT_data(hum[i], tem[i], _pin, _type);
		if(i == 0)
		{
			Hmax = hum[i][0];
			Hmin = hum[i][0];
     7da:	23 2c       	mov	r2, r3
			Imax = i;
			Imin = i;
     7dc:	71 2c       	mov	r7, r1
		get_DHT_data(hum[i], tem[i], _pin, _type);
		if(i == 0)
		{
			Hmax = hum[i][0];
			Hmin = hum[i][0];
			Imax = i;
     7de:	61 2c       	mov	r6, r1
     7e0:	e4 cf       	rjmp	.-56     	; 0x7aa <avg_hum+0x56>
			Imin = i;
		}
		else
		{
			Imax = hum[i][0] > Hmax? i : Imax;
     7e2:	f8 01       	movw	r30, r16
     7e4:	80 81       	ld	r24, Z
     7e6:	38 16       	cp	r3, r24
     7e8:	08 f4       	brcc	.+2      	; 0x7ec <avg_hum+0x98>
     7ea:	6e 2c       	mov	r6, r14
			Imin = hum[i][0] < Hmin? i : Imin;
     7ec:	82 15       	cp	r24, r2
     7ee:	08 f4       	brcc	.+2      	; 0x7f2 <avg_hum+0x9e>
     7f0:	7e 2c       	mov	r7, r14
		}
		sum += hum[i][0];
     7f2:	c8 0e       	add	r12, r24
     7f4:	d1 1c       	adc	r13, r1
float avg_hum(uint8_t _pin, uint8_t _type)
{
	uint8_t hum[7][2], tem[7][2];
	uint8_t Hmax, Hmin, Imax, Imin;
	uint16_t sum = 0;
	for(int i = 0; i<7; i++)
     7f6:	f7 e0       	ldi	r31, 0x07	; 7
     7f8:	8f 16       	cp	r8, r31
     7fa:	91 04       	cpc	r9, r1
     7fc:	b4 f2       	brlt	.-84     	; 0x7aa <avg_hum+0x56>
			Imax = hum[i][0] > Hmax? i : Imax;
			Imin = hum[i][0] < Hmin? i : Imin;
		}
		sum += hum[i][0];
	}
	return (float)(sum - hum[Imax][0] - hum[Imin][0]) / 5;
     7fe:	e6 2d       	mov	r30, r6
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	ee 0f       	add	r30, r30
     804:	ff 1f       	adc	r31, r31
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	8c 0f       	add	r24, r28
     80c:	9d 1f       	adc	r25, r29
     80e:	e8 0f       	add	r30, r24
     810:	f9 1f       	adc	r31, r25
     812:	80 81       	ld	r24, Z
     814:	b6 01       	movw	r22, r12
     816:	68 1b       	sub	r22, r24
     818:	71 09       	sbc	r23, r1
     81a:	e7 2d       	mov	r30, r7
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	ee 0f       	add	r30, r30
     820:	ff 1f       	adc	r31, r31
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	8c 0f       	add	r24, r28
     828:	9d 1f       	adc	r25, r29
     82a:	e8 0f       	add	r30, r24
     82c:	f9 1f       	adc	r31, r25
     82e:	80 81       	ld	r24, Z
     830:	68 1b       	sub	r22, r24
     832:	71 09       	sbc	r23, r1
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__floatunsisf>
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	40 ea       	ldi	r20, 0xA0	; 160
     842:	50 e4       	ldi	r21, 0x40	; 64
     844:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__divsf3>
     848:	6c 96       	adiw	r28, 0x1c	; 28
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	ff 90       	pop	r15
     85e:	ef 90       	pop	r14
     860:	df 90       	pop	r13
     862:	cf 90       	pop	r12
     864:	bf 90       	pop	r11
     866:	af 90       	pop	r10
     868:	9f 90       	pop	r9
     86a:	8f 90       	pop	r8
     86c:	7f 90       	pop	r7
     86e:	6f 90       	pop	r6
     870:	5f 90       	pop	r5
     872:	4f 90       	pop	r4
     874:	3f 90       	pop	r3
     876:	2f 90       	pop	r2
     878:	08 95       	ret

0000087a <HallSensor_Init>:
uint8_t ready_Flag = 0, left_Flag = 0;
uint32_t rot = 0;

void HallSensor_Init()
{
	HallSensor_Port |= (1 << HallSensor_Apin) | (1 << HallSensor_Bpin);
     87a:	83 b1       	in	r24, 0x03	; 3
     87c:	80 6c       	ori	r24, 0xC0	; 192
     87e:	83 b9       	out	0x03, r24	; 3
	EIMSK |= (1 << INT6) | (1 << INT7);
     880:	89 b7       	in	r24, 0x39	; 57
     882:	80 6c       	ori	r24, 0xC0	; 192
     884:	89 bf       	out	0x39, r24	; 57
	EICRB |= (1 << ISC61) |(1 << ISC60) | (1 << ISC71) | (1 << ISC70);
     886:	8a b7       	in	r24, 0x3a	; 58
     888:	80 6f       	ori	r24, 0xF0	; 240
     88a:	8a bf       	out	0x3a, r24	; 58
     88c:	08 95       	ret

0000088e <ISR_Toggle_A>:
}

void ISR_Toggle_A()
{
	a ^= 1;
     88e:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <a>
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	89 27       	eor	r24, r25
     896:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <a>
	if(a)
     89a:	88 23       	and	r24, r24
     89c:	f1 f0       	breq	.+60     	; 0x8da <ISR_Toggle_A+0x4c>
	{
		EICRB &= ~(0 << ISC60);
     89e:	8a b7       	in	r24, 0x3a	; 58
     8a0:	8a bf       	out	0x3a, r24	; 58
		b? rot++: (left_Flag = 1);
     8a2:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <b>
     8a6:	88 23       	and	r24, r24
     8a8:	a1 f0       	breq	.+40     	; 0x8d2 <ISR_Toggle_A+0x44>
     8aa:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <rot>
     8ae:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <rot+0x1>
     8b2:	a0 91 64 02 	lds	r26, 0x0264	; 0x800264 <rot+0x2>
     8b6:	b0 91 65 02 	lds	r27, 0x0265	; 0x800265 <rot+0x3>
     8ba:	01 96       	adiw	r24, 0x01	; 1
     8bc:	a1 1d       	adc	r26, r1
     8be:	b1 1d       	adc	r27, r1
     8c0:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <rot>
     8c4:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <rot+0x1>
     8c8:	a0 93 64 02 	sts	0x0264, r26	; 0x800264 <rot+0x2>
     8cc:	b0 93 65 02 	sts	0x0265, r27	; 0x800265 <rot+0x3>
     8d0:	08 95       	ret
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <left_Flag>
     8d8:	08 95       	ret
	}
	else EICRB |= (1 << ISC60);
     8da:	8a b7       	in	r24, 0x3a	; 58
     8dc:	80 61       	ori	r24, 0x10	; 16
     8de:	8a bf       	out	0x3a, r24	; 58
     8e0:	08 95       	ret

000008e2 <ISR_Toggle_B>:
}

void ISR_Toggle_B()
{
	b ^= 1;
     8e2:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <b>
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	89 27       	eor	r24, r25
     8ea:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <b>
	if(b)
     8ee:	88 23       	and	r24, r24
     8f0:	e9 f0       	breq	.+58     	; 0x92c <ISR_Toggle_B+0x4a>
	{
		EICRB &= ~(0 << ISC70);
     8f2:	8a b7       	in	r24, 0x3a	; 58
     8f4:	8a bf       	out	0x3a, r24	; 58
		a? rot++ : (left_Flag = 0);
     8f6:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <a>
     8fa:	88 23       	and	r24, r24
     8fc:	a1 f0       	breq	.+40     	; 0x926 <ISR_Toggle_B+0x44>
     8fe:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <rot>
     902:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <rot+0x1>
     906:	a0 91 64 02 	lds	r26, 0x0264	; 0x800264 <rot+0x2>
     90a:	b0 91 65 02 	lds	r27, 0x0265	; 0x800265 <rot+0x3>
     90e:	01 96       	adiw	r24, 0x01	; 1
     910:	a1 1d       	adc	r26, r1
     912:	b1 1d       	adc	r27, r1
     914:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <rot>
     918:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <rot+0x1>
     91c:	a0 93 64 02 	sts	0x0264, r26	; 0x800264 <rot+0x2>
     920:	b0 93 65 02 	sts	0x0265, r27	; 0x800265 <rot+0x3>
     924:	08 95       	ret
     926:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <left_Flag>
     92a:	08 95       	ret
	}
	else EICRB |= (1 << ISC70);
     92c:	8a b7       	in	r24, 0x3a	; 58
     92e:	80 64       	ori	r24, 0x40	; 64
     930:	8a bf       	out	0x3a, r24	; 58
     932:	08 95       	ret

00000934 <get_rotation>:
}

uint32_t get_rotation()
{
	return rot;
     934:	60 91 62 02 	lds	r22, 0x0262	; 0x800262 <rot>
     938:	70 91 63 02 	lds	r23, 0x0263	; 0x800263 <rot+0x1>
     93c:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <rot+0x2>
     940:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <rot+0x3>
}
     944:	08 95       	ret

00000946 <set_rotation>:

void set_rotation(uint32_t _num)
{
	rot = _num;
     946:	60 93 62 02 	sts	0x0262, r22	; 0x800262 <rot>
     94a:	70 93 63 02 	sts	0x0263, r23	; 0x800263 <rot+0x1>
     94e:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <rot+0x2>
     952:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <rot+0x3>
     956:	08 95       	ret

00000958 <power_on>:
	_delay_us(60);
}

void power_on()
{
	HX711_PORT &= ~(1 << HX711_SCLK_PIN);
     958:	ad 98       	cbi	0x15, 5	; 21
     95a:	08 95       	ret

0000095c <HX711_init>:
}

void HX711_init()
{
	//DDR setting
	HX711_DDR &= ~(1 << HX711_DO_PIN);
     95c:	a4 98       	cbi	0x14, 4	; 20
	HX711_DDR |= (0x01 << HX711_SCLK_PIN);
     95e:	a5 9a       	sbi	0x14, 5	; 20
     960:	08 95       	ret

00000962 <rising_edge>:
}

void rising_edge()
{
	HX711_PORT &= ~(1 << HX711_SCLK_PIN);
     962:	ad 98       	cbi	0x15, 5	; 21
	HX711_PORT |= (1 << HX711_SCLK_PIN);
     964:	ad 9a       	sbi	0x15, 5	; 21
     966:	08 95       	ret

00000968 <falling_edge>:
}

void falling_edge()
{
	HX711_PORT |= (1 << HX711_SCLK_PIN);
     968:	ad 9a       	sbi	0x15, 5	; 21
	HX711_PORT &= ~(1 << HX711_SCLK_PIN);
     96a:	ad 98       	cbi	0x15, 5	; 21
     96c:	08 95       	ret

0000096e <Load_Cell_Ready>:
}

uint8_t Load_Cell_Ready()
{
	power_on();
     96e:	f4 df       	rcall	.-24     	; 0x958 <power_on>
	if(HX711_PIN & (1 << HX711_DO_PIN)) return 0;
     970:	83 b3       	in	r24, 0x13	; 19
     972:	82 95       	swap	r24
     974:	81 70       	andi	r24, 0x01	; 1
	else return 1;
}
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	89 27       	eor	r24, r25
     97a:	08 95       	ret

0000097c <read_load_cell>:


uint32_t read_load_cell()
{
     97c:	cf 92       	push	r12
     97e:	df 92       	push	r13
     980:	ef 92       	push	r14
     982:	ff 92       	push	r15
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
	uint32_t temp = 0;
	uint8_t filler = 0x00, at;
	while(!Load_Cell_Ready());
     988:	f2 df       	rcall	.-28     	; 0x96e <Load_Cell_Ready>
     98a:	88 23       	and	r24, r24
     98c:	e9 f3       	breq	.-6      	; 0x988 <read_load_cell+0xc>
     98e:	c7 e1       	ldi	r28, 0x17	; 23
     990:	d0 e0       	ldi	r29, 0x00	; 0
     992:	c1 2c       	mov	r12, r1
     994:	d1 2c       	mov	r13, r1
     996:	76 01       	movw	r14, r12
	for(int j =23; j > -1; j--)
	{
		rising_edge();
     998:	e4 df       	rcall	.-56     	; 0x962 <rising_edge>
     99a:	83 b3       	in	r24, 0x13	; 19
		at = (HX711_PIN & (1 << HX711_DO_PIN)) == (1 << HX711_DO_PIN) ? 0x01 : 0x00;
     99c:	82 95       	swap	r24
		temp |= ((uint32_t)at << j);
     99e:	81 70       	andi	r24, 0x01	; 1
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	a0 e0       	ldi	r26, 0x00	; 0
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	0c 2e       	mov	r0, r28
     9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <read_load_cell+0x36>
     9aa:	88 0f       	add	r24, r24
     9ac:	99 1f       	adc	r25, r25
     9ae:	aa 1f       	adc	r26, r26
     9b0:	bb 1f       	adc	r27, r27
     9b2:	0a 94       	dec	r0
     9b4:	d2 f7       	brpl	.-12     	; 0x9aa <read_load_cell+0x2e>
     9b6:	c8 2a       	or	r12, r24
     9b8:	d9 2a       	or	r13, r25
     9ba:	ea 2a       	or	r14, r26
     9bc:	fb 2a       	or	r15, r27
     9be:	21 97       	sbiw	r28, 0x01	; 1
uint32_t read_load_cell()
{
	uint32_t temp = 0;
	uint8_t filler = 0x00, at;
	while(!Load_Cell_Ready());
	for(int j =23; j > -1; j--)
     9c0:	58 f7       	brcc	.-42     	; 0x998 <read_load_cell+0x1c>
	{
		rising_edge();
		at = (HX711_PIN & (1 << HX711_DO_PIN)) == (1 << HX711_DO_PIN) ? 0x01 : 0x00;
		temp |= ((uint32_t)at << j);
	}
	rising_edge();
     9c2:	cf df       	rcall	.-98     	; 0x962 <rising_edge>
     9c4:	d1 df       	rcall	.-94     	; 0x968 <falling_edge>
	falling_edge();
     9c6:	d7 01       	movw	r26, r14
     9c8:	c6 01       	movw	r24, r12
	if(temp & 0x800000) filler = 0xff;
	temp |= ((uint32_t)filler << 24);
     9ca:	07 2e       	mov	r0, r23
     9cc:	77 e1       	ldi	r23, 0x17	; 23
     9ce:	b6 95       	lsr	r27
     9d0:	a7 95       	ror	r26
     9d2:	97 95       	ror	r25
     9d4:	87 95       	ror	r24
     9d6:	7a 95       	dec	r23
     9d8:	d1 f7       	brne	.-12     	; 0x9ce <read_load_cell+0x52>
     9da:	70 2d       	mov	r23, r0
     9dc:	81 70       	andi	r24, 0x01	; 1
     9de:	68 2f       	mov	r22, r24
     9e0:	61 95       	neg	r22
     9e2:	86 2f       	mov	r24, r22
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	a0 e0       	ldi	r26, 0x00	; 0
     9e8:	b0 e0       	ldi	r27, 0x00	; 0
     9ea:	b8 2f       	mov	r27, r24
     9ec:	aa 27       	eor	r26, r26
     9ee:	99 27       	eor	r25, r25
     9f0:	88 27       	eor	r24, r24
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26

	return temp;
     9f6:	6c 29       	or	r22, r12
     9f8:	7d 29       	or	r23, r13
     9fa:	8e 29       	or	r24, r14
     9fc:	9f 29       	or	r25, r15
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
}
     a02:	ff 90       	pop	r15
     a04:	ef 90       	pop	r14
     a06:	df 90       	pop	r13
     a08:	cf 90       	pop	r12
     a0a:	08 95       	ret

00000a0c <avg_value>:
     a0c:	8f 92       	push	r8
     a0e:	9f 92       	push	r9

uint32_t avg_value(int num)
{
     a10:	af 92       	push	r10
     a12:	bf 92       	push	r11
     a14:	cf 92       	push	r12
     a16:	df 92       	push	r13
     a18:	ef 92       	push	r14
     a1a:	ff 92       	push	r15
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
	uint32_t sum =0;
	for(int i =0; i <num; i++)
     a24:	18 16       	cp	r1, r24
     a26:	19 06       	cpc	r1, r25
     a28:	c4 f4       	brge	.+48     	; 0xa5a <avg_value+0x4e>
     a2a:	8c 01       	movw	r16, r24
     a2c:	c0 e0       	ldi	r28, 0x00	; 0
     a2e:	d0 e0       	ldi	r29, 0x00	; 0
     a30:	c1 2c       	mov	r12, r1
     a32:	d1 2c       	mov	r13, r1
     a34:	76 01       	movw	r14, r12
	{
		sum += (read_load_cell() / num);
     a36:	4c 01       	movw	r8, r24
     a38:	99 0f       	add	r25, r25
     a3a:	aa 08       	sbc	r10, r10
     a3c:	bb 08       	sbc	r11, r11
     a3e:	9e df       	rcall	.-196    	; 0x97c <read_load_cell>
     a40:	a5 01       	movw	r20, r10
     a42:	94 01       	movw	r18, r8
     a44:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <__udivmodsi4>
     a48:	c2 0e       	add	r12, r18
     a4a:	d3 1e       	adc	r13, r19
     a4c:	e4 1e       	adc	r14, r20
     a4e:	f5 1e       	adc	r15, r21
}

uint32_t avg_value(int num)
{
	uint32_t sum =0;
	for(int i =0; i <num; i++)
     a50:	21 96       	adiw	r28, 0x01	; 1
     a52:	0c 17       	cp	r16, r28
     a54:	1d 07       	cpc	r17, r29
     a56:	99 f7       	brne	.-26     	; 0xa3e <avg_value+0x32>
     a58:	03 c0       	rjmp	.+6      	; 0xa60 <avg_value+0x54>
	return temp;
}

uint32_t avg_value(int num)
{
	uint32_t sum =0;
     a5a:	c1 2c       	mov	r12, r1
     a5c:	d1 2c       	mov	r13, r1
     a5e:	76 01       	movw	r14, r12
	for(int i =0; i <num; i++)
	{
		sum += (read_load_cell() / num);
	}
	return sum;
}
     a60:	c7 01       	movw	r24, r14
     a62:	b6 01       	movw	r22, r12
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	ff 90       	pop	r15
     a6e:	ef 90       	pop	r14
     a70:	df 90       	pop	r13
     a72:	cf 90       	pop	r12
     a74:	bf 90       	pop	r11
     a76:	af 90       	pop	r10
     a78:	9f 90       	pop	r9
     a7a:	8f 90       	pop	r8
     a7c:	08 95       	ret

00000a7e <set_offset>:

void set_offset(int _num)
{
	offset = avg_value(_num);
     a7e:	c6 df       	rcall	.-116    	; 0xa0c <avg_value>
     a80:	60 93 72 02 	sts	0x0272, r22	; 0x800272 <offset>
     a84:	70 93 73 02 	sts	0x0273, r23	; 0x800273 <offset+0x1>
     a88:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <offset+0x2>
     a8c:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <offset+0x3>
     a90:	08 95       	ret

00000a92 <get_value>:
}

uint32_t get_value(int num)
{
     a92:	0f 93       	push	r16
     a94:	1f 93       	push	r17
	uint32_t temp = avg_value(num) - offset;
     a96:	ba df       	rcall	.-140    	; 0xa0c <avg_value>
     a98:	00 91 72 02 	lds	r16, 0x0272	; 0x800272 <offset>
     a9c:	10 91 73 02 	lds	r17, 0x0273	; 0x800273 <offset+0x1>
     aa0:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <offset+0x2>
     aa4:	30 91 75 02 	lds	r19, 0x0275	; 0x800275 <offset+0x3>
     aa8:	60 1b       	sub	r22, r16
     aaa:	71 0b       	sbc	r23, r17
     aac:	82 0b       	sbc	r24, r18
     aae:	93 0b       	sbc	r25, r19
	if(temp>0xffff0000) temp =0;
     ab0:	61 30       	cpi	r22, 0x01	; 1
     ab2:	71 05       	cpc	r23, r1
     ab4:	2f ef       	ldi	r18, 0xFF	; 255
     ab6:	82 07       	cpc	r24, r18
     ab8:	92 07       	cpc	r25, r18
     aba:	18 f0       	brcs	.+6      	; 0xac2 <get_value+0x30>
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	cb 01       	movw	r24, r22
	return temp;
}
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	08 95       	ret

00000ac8 <calc_value>:

void calc_value(int _num, uint32_t weight[2])
{
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	8c 01       	movw	r16, r24
     ad2:	eb 01       	movw	r28, r22
	weight[0] = (double)get_value(_num) / load_scale;
     ad4:	de df       	rcall	.-68     	; 0xa92 <get_value>
     ad6:	db d7       	rcall	.+4022   	; 0x1a8e <__floatunsisf>
     ad8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     adc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     ae0:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
     ae4:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
     ae8:	3e d7       	rcall	.+3708   	; 0x1966 <__divsf3>
     aea:	a5 d7       	rcall	.+3914   	; 0x1a36 <__fixunssfsi>
     aec:	68 83       	st	Y, r22
     aee:	79 83       	std	Y+1, r23	; 0x01
     af0:	8a 83       	std	Y+2, r24	; 0x02
     af2:	9b 83       	std	Y+3, r25	; 0x03
	weight[1] = (uint32_t)(((double)get_value(_num) / load_scale) *100) %100;
     af4:	c8 01       	movw	r24, r16
     af6:	cd df       	rcall	.-102    	; 0xa92 <get_value>
     af8:	ca d7       	rcall	.+3988   	; 0x1a8e <__floatunsisf>
     afa:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     afe:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     b02:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
     b06:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
     b0a:	2d d7       	rcall	.+3674   	; 0x1966 <__divsf3>
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	48 ec       	ldi	r20, 0xC8	; 200
     b12:	52 e4       	ldi	r21, 0x42	; 66
     b14:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     b18:	8e d7       	rcall	.+3868   	; 0x1a36 <__fixunssfsi>
     b1a:	24 e6       	ldi	r18, 0x64	; 100
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	40 e0       	ldi	r20, 0x00	; 0
     b20:	50 e0       	ldi	r21, 0x00	; 0
     b22:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <__udivmodsi4>
     b26:	6c 83       	std	Y+4, r22	; 0x04
     b28:	7d 83       	std	Y+5, r23	; 0x05
     b2a:	8e 83       	std	Y+6, r24	; 0x06
     b2c:	9f 83       	std	Y+7, r25	; 0x07
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
}
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	08 95       	ret

00000b38 <power_on2>:
     b38:	af 98       	cbi	0x15, 7	; 21
     b3a:	08 95       	ret

00000b3c <HX711_init2>:
}

void HX711_init2()
{
	//DDR setting
	HX711_DDR2 &= ~(1 << HX711_DO_PIN2);
     b3c:	a6 98       	cbi	0x14, 6	; 20
	HX711_DDR2 |= (0x01 << HX711_SCLK_PIN2);
     b3e:	a7 9a       	sbi	0x14, 7	; 20
     b40:	08 95       	ret

00000b42 <rising_edge2>:
}

void rising_edge2()
{
	HX711_PORT2 &= ~(1 << HX711_SCLK_PIN2);
     b42:	af 98       	cbi	0x15, 7	; 21
	HX711_PORT2 |= (1 << HX711_SCLK_PIN2);
     b44:	af 9a       	sbi	0x15, 7	; 21
     b46:	08 95       	ret

00000b48 <falling_edge2>:
}

void falling_edge2()
{
	HX711_PORT2 |= (1 << HX711_SCLK_PIN2);
     b48:	af 9a       	sbi	0x15, 7	; 21
	HX711_PORT2 &= ~(1 << HX711_SCLK_PIN2);
     b4a:	af 98       	cbi	0x15, 7	; 21
     b4c:	08 95       	ret

00000b4e <Load_Cell_Ready2>:
}

uint8_t Load_Cell_Ready2()
{
	power_on2();
     b4e:	f4 df       	rcall	.-24     	; 0xb38 <power_on2>
	if(HX711_PIN2 & (1 << HX711_DO_PIN2)) return 0;
     b50:	83 b3       	in	r24, 0x13	; 19
     b52:	86 fb       	bst	r24, 6
     b54:	88 27       	eor	r24, r24
     b56:	80 f9       	bld	r24, 0
	else return 1;
}
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	89 27       	eor	r24, r25
     b5c:	08 95       	ret

00000b5e <read_load_cell2>:


uint32_t read_load_cell2()
{
     b5e:	cf 92       	push	r12
     b60:	df 92       	push	r13
     b62:	ef 92       	push	r14
     b64:	ff 92       	push	r15
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
	uint32_t temp = 0;
	uint8_t filler = 0x00, at;
	while(!Load_Cell_Ready2());
     b6a:	f1 df       	rcall	.-30     	; 0xb4e <Load_Cell_Ready2>
     b6c:	88 23       	and	r24, r24
     b6e:	e9 f3       	breq	.-6      	; 0xb6a <read_load_cell2+0xc>
     b70:	c7 e1       	ldi	r28, 0x17	; 23
     b72:	d0 e0       	ldi	r29, 0x00	; 0
     b74:	c1 2c       	mov	r12, r1
     b76:	d1 2c       	mov	r13, r1
     b78:	76 01       	movw	r14, r12
	for(int j =23; j > -1; j--)
	{
		rising_edge2();
     b7a:	e3 df       	rcall	.-58     	; 0xb42 <rising_edge2>
     b7c:	83 b3       	in	r24, 0x13	; 19
		at = (HX711_PIN2 & (1 << HX711_DO_PIN2)) == (1 << HX711_DO_PIN2) ? 0x01 : 0x00;
     b7e:	86 fb       	bst	r24, 6
		temp |= ((uint32_t)at << j);
     b80:	88 27       	eor	r24, r24
     b82:	80 f9       	bld	r24, 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	0c 2e       	mov	r0, r28
     b8c:	04 c0       	rjmp	.+8      	; 0xb96 <read_load_cell2+0x38>
     b8e:	88 0f       	add	r24, r24
     b90:	99 1f       	adc	r25, r25
     b92:	aa 1f       	adc	r26, r26
     b94:	bb 1f       	adc	r27, r27
     b96:	0a 94       	dec	r0
     b98:	d2 f7       	brpl	.-12     	; 0xb8e <read_load_cell2+0x30>
     b9a:	c8 2a       	or	r12, r24
     b9c:	d9 2a       	or	r13, r25
     b9e:	ea 2a       	or	r14, r26
     ba0:	fb 2a       	or	r15, r27
     ba2:	21 97       	sbiw	r28, 0x01	; 1
uint32_t read_load_cell2()
{
	uint32_t temp = 0;
	uint8_t filler = 0x00, at;
	while(!Load_Cell_Ready2());
	for(int j =23; j > -1; j--)
     ba4:	50 f7       	brcc	.-44     	; 0xb7a <read_load_cell2+0x1c>
	{
		rising_edge2();
		at = (HX711_PIN2 & (1 << HX711_DO_PIN2)) == (1 << HX711_DO_PIN2) ? 0x01 : 0x00;
		temp |= ((uint32_t)at << j);
	}
	rising_edge2();
     ba6:	cd df       	rcall	.-102    	; 0xb42 <rising_edge2>
     ba8:	cf df       	rcall	.-98     	; 0xb48 <falling_edge2>
	falling_edge2();
     baa:	d7 01       	movw	r26, r14
     bac:	c6 01       	movw	r24, r12
	if(temp & 0x800000) filler = 0xff;
	temp |= ((uint32_t)filler << 24);
     bae:	07 2e       	mov	r0, r23
     bb0:	77 e1       	ldi	r23, 0x17	; 23
     bb2:	b6 95       	lsr	r27
     bb4:	a7 95       	ror	r26
     bb6:	97 95       	ror	r25
     bb8:	87 95       	ror	r24
     bba:	7a 95       	dec	r23
     bbc:	d1 f7       	brne	.-12     	; 0xbb2 <read_load_cell2+0x54>
     bbe:	70 2d       	mov	r23, r0
     bc0:	81 70       	andi	r24, 0x01	; 1
     bc2:	68 2f       	mov	r22, r24
     bc4:	61 95       	neg	r22
     bc6:	86 2f       	mov	r24, r22
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	a0 e0       	ldi	r26, 0x00	; 0
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	b8 2f       	mov	r27, r24
     bd0:	aa 27       	eor	r26, r26
     bd2:	99 27       	eor	r25, r25
     bd4:	88 27       	eor	r24, r24
     bd6:	bc 01       	movw	r22, r24
     bd8:	cd 01       	movw	r24, r26

	return temp;
     bda:	6c 29       	or	r22, r12
     bdc:	7d 29       	or	r23, r13
     bde:	8e 29       	or	r24, r14
     be0:	9f 29       	or	r25, r15
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
}
     be6:	ff 90       	pop	r15
     be8:	ef 90       	pop	r14
     bea:	df 90       	pop	r13
     bec:	cf 90       	pop	r12
     bee:	08 95       	ret

00000bf0 <avg_value2>:
     bf0:	8f 92       	push	r8
     bf2:	9f 92       	push	r9

uint32_t avg_value2(int num)
{
     bf4:	af 92       	push	r10
     bf6:	bf 92       	push	r11
     bf8:	cf 92       	push	r12
     bfa:	df 92       	push	r13
     bfc:	ef 92       	push	r14
     bfe:	ff 92       	push	r15
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
	uint32_t sum =0;
	for(int i =0; i <num; i++)
     c08:	18 16       	cp	r1, r24
     c0a:	19 06       	cpc	r1, r25
     c0c:	c4 f4       	brge	.+48     	; 0xc3e <avg_value2+0x4e>
     c0e:	8c 01       	movw	r16, r24
     c10:	c0 e0       	ldi	r28, 0x00	; 0
     c12:	d0 e0       	ldi	r29, 0x00	; 0
     c14:	c1 2c       	mov	r12, r1
     c16:	d1 2c       	mov	r13, r1
     c18:	76 01       	movw	r14, r12
	{
		sum += (read_load_cell2() / num);
     c1a:	4c 01       	movw	r8, r24
     c1c:	99 0f       	add	r25, r25
     c1e:	aa 08       	sbc	r10, r10
     c20:	bb 08       	sbc	r11, r11
     c22:	9d df       	rcall	.-198    	; 0xb5e <read_load_cell2>
     c24:	a5 01       	movw	r20, r10
     c26:	94 01       	movw	r18, r8
     c28:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <__udivmodsi4>
     c2c:	c2 0e       	add	r12, r18
     c2e:	d3 1e       	adc	r13, r19
     c30:	e4 1e       	adc	r14, r20
     c32:	f5 1e       	adc	r15, r21
}

uint32_t avg_value2(int num)
{
	uint32_t sum =0;
	for(int i =0; i <num; i++)
     c34:	21 96       	adiw	r28, 0x01	; 1
     c36:	0c 17       	cp	r16, r28
     c38:	1d 07       	cpc	r17, r29
     c3a:	99 f7       	brne	.-26     	; 0xc22 <avg_value2+0x32>
     c3c:	03 c0       	rjmp	.+6      	; 0xc44 <avg_value2+0x54>
	return temp;
}

uint32_t avg_value2(int num)
{
	uint32_t sum =0;
     c3e:	c1 2c       	mov	r12, r1
     c40:	d1 2c       	mov	r13, r1
     c42:	76 01       	movw	r14, r12
	for(int i =0; i <num; i++)
	{
		sum += (read_load_cell2() / num);
	}
	return sum;
}
     c44:	c7 01       	movw	r24, r14
     c46:	b6 01       	movw	r22, r12
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	ff 90       	pop	r15
     c52:	ef 90       	pop	r14
     c54:	df 90       	pop	r13
     c56:	cf 90       	pop	r12
     c58:	bf 90       	pop	r11
     c5a:	af 90       	pop	r10
     c5c:	9f 90       	pop	r9
     c5e:	8f 90       	pop	r8
     c60:	08 95       	ret

00000c62 <set_offset2>:

void set_offset2(int _num)
{
	offset2 = avg_value2(_num);
     c62:	c6 df       	rcall	.-116    	; 0xbf0 <avg_value2>
     c64:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <offset2>
     c68:	70 93 77 02 	sts	0x0277, r23	; 0x800277 <offset2+0x1>
     c6c:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <offset2+0x2>
     c70:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <offset2+0x3>
     c74:	08 95       	ret

00000c76 <get_value2>:
}

uint32_t get_value2(int num)
{
     c76:	0f 93       	push	r16
     c78:	1f 93       	push	r17
	uint32_t temp = avg_value2(num) - offset2;
     c7a:	ba df       	rcall	.-140    	; 0xbf0 <avg_value2>
     c7c:	00 91 76 02 	lds	r16, 0x0276	; 0x800276 <offset2>
     c80:	10 91 77 02 	lds	r17, 0x0277	; 0x800277 <offset2+0x1>
     c84:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <offset2+0x2>
     c88:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <offset2+0x3>
     c8c:	60 1b       	sub	r22, r16
     c8e:	71 0b       	sbc	r23, r17
     c90:	82 0b       	sbc	r24, r18
     c92:	93 0b       	sbc	r25, r19
	if(temp>0xffff0000) temp =0;
     c94:	61 30       	cpi	r22, 0x01	; 1
     c96:	71 05       	cpc	r23, r1
     c98:	2f ef       	ldi	r18, 0xFF	; 255
     c9a:	82 07       	cpc	r24, r18
     c9c:	92 07       	cpc	r25, r18
     c9e:	18 f0       	brcs	.+6      	; 0xca6 <get_value2+0x30>
     ca0:	60 e0       	ldi	r22, 0x00	; 0
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	cb 01       	movw	r24, r22
	return temp;
}
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	08 95       	ret

00000cac <calc_value2>:

void calc_value2(int _num, uint32_t weight[2])
{
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	8c 01       	movw	r16, r24
     cb6:	eb 01       	movw	r28, r22
	weight[0] = (double)get_value2(_num) / load_scale2;
     cb8:	de df       	rcall	.-68     	; 0xc76 <get_value2>
     cba:	e9 d6       	rcall	.+3538   	; 0x1a8e <__floatunsisf>
     cbc:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <load_scale2>
     cc0:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <load_scale2+0x1>
     cc4:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <load_scale2+0x2>
     cc8:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <load_scale2+0x3>
     ccc:	4c d6       	rcall	.+3224   	; 0x1966 <__divsf3>
     cce:	b3 d6       	rcall	.+3430   	; 0x1a36 <__fixunssfsi>
     cd0:	68 83       	st	Y, r22
     cd2:	79 83       	std	Y+1, r23	; 0x01
     cd4:	8a 83       	std	Y+2, r24	; 0x02
     cd6:	9b 83       	std	Y+3, r25	; 0x03
	weight[1] = (uint32_t)(((double)get_value2(_num) / load_scale2) *100) %100;
     cd8:	c8 01       	movw	r24, r16
     cda:	cd df       	rcall	.-102    	; 0xc76 <get_value2>
     cdc:	d8 d6       	rcall	.+3504   	; 0x1a8e <__floatunsisf>
     cde:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <load_scale2>
     ce2:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <load_scale2+0x1>
     ce6:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <load_scale2+0x2>
     cea:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <load_scale2+0x3>
     cee:	3b d6       	rcall	.+3190   	; 0x1966 <__divsf3>
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	48 ec       	ldi	r20, 0xC8	; 200
     cf6:	52 e4       	ldi	r21, 0x42	; 66
     cf8:	58 d7       	rcall	.+3760   	; 0x1baa <__mulsf3>
     cfa:	9d d6       	rcall	.+3386   	; 0x1a36 <__fixunssfsi>
     cfc:	24 e6       	ldi	r18, 0x64	; 100
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	40 e0       	ldi	r20, 0x00	; 0
     d02:	50 e0       	ldi	r21, 0x00	; 0
     d04:	b5 d7       	rcall	.+3946   	; 0x1c70 <__udivmodsi4>
     d06:	6c 83       	std	Y+4, r22	; 0x04
     d08:	7d 83       	std	Y+5, r23	; 0x05
     d0a:	8e 83       	std	Y+6, r24	; 0x06
     d0c:	9f 83       	std	Y+7, r25	; 0x07
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
}
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	08 95       	ret

00000d18 <I2C_init>:

//#define START 0x08
//#define SLA_W (0x27<<1)

void I2C_init(unsigned int baud){
	TWBR = baud;
     d18:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     d1c:	08 95       	ret

00000d1e <I2C_start>:
}

void I2C_start(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     d1e:	84 ea       	ldi	r24, 0xA4	; 164
     d20:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));  // 시작 완료 대기
     d24:	e4 e7       	ldi	r30, 0x74	; 116
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	88 23       	and	r24, r24
     d2c:	ec f7       	brge	.-6      	; 0xd28 <I2C_start+0xa>
}
     d2e:	08 95       	ret

00000d30 <I2C_transmit>:

void I2C_transmit(uint8_t data)
{
	TWDR = data;
     d30:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);
     d34:	84 e8       	ldi	r24, 0x84	; 132
     d36:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));
     d3a:	e4 e7       	ldi	r30, 0x74	; 116
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	88 23       	and	r24, r24
     d42:	ec f7       	brge	.-6      	; 0xd3e <I2C_transmit+0xe>
}
     d44:	08 95       	ret

00000d46 <I2C_write_byte>:

void I2C_write_byte(uint8_t address, uint8_t data)
{
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	d8 2f       	mov	r29, r24
     d4c:	c6 2f       	mov	r28, r22
	I2C_start();
     d4e:	e7 df       	rcall	.-50     	; 0xd1e <I2C_start>
	I2C_transmit(address);
     d50:	8d 2f       	mov	r24, r29
     d52:	ee df       	rcall	.-36     	; 0xd30 <I2C_transmit>
	I2C_transmit(data);
     d54:	8c 2f       	mov	r24, r28
     d56:	ec df       	rcall	.-40     	; 0xd30 <I2C_transmit>
     d58:	84 e9       	ldi	r24, 0x94	; 148
	I2C_stop();
}

void I2C_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     d5a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     d5e:	df 91       	pop	r29
{
	I2C_start();
	I2C_transmit(address);
	I2C_transmit(data);
	I2C_stop();
}
     d60:	cf 91       	pop	r28
     d62:	08 95       	ret

00000d64 <I2C_LCD_write_data>:
     d64:	ef 92       	push	r14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d66:	ff 92       	push	r15
     d68:	0f 93       	push	r16
     d6a:	1f 93       	push	r17
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	00 d0       	rcall	.+0      	; 0xd72 <I2C_LCD_write_data+0xe>
     d72:	00 d0       	rcall	.+0      	; 0xd74 <I2C_LCD_write_data+0x10>
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	28 2f       	mov	r18, r24
     d7a:	20 7f       	andi	r18, 0xF0	; 240
     d7c:	30 e1       	ldi	r19, 0x10	; 16
     d7e:	83 9f       	mul	r24, r19
     d80:	c0 01       	movw	r24, r0
     d82:	11 24       	eor	r1, r1
     d84:	92 2f       	mov	r25, r18
     d86:	9d 60       	ori	r25, 0x0D	; 13
     d88:	99 83       	std	Y+1, r25	; 0x01
     d8a:	29 60       	ori	r18, 0x09	; 9
     d8c:	2a 83       	std	Y+2, r18	; 0x02
     d8e:	98 2f       	mov	r25, r24
     d90:	9d 60       	ori	r25, 0x0D	; 13
     d92:	9b 83       	std	Y+3, r25	; 0x03
     d94:	89 60       	ori	r24, 0x09	; 9
     d96:	8c 83       	std	Y+4, r24	; 0x04
     d98:	8e 01       	movw	r16, r28
     d9a:	0f 5f       	subi	r16, 0xFF	; 255
     d9c:	1f 4f       	sbci	r17, 0xFF	; 255
     d9e:	7e 01       	movw	r14, r28
     da0:	85 e0       	ldi	r24, 0x05	; 5
     da2:	e8 0e       	add	r14, r24
     da4:	f1 1c       	adc	r15, r1
     da6:	f8 01       	movw	r30, r16
     da8:	61 91       	ld	r22, Z+
     daa:	8f 01       	movw	r16, r30
     dac:	8e e4       	ldi	r24, 0x4E	; 78
     dae:	cb df       	rcall	.-106    	; 0xd46 <I2C_write_byte>
     db0:	0e 15       	cp	r16, r14
     db2:	1f 05       	cpc	r17, r15
     db4:	c1 f7       	brne	.-16     	; 0xda6 <I2C_LCD_write_data+0x42>
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	08 95       	ret

00000dcc <I2C_LCD_write_command>:
     dcc:	ef 92       	push	r14
     dce:	ff 92       	push	r15
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	00 d0       	rcall	.+0      	; 0xdda <I2C_LCD_write_command+0xe>
     dda:	00 d0       	rcall	.+0      	; 0xddc <I2C_LCD_write_command+0x10>
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
     de0:	28 2f       	mov	r18, r24
     de2:	20 7f       	andi	r18, 0xF0	; 240
     de4:	30 e1       	ldi	r19, 0x10	; 16
     de6:	83 9f       	mul	r24, r19
     de8:	c0 01       	movw	r24, r0
     dea:	11 24       	eor	r1, r1
     dec:	92 2f       	mov	r25, r18
     dee:	9c 60       	ori	r25, 0x0C	; 12
     df0:	99 83       	std	Y+1, r25	; 0x01
     df2:	28 60       	ori	r18, 0x08	; 8
     df4:	2a 83       	std	Y+2, r18	; 0x02
     df6:	98 2f       	mov	r25, r24
     df8:	9c 60       	ori	r25, 0x0C	; 12
     dfa:	9b 83       	std	Y+3, r25	; 0x03
     dfc:	88 60       	ori	r24, 0x08	; 8
     dfe:	8c 83       	std	Y+4, r24	; 0x04
     e00:	8e 01       	movw	r16, r28
     e02:	0f 5f       	subi	r16, 0xFF	; 255
     e04:	1f 4f       	sbci	r17, 0xFF	; 255
     e06:	7e 01       	movw	r14, r28
     e08:	85 e0       	ldi	r24, 0x05	; 5
     e0a:	e8 0e       	add	r14, r24
     e0c:	f1 1c       	adc	r15, r1
     e0e:	f8 01       	movw	r30, r16
     e10:	61 91       	ld	r22, Z+
     e12:	8f 01       	movw	r16, r30
     e14:	8e e4       	ldi	r24, 0x4E	; 78
     e16:	97 df       	rcall	.-210    	; 0xd46 <I2C_write_byte>
     e18:	0e 15       	cp	r16, r14
     e1a:	1f 05       	cpc	r17, r15
     e1c:	c1 f7       	brne	.-16     	; 0xe0e <I2C_LCD_write_command+0x42>
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	1f 91       	pop	r17
     e2c:	0f 91       	pop	r16
     e2e:	ff 90       	pop	r15
     e30:	ef 90       	pop	r14
     e32:	08 95       	ret

00000e34 <I2C_LCD_init>:
	_delay_ms(2);
}

void I2C_LCD_init(void)
{
	I2C_init(10000);
     e34:	80 e1       	ldi	r24, 0x10	; 16
     e36:	97 e2       	ldi	r25, 0x27	; 39
     e38:	6f df       	rcall	.-290    	; 0xd18 <I2C_init>
     e3a:	2f ef       	ldi	r18, 0xFF	; 255
     e3c:	80 e7       	ldi	r24, 0x70	; 112
     e3e:	92 e0       	ldi	r25, 0x02	; 2
     e40:	21 50       	subi	r18, 0x01	; 1
     e42:	80 40       	sbci	r24, 0x00	; 0
     e44:	90 40       	sbci	r25, 0x00	; 0
     e46:	e1 f7       	brne	.-8      	; 0xe40 <I2C_LCD_init+0xc>
     e48:	00 c0       	rjmp	.+0      	; 0xe4a <I2C_LCD_init+0x16>
     e4a:	00 00       	nop
	_delay_ms(50);
	//Initialization of HD44780-based LCD (4-bit HW)
	I2C_LCD_write_command(0x33);
     e4c:	83 e3       	ldi	r24, 0x33	; 51
     e4e:	be df       	rcall	.-132    	; 0xdcc <I2C_LCD_write_command>
	I2C_LCD_write_command(0x32);
     e50:	82 e3       	ldi	r24, 0x32	; 50
     e52:	bc df       	rcall	.-136    	; 0xdcc <I2C_LCD_write_command>
	I2C_LCD_write_command(0x28);   //Function Set 4-bit mode
     e54:	88 e2       	ldi	r24, 0x28	; 40
     e56:	ba df       	rcall	.-140    	; 0xdcc <I2C_LCD_write_command>
	I2C_LCD_write_command(0x0c);   //Display On/Off Control
     e58:	8c e0       	ldi	r24, 0x0C	; 12
     e5a:	b8 df       	rcall	.-144    	; 0xdcc <I2C_LCD_write_command>
	I2C_LCD_write_command(0x06);   //Entry mode set
     e5c:	86 e0       	ldi	r24, 0x06	; 6
     e5e:	b6 df       	rcall	.-148    	; 0xdcc <I2C_LCD_write_command>
     e60:	81 e0       	ldi	r24, 0x01	; 1
	I2C_LCD_write_command(0x01);   //Clear Display
     e62:	b4 df       	rcall	.-152    	; 0xdcc <I2C_LCD_write_command>
     e64:	8f e3       	ldi	r24, 0x3F	; 63
     e66:	9c e9       	ldi	r25, 0x9C	; 156
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	f1 f7       	brne	.-4      	; 0xe68 <I2C_LCD_init+0x34>
     e6c:	00 c0       	rjmp	.+0      	; 0xe6e <I2C_LCD_init+0x3a>
     e6e:	00 00       	nop
     e70:	08 95       	ret

00000e72 <I2C_LCD_write_string>:
     e72:	0f 93       	push	r16
     e74:	1f 93       	push	r17
	_delay_ms(10);
	
}

void I2C_LCD_write_string(char *string)
{
     e76:	cf 93       	push	r28
     e78:	fc 01       	movw	r30, r24
	uint8_t i;
	for(i=0; string[i]; i++)
     e7a:	80 81       	ld	r24, Z
     e7c:	88 23       	and	r24, r24
     e7e:	51 f0       	breq	.+20     	; 0xe94 <I2C_LCD_write_string+0x22>
     e80:	8f 01       	movw	r16, r30
     e82:	c0 e0       	ldi	r28, 0x00	; 0
	I2C_LCD_write_data(string[i]);
     e84:	6f df       	rcall	.-290    	; 0xd64 <I2C_LCD_write_data>
}

void I2C_LCD_write_string(char *string)
{
	uint8_t i;
	for(i=0; string[i]; i++)
     e86:	cf 5f       	subi	r28, 0xFF	; 255
     e88:	f8 01       	movw	r30, r16
     e8a:	ec 0f       	add	r30, r28
     e8c:	f1 1d       	adc	r31, r1
     e8e:	80 81       	ld	r24, Z
     e90:	81 11       	cpse	r24, r1
     e92:	f8 cf       	rjmp	.-16     	; 0xe84 <I2C_LCD_write_string+0x12>
	I2C_LCD_write_data(string[i]);
}
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	08 95       	ret

00000e9c <I2C_LCD_goto_XY>:
	row %= 2;
	
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;
	
	I2C_LCD_write_command(command);
     e9c:	81 70       	andi	r24, 0x01	; 1
     e9e:	6f 70       	andi	r22, 0x0F	; 15
     ea0:	90 e4       	ldi	r25, 0x40	; 64
     ea2:	89 9f       	mul	r24, r25
     ea4:	60 0d       	add	r22, r0
     ea6:	11 24       	eor	r1, r1
     ea8:	86 2f       	mov	r24, r22
     eaa:	80 58       	subi	r24, 0x80	; 128
     eac:	8f cf       	rjmp	.-226    	; 0xdcc <I2C_LCD_write_command>
     eae:	08 95       	ret

00000eb0 <I2C_LCD_write_string_XY>:
}

void I2C_LCD_write_string_XY(uint8_t row, uint8_t col, char *string)
{
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	ea 01       	movw	r28, r20
	I2C_LCD_goto_XY(row, col);
     eb6:	f2 df       	rcall	.-28     	; 0xe9c <I2C_LCD_goto_XY>
	I2C_LCD_write_string(string);
     eb8:	ce 01       	movw	r24, r28
     eba:	db df       	rcall	.-74     	; 0xe72 <I2C_LCD_write_string>
}
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	08 95       	ret

00000ec2 <lcd_off>:

void lcd_off()
{
	PORTA &= ~(1);
     ec2:	d8 98       	cbi	0x1b, 0	; 27
	lcd_Flag = 0;
     ec4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <lcd_Flag>
     ec8:	08 95       	ret

00000eca <lcd_on>:
}

void lcd_on()
{
	PORTA |= 1;
     eca:	d8 9a       	sbi	0x1b, 0	; 27
	I2C_LCD_init();
     ecc:	b3 df       	rcall	.-154    	; 0xe34 <I2C_LCD_init>
	lcd_Flag = 1;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <lcd_Flag>
     ed4:	08 95       	ret

00000ed6 <isLcd_Flag>:
}

uint8_t isLcd_Flag()
{
	return lcd_Flag;
     ed6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lcd_Flag>
     eda:	08 95       	ret

00000edc <__vector_15>:

enum {Waiting, Running} Main_State;
enum {ready, aroll, shake, measure, broll} Run_State;
	
ISR(TIMER0_COMP_vect)
{
     edc:	1f 92       	push	r1
     ede:	0f 92       	push	r0
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	0f 92       	push	r0
     ee4:	11 24       	eor	r1, r1
     ee6:	0b b6       	in	r0, 0x3b	; 59
     ee8:	0f 92       	push	r0
     eea:	2f 93       	push	r18
     eec:	3f 93       	push	r19
     eee:	4f 93       	push	r20
     ef0:	5f 93       	push	r21
     ef2:	6f 93       	push	r22
     ef4:	7f 93       	push	r23
     ef6:	8f 93       	push	r24
     ef8:	9f 93       	push	r25
     efa:	af 93       	push	r26
     efc:	bf 93       	push	r27
     efe:	ef 93       	push	r30
     f00:	ff 93       	push	r31
	incMilliSec();
     f02:	7f d4       	rcall	.+2302   	; 0x1802 <incMilliSec>
	incTime();
     f04:	9b d4       	rcall	.+2358   	; 0x183c <incTime>
     f06:	ff 91       	pop	r31
}
     f08:	ef 91       	pop	r30
     f0a:	bf 91       	pop	r27
     f0c:	af 91       	pop	r26
     f0e:	9f 91       	pop	r25
     f10:	8f 91       	pop	r24
     f12:	7f 91       	pop	r23
     f14:	6f 91       	pop	r22
     f16:	5f 91       	pop	r21
     f18:	4f 91       	pop	r20
     f1a:	3f 91       	pop	r19
     f1c:	2f 91       	pop	r18
     f1e:	0f 90       	pop	r0
     f20:	0b be       	out	0x3b, r0	; 59
     f22:	0f 90       	pop	r0
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	0f 90       	pop	r0
     f28:	1f 90       	pop	r1
     f2a:	18 95       	reti

00000f2c <__vector_30>:
     f2c:	1f 92       	push	r1

ISR(USART1_RX_vect)
{
     f2e:	0f 92       	push	r0
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	0f 92       	push	r0
     f34:	11 24       	eor	r1, r1
     f36:	0b b6       	in	r0, 0x3b	; 59
     f38:	0f 92       	push	r0
     f3a:	2f 93       	push	r18
     f3c:	3f 93       	push	r19
     f3e:	4f 93       	push	r20
     f40:	5f 93       	push	r21
     f42:	6f 93       	push	r22
     f44:	7f 93       	push	r23
     f46:	8f 93       	push	r24
     f48:	9f 93       	push	r25
     f4a:	af 93       	push	r26
     f4c:	bf 93       	push	r27
     f4e:	ef 93       	push	r30
     f50:	ff 93       	push	r31
	BT_ISR_Receive();
     f52:	ea d8       	rcall	.-3628   	; 0x128 <BT_ISR_Receive>
}
     f54:	ff 91       	pop	r31
     f56:	ef 91       	pop	r30
     f58:	bf 91       	pop	r27
     f5a:	af 91       	pop	r26
     f5c:	9f 91       	pop	r25
     f5e:	8f 91       	pop	r24
     f60:	7f 91       	pop	r23
     f62:	6f 91       	pop	r22
     f64:	5f 91       	pop	r21
     f66:	4f 91       	pop	r20
     f68:	3f 91       	pop	r19
     f6a:	2f 91       	pop	r18
     f6c:	0f 90       	pop	r0
     f6e:	0b be       	out	0x3b, r0	; 59
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	0f 90       	pop	r0
     f76:	1f 90       	pop	r1
     f78:	18 95       	reti

00000f7a <__vector_7>:

ISR(INT6_vect)
{
     f7a:	1f 92       	push	r1
     f7c:	0f 92       	push	r0
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	0f 92       	push	r0
     f82:	11 24       	eor	r1, r1
     f84:	0b b6       	in	r0, 0x3b	; 59
     f86:	0f 92       	push	r0
     f88:	2f 93       	push	r18
     f8a:	3f 93       	push	r19
     f8c:	4f 93       	push	r20
     f8e:	5f 93       	push	r21
     f90:	6f 93       	push	r22
     f92:	7f 93       	push	r23
     f94:	8f 93       	push	r24
     f96:	9f 93       	push	r25
     f98:	af 93       	push	r26
     f9a:	bf 93       	push	r27
     f9c:	ef 93       	push	r30
     f9e:	ff 93       	push	r31
	ISR_Toggle_A();
     fa0:	76 dc       	rcall	.-1812   	; 0x88e <ISR_Toggle_A>
}
     fa2:	ff 91       	pop	r31
     fa4:	ef 91       	pop	r30
     fa6:	bf 91       	pop	r27
     fa8:	af 91       	pop	r26
     faa:	9f 91       	pop	r25
     fac:	8f 91       	pop	r24
     fae:	7f 91       	pop	r23
     fb0:	6f 91       	pop	r22
     fb2:	5f 91       	pop	r21
     fb4:	4f 91       	pop	r20
     fb6:	3f 91       	pop	r19
     fb8:	2f 91       	pop	r18
     fba:	0f 90       	pop	r0
     fbc:	0b be       	out	0x3b, r0	; 59
     fbe:	0f 90       	pop	r0
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	0f 90       	pop	r0
     fc4:	1f 90       	pop	r1
     fc6:	18 95       	reti

00000fc8 <__vector_8>:

ISR(INT7_vect)
{
     fc8:	1f 92       	push	r1
     fca:	0f 92       	push	r0
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	0f 92       	push	r0
     fd0:	11 24       	eor	r1, r1
     fd2:	0b b6       	in	r0, 0x3b	; 59
     fd4:	0f 92       	push	r0
     fd6:	2f 93       	push	r18
     fd8:	3f 93       	push	r19
     fda:	4f 93       	push	r20
     fdc:	5f 93       	push	r21
     fde:	6f 93       	push	r22
     fe0:	7f 93       	push	r23
     fe2:	8f 93       	push	r24
     fe4:	9f 93       	push	r25
     fe6:	af 93       	push	r26
     fe8:	bf 93       	push	r27
     fea:	ef 93       	push	r30
     fec:	ff 93       	push	r31
	ISR_Toggle_B();
     fee:	79 dc       	rcall	.-1806   	; 0x8e2 <ISR_Toggle_B>
}
     ff0:	ff 91       	pop	r31
     ff2:	ef 91       	pop	r30
     ff4:	bf 91       	pop	r27
     ff6:	af 91       	pop	r26
     ff8:	9f 91       	pop	r25
     ffa:	8f 91       	pop	r24
     ffc:	7f 91       	pop	r23
     ffe:	6f 91       	pop	r22
    1000:	5f 91       	pop	r21
    1002:	4f 91       	pop	r20
    1004:	3f 91       	pop	r19
    1006:	2f 91       	pop	r18
    1008:	0f 90       	pop	r0
    100a:	0b be       	out	0x3b, r0	; 59
    100c:	0f 90       	pop	r0
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	0f 90       	pop	r0
    1012:	1f 90       	pop	r1
    1014:	18 95       	reti

00001016 <main>:

int main(void)
{
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	cd 57       	subi	r28, 0x7D	; 125
    1020:	d1 09       	sbc	r29, r1
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
	uint32_t checker = 0, lcd_time=0, dht_time = 0, load_time = 0, weight1[2], weight2[2], total_gram, First_weight = 0, servo_time,
	Lost_weight = 0, total;
	uint8_t dht_flag = 0, start_Flag =0, servo_Flag = 0, dry_per = 0, night_Flag, auto_Flag = 1, shake_times = 0, humi[2], temper[2], ex1[2], ex2[2], *BT_buff, *cmd_buff;
	float external_humid, cloth_humid, current_temper, First_humid =0;
	
    sei();
    102c:	78 94       	sei
	
	DDRA |= (1 << 0);	// lcd 전원
    102e:	d0 9a       	sbi	0x1a, 0	; 26
	lcd_on();
    1030:	4c df       	rcall	.-360    	; 0xeca <lcd_on>
	BT_Init();
    1032:	53 d8       	rcall	.-3930   	; 0xda <BT_Init>
	DCmotorInit();
    1034:	40 d9       	rcall	.-3456   	; 0x2b6 <DCmotorInit>
	ADC_Init();
    1036:	49 d8       	rcall	.-3950   	; 0xca <ADC_Init>
	buzzerInit();
    1038:	f5 d8       	rcall	.-3606   	; 0x224 <buzzerInit>
	timer0init();
    103a:	d7 d3       	rcall	.+1966   	; 0x17ea <timer0init>
    103c:	ac d3       	rcall	.+1880   	; 0x1796 <servoInit>
	servoInit();
    103e:	8e dc       	rcall	.-1764   	; 0x95c <HX711_init>
	HX711_init();
    1040:	7d dd       	rcall	.-1286   	; 0xb3c <HX711_init2>
    1042:	1b dc       	rcall	.-1994   	; 0x87a <HallSensor_Init>
	HX711_init2();
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
	HallSensor_Init();
    1048:	9b d8       	rcall	.-3786   	; 0x180 <Button_Init>
    104a:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <Main_State>
	Button_Init(start_stop_button);
    104e:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <Run_State>
    1052:	8b e0       	ldi	r24, 0x0B	; 11
	
	Main_State = Waiting;
    1054:	e9 e0       	ldi	r30, 0x09	; 9
    1056:	f1 e0       	ldi	r31, 0x01	; 1
	Run_State = ready;
    1058:	de 01       	movw	r26, r28
    105a:	11 96       	adiw	r26, 0x01	; 1
	
	sprintf(lcd1, "initialize");
    105c:	01 90       	ld	r0, Z+
    105e:	0d 92       	st	X+, r0
    1060:	8a 95       	dec	r24
    1062:	e1 f7       	brne	.-8      	; 0x105c <main+0x46>
    1064:	86 e0       	ldi	r24, 0x06	; 6
    1066:	e4 e1       	ldi	r30, 0x14	; 20
    1068:	f1 e0       	ldi	r31, 0x01	; 1
    106a:	de 01       	movw	r26, r28
    106c:	53 96       	adiw	r26, 0x13	; 19
	sprintf(lcd2, ".....");
    106e:	01 90       	ld	r0, Z+
    1070:	0d 92       	st	X+, r0
    1072:	8a 95       	dec	r24
    1074:	e1 f7       	brne	.-8      	; 0x106e <main+0x58>
    1076:	ae 01       	movw	r20, r28
    1078:	4f 5f       	subi	r20, 0xFF	; 255
    107a:	5f 4f       	sbci	r21, 0xFF	; 255
    107c:	60 e0       	ldi	r22, 0x00	; 0
	I2C_LCD_write_string_XY(0, 0, lcd1);
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	17 df       	rcall	.-466    	; 0xeb0 <I2C_LCD_write_string_XY>
    1082:	ae 01       	movw	r20, r28
    1084:	4d 5e       	subi	r20, 0xED	; 237
    1086:	5f 4f       	sbci	r21, 0xFF	; 255
	I2C_LCD_write_string_XY(1, 0, lcd2);
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	11 df       	rcall	.-478    	; 0xeb0 <I2C_LCD_write_string_XY>
    108e:	84 e1       	ldi	r24, 0x14	; 20
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	f5 dc       	rcall	.-1558   	; 0xa7e <set_offset>
	
	set_offset(20);
    1094:	84 e1       	ldi	r24, 0x14	; 20
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	e4 dd       	rcall	.-1080   	; 0xc62 <set_offset2>
    109a:	d0 d8       	rcall	.-3680   	; 0x23c <start_sound>
	set_offset2(20);
    109c:	21 2c       	mov	r2, r1
    109e:	ee 96       	adiw	r28, 0x3e	; 62
    10a0:	1f ae       	std	Y+63, r1	; 0x3f
    10a2:	ee 97       	sbiw	r28, 0x3e	; 62
	BT_buff = Rxbuff;
	cmd_buff = Txbuff;
	start_sound();
    10a4:	31 2c       	mov	r3, r1
    10a6:	e5 96       	adiw	r28, 0x35	; 53
int main(void)
{
	char lcd1[18], lcd2[18], Rxbuff[50], Txbuff[10];
	uint32_t checker = 0, lcd_time=0, dht_time = 0, load_time = 0, weight1[2], weight2[2], total_gram, First_weight = 0, servo_time,
	Lost_weight = 0, total;
	uint8_t dht_flag = 0, start_Flag =0, servo_Flag = 0, dry_per = 0, night_Flag, auto_Flag = 1, shake_times = 0, humi[2], temper[2], ex1[2], ex2[2], *BT_buff, *cmd_buff;
    10a8:	1c ae       	std	Y+60, r1	; 0x3c
    10aa:	1d ae       	std	Y+61, r1	; 0x3d
    10ac:	1e ae       	std	Y+62, r1	; 0x3e
    10ae:	1f ae       	std	Y+63, r1	; 0x3f
    10b0:	e5 97       	sbiw	r28, 0x35	; 53

int main(void)
{
	char lcd1[18], lcd2[18], Rxbuff[50], Txbuff[10];
	uint32_t checker = 0, lcd_time=0, dht_time = 0, load_time = 0, weight1[2], weight2[2], total_gram, First_weight = 0, servo_time,
	Lost_weight = 0, total;
    10b2:	ed 96       	adiw	r28, 0x3d	; 61
    10b4:	1c ae       	std	Y+60, r1	; 0x3c
    10b6:	1d ae       	std	Y+61, r1	; 0x3d
    10b8:	1e ae       	std	Y+62, r1	; 0x3e
    10ba:	1f ae       	std	Y+63, r1	; 0x3f
    10bc:	ed 97       	sbiw	r28, 0x3d	; 61
}

int main(void)
{
	char lcd1[18], lcd2[18], Rxbuff[50], Txbuff[10];
	uint32_t checker = 0, lcd_time=0, dht_time = 0, load_time = 0, weight1[2], weight2[2], total_gram, First_weight = 0, servo_time,
    10be:	81 2c       	mov	r8, r1
    10c0:	91 2c       	mov	r9, r1
    10c2:	54 01       	movw	r10, r8
    10c4:	9e 01       	movw	r18, r28
    10c6:	2d 5e       	subi	r18, 0xED	; 237
    10c8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ca:	e1 96       	adiw	r28, 0x31	; 49
    10cc:	3f af       	std	Y+63, r19	; 0x3f
				case shake:
					DDRB |= (1 << 5);
					if(checker - servo_time >800) servo_Flag ^= 1;
					// 흔들기
					sprintf(lcd1, "%d.%d%c   %d.%dC   ", ex1[0], ex1[1], '%' ,ex2[0], ex2[1]);
					sprintf(lcd2, "%ld mL dried  ", Lost_weight);
    10ce:	2e af       	std	Y+62, r18	; 0x3e
    10d0:	e1 97       	sbiw	r28, 0x31	; 49
    10d2:	8e 01       	movw	r16, r28
    10d4:	0b 5d       	subi	r16, 0xDB	; 219
    10d6:	1f 4f       	sbci	r17, 0xFF	; 255
					if(night_Flag == 0) 
					{
						sprintf(BT_buff,"%d \n", shake_times);
    10d8:	a8 d3       	rcall	.+1872   	; 0x182a <millis>
    10da:	2b 01       	movw	r4, r22
	BT_buff = Rxbuff;
	cmd_buff = Txbuff;
	start_sound();
    while (1) 
    {
		checker = millis();
    10dc:	3c 01       	movw	r6, r24
    10de:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <Main_State>
    10e2:	81 11       	cpse	r24, r1
		if(Main_State == Waiting)
    10e4:	51 c0       	rjmp	.+162    	; 0x1188 <__stack+0x89>
    10e6:	14 d9       	rcall	.-3544   	; 0x310 <Blower_Fan>
    10e8:	ec de       	rcall	.-552    	; 0xec2 <lcd_off>
		{
			Blower_Fan(0);
    10ea:	bd 98       	cbi	0x17, 5	; 23
    10ec:	be 01       	movw	r22, r28
			lcd_off();
    10ee:	69 5a       	subi	r22, 0xA9	; 169
    10f0:	7f 4f       	sbci	r23, 0xFF	; 255
			DDRB &= ~(1 << 5);
    10f2:	85 e0       	ldi	r24, 0x05	; 5
			if(checker - load_time > 10000);
			{
				calc_value(5, weight1);
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	e8 dc       	rcall	.-1584   	; 0xac8 <calc_value>
    10f8:	be 01       	movw	r22, r28
    10fa:	61 5a       	subi	r22, 0xA1	; 161
    10fc:	7f 4f       	sbci	r23, 0xFF	; 255
    10fe:	85 e0       	ldi	r24, 0x05	; 5
    1100:	90 e0       	ldi	r25, 0x00	; 0
				calc_value2(5, weight2);
    1102:	d4 dd       	rcall	.-1112   	; 0xcac <calc_value2>
    1104:	6b 96       	adiw	r28, 0x1b	; 27
    1106:	cc ac       	ldd	r12, Y+60	; 0x3c
    1108:	dd ac       	ldd	r13, Y+61	; 0x3d
    110a:	ee ac       	ldd	r14, Y+62	; 0x3e
    110c:	ff ac       	ldd	r15, Y+63	; 0x3f
    110e:	6b 97       	sbiw	r28, 0x1b	; 27
				total_gram = weight1[0] + weight2[0];
    1110:	a3 96       	adiw	r28, 0x23	; 35
    1112:	8c ad       	ldd	r24, Y+60	; 0x3c
    1114:	9d ad       	ldd	r25, Y+61	; 0x3d
    1116:	ae ad       	ldd	r26, Y+62	; 0x3e
    1118:	bf ad       	ldd	r27, Y+63	; 0x3f
    111a:	a3 97       	sbiw	r28, 0x23	; 35
    111c:	c8 0e       	add	r12, r24
    111e:	d9 1e       	adc	r13, r25
    1120:	ea 1e       	adc	r14, r26
    1122:	fb 1e       	adc	r15, r27
    1124:	3b e0       	ldi	r19, 0x0B	; 11
    1126:	c3 16       	cp	r12, r19
    1128:	d1 04       	cpc	r13, r1
    112a:	e1 04       	cpc	r14, r1
    112c:	f1 04       	cpc	r15, r1
				if((total_gram > 10) && (start_Flag == 0))
    112e:	38 f0       	brcs	.+14     	; 0x113e <__stack+0x3f>
    1130:	31 10       	cpse	r3, r1
    1132:	05 c0       	rjmp	.+10     	; 0x113e <__stack+0x3f>
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <Main_State>
				{
					Main_State = Running;
    113a:	c7 de       	rcall	.-626    	; 0xeca <lcd_on>
    113c:	10 c0       	rjmp	.+32     	; 0x115e <__stack+0x5f>
    113e:	43 e3       	ldi	r20, 0x33	; 51
					lcd_on();
    1140:	c4 16       	cp	r12, r20
    1142:	d1 04       	cpc	r13, r1
    1144:	e1 04       	cpc	r14, r1
				}
				else if((total_gram <= 50) && (start_Flag ==1) )
    1146:	f1 04       	cpc	r15, r1
    1148:	50 f4       	brcc	.+20     	; 0x115e <__stack+0x5f>
    114a:	51 e0       	ldi	r21, 0x01	; 1
    114c:	35 12       	cpse	r3, r21
    114e:	07 c0       	rjmp	.+14     	; 0x115e <__stack+0x5f>
    1150:	84 e1       	ldi	r24, 0x14	; 20
    1152:	90 e0       	ldi	r25, 0x00	; 0
				{
					set_offset(20);
    1154:	94 dc       	rcall	.-1752   	; 0xa7e <set_offset>
    1156:	84 e1       	ldi	r24, 0x14	; 20
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	83 dd       	rcall	.-1274   	; 0xc62 <set_offset2>
					set_offset2(20);
    115c:	31 2c       	mov	r3, r1
    115e:	ff 92       	push	r15
    1160:	ef 92       	push	r14
    1162:	df 92       	push	r13
					start_Flag = 0;
    1164:	cf 92       	push	r12
				}
				sprintf(BT_buff, "%ldg, start \n", total_gram);
    1166:	8a e1       	ldi	r24, 0x1A	; 26
    1168:	91 e0       	ldi	r25, 0x01	; 1
    116a:	9f 93       	push	r25
    116c:	8f 93       	push	r24
    116e:	1f 93       	push	r17
    1170:	0f 93       	push	r16
    1172:	af d5       	rcall	.+2910   	; 0x1cd2 <sprintf>
    1174:	c8 01       	movw	r24, r16
    1176:	0e 94 7e 00 	call	0xfc	; 0xfc <BT_printf_string>
    117a:	57 d3       	rcall	.+1710   	; 0x182a <millis>
    117c:	0f b6       	in	r0, 0x3f	; 63
				BT_printf_string(BT_buff);
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
				load_time = millis();
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	bd c2       	rjmp	.+1402   	; 0x1702 <__stack+0x603>
    1188:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <Run_State>
    118c:	82 30       	cpi	r24, 0x02	; 2
    118e:	09 f4       	brne	.+2      	; 0x1192 <__stack+0x93>
    1190:	ae c0       	rjmp	.+348    	; 0x12ee <__stack+0x1ef>
			}
		}
		
		else
		{
			switch(Run_State)
    1192:	30 f4       	brcc	.+12     	; 0x11a0 <__stack+0xa1>
    1194:	88 23       	and	r24, r24
    1196:	59 f0       	breq	.+22     	; 0x11ae <__stack+0xaf>
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	09 f4       	brne	.+2      	; 0x119e <__stack+0x9f>
    119c:	83 c0       	rjmp	.+262    	; 0x12a4 <__stack+0x1a5>
    119e:	8b c2       	rjmp	.+1302   	; 0x16b6 <__stack+0x5b7>
    11a0:	83 30       	cpi	r24, 0x03	; 3
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <__stack+0xa7>
    11a4:	44 c1       	rjmp	.+648    	; 0x142e <__stack+0x32f>
    11a6:	84 30       	cpi	r24, 0x04	; 4
    11a8:	09 f4       	brne	.+2      	; 0x11ac <__stack+0xad>
    11aa:	52 c2       	rjmp	.+1188   	; 0x1650 <__stack+0x551>
    11ac:	84 c2       	rjmp	.+1288   	; 0x16b6 <__stack+0x5b7>
    11ae:	be 01       	movw	r22, r28
    11b0:	69 5a       	subi	r22, 0xA9	; 169
    11b2:	7f 4f       	sbci	r23, 0xFF	; 255
    11b4:	85 e0       	ldi	r24, 0x05	; 5
			{
				case ready:
					if(checker - load_time > 3000);
					{
						calc_value(5, weight1);
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	87 dc       	rcall	.-1778   	; 0xac8 <calc_value>
    11ba:	be 01       	movw	r22, r28
    11bc:	61 5a       	subi	r22, 0xA1	; 161
    11be:	7f 4f       	sbci	r23, 0xFF	; 255
    11c0:	85 e0       	ldi	r24, 0x05	; 5
    11c2:	90 e0       	ldi	r25, 0x00	; 0
						calc_value2(5, weight2);
    11c4:	73 dd       	rcall	.-1306   	; 0xcac <calc_value2>
    11c6:	6b 96       	adiw	r28, 0x1b	; 27
    11c8:	cc ac       	ldd	r12, Y+60	; 0x3c
    11ca:	dd ac       	ldd	r13, Y+61	; 0x3d
    11cc:	ee ac       	ldd	r14, Y+62	; 0x3e
    11ce:	ff ac       	ldd	r15, Y+63	; 0x3f
    11d0:	6b 97       	sbiw	r28, 0x1b	; 27
						total_gram = weight1[0] + weight2[0];
    11d2:	a3 96       	adiw	r28, 0x23	; 35
    11d4:	8c ad       	ldd	r24, Y+60	; 0x3c
    11d6:	9d ad       	ldd	r25, Y+61	; 0x3d
    11d8:	ae ad       	ldd	r26, Y+62	; 0x3e
    11da:	bf ad       	ldd	r27, Y+63	; 0x3f
    11dc:	a3 97       	sbiw	r28, 0x23	; 35
    11de:	c8 0e       	add	r12, r24
    11e0:	d9 1e       	adc	r13, r25
    11e2:	ea 1e       	adc	r14, r26
    11e4:	fb 1e       	adc	r15, r27
    11e6:	ff 92       	push	r15
    11e8:	ef 92       	push	r14
    11ea:	df 92       	push	r13
    11ec:	cf 92       	push	r12
    11ee:	88 e2       	ldi	r24, 0x28	; 40
						First_weight = total_gram;
						sprintf(lcd1, " %u g Hanging ", total_gram);
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	9f 93       	push	r25
    11f4:	8f 93       	push	r24
    11f6:	a1 e0       	ldi	r26, 0x01	; 1
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	ac 0f       	add	r26, r28
    11fc:	bd 1f       	adc	r27, r29
    11fe:	bf 93       	push	r27
    1200:	af 93       	push	r26
    1202:	67 d5       	rcall	.+2766   	; 0x1cd2 <sprintf>
    1204:	80 e1       	ldi	r24, 0x10	; 16
    1206:	e7 e3       	ldi	r30, 0x37	; 55
    1208:	f1 e0       	ldi	r31, 0x01	; 1
    120a:	de 01       	movw	r26, r28
						sprintf(lcd2, " Press start   ");
    120c:	53 96       	adiw	r26, 0x13	; 19
    120e:	01 90       	ld	r0, Z+
    1210:	0d 92       	st	X+, r0
    1212:	8a 95       	dec	r24
    1214:	e1 f7       	brne	.-8      	; 0x120e <__stack+0x10f>
    1216:	22 e0       	ldi	r18, 0x02	; 2
    1218:	40 e0       	ldi	r20, 0x00	; 0
    121a:	be 01       	movw	r22, r28
    121c:	67 59       	subi	r22, 0x97	; 151
						get_DHT_data(humi,temper, 0, 2);
    121e:	7f 4f       	sbci	r23, 0xFF	; 255
    1220:	ce 01       	movw	r24, r28
    1222:	89 59       	subi	r24, 0x99	; 153
    1224:	9f 4f       	sbci	r25, 0xFF	; 255
    1226:	1c da       	rcall	.-3016   	; 0x660 <get_DHT_data>
    1228:	00 d3       	rcall	.+1536   	; 0x182a <millis>
    122a:	1f 92       	push	r1
    122c:	85 e2       	ldi	r24, 0x25	; 37
    122e:	8f 93       	push	r24
						First_humid = humi[0] + (float)humi[1]/10;
						load_time = millis();
    1230:	a9 96       	adiw	r28, 0x29	; 41
    1232:	8f ad       	ldd	r24, Y+63	; 0x3f
						sprintf(BT_buff, "First_humid = %d.%d%c\n", humi[0], humi[1], '%');
    1234:	a9 97       	sbiw	r28, 0x29	; 41
    1236:	1f 92       	push	r1
    1238:	8f 93       	push	r24
    123a:	a8 96       	adiw	r28, 0x28	; 40
    123c:	8f ad       	ldd	r24, Y+63	; 0x3f
    123e:	a8 97       	sbiw	r28, 0x28	; 40
    1240:	1f 92       	push	r1
    1242:	8f 93       	push	r24
    1244:	87 e4       	ldi	r24, 0x47	; 71
    1246:	91 e0       	ldi	r25, 0x01	; 1
    1248:	9f 93       	push	r25
    124a:	8f 93       	push	r24
    124c:	1f 93       	push	r17
    124e:	0f 93       	push	r16
    1250:	40 d5       	rcall	.+2688   	; 0x1cd2 <sprintf>
    1252:	c8 01       	movw	r24, r16
    1254:	0e 94 7e 00 	call	0xfc	; 0xfc <BT_printf_string>
    1258:	ff 92       	push	r15
    125a:	ef 92       	push	r14
						BT_printf_string(BT_buff);
    125c:	df 92       	push	r13
    125e:	cf 92       	push	r12
    1260:	8e e5       	ldi	r24, 0x5E	; 94
						sprintf(BT_buff, "Total_gram = %d\n", total_gram);
    1262:	91 e0       	ldi	r25, 0x01	; 1
    1264:	9f 93       	push	r25
    1266:	8f 93       	push	r24
    1268:	1f 93       	push	r17
    126a:	0f 93       	push	r16
    126c:	32 d5       	rcall	.+2660   	; 0x1cd2 <sprintf>
    126e:	c8 01       	movw	r24, r16
    1270:	0e 94 7e 00 	call	0xfc	; 0xfc <BT_printf_string>
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
						BT_printf_string(BT_buff);
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
						//실험
					}
					if(start_Flag)
    127e:	33 20       	and	r3, r3
    1280:	09 f4       	brne	.+2      	; 0x1284 <__stack+0x185>
    1282:	03 c2       	rjmp	.+1030   	; 0x168a <__stack+0x58b>
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <Run_State>
    128a:	60 e0       	ldi	r22, 0x00	; 0
    128c:	70 e0       	ldi	r23, 0x00	; 0
					{
						Run_State = aroll;
    128e:	cb 01       	movw	r24, r22
    1290:	5a db       	rcall	.-2380   	; 0x946 <set_rotation>
    1292:	0e 94 42 01 	call	0x284	; 0x284 <ready_sound>
						set_rotation(0);
    1296:	ed 96       	adiw	r28, 0x3d	; 61
    1298:	cc ae       	std	Y+60, r12	; 0x3c
    129a:	dd ae       	std	Y+61, r13	; 0x3d
						ready_sound();
    129c:	ee ae       	std	Y+62, r14	; 0x3e
    129e:	ff ae       	std	Y+63, r15	; 0x3f
					if(checker - load_time > 3000);
					{
						calc_value(5, weight1);
						calc_value2(5, weight2);
						total_gram = weight1[0] + weight2[0];
						First_weight = total_gram;
    12a0:	ed 97       	sbiw	r28, 0x3d	; 61
    12a2:	09 c2       	rjmp	.+1042   	; 0x16b6 <__stack+0x5b7>
    12a4:	80 e5       	ldi	r24, 0x50	; 80
    12a6:	2a d8       	rcall	.-4012   	; 0x2fc <DCmotorright>
    12a8:	8f e0       	ldi	r24, 0x0F	; 15
    12aa:	ef e6       	ldi	r30, 0x6F	; 111
    12ac:	f1 e0       	ldi	r31, 0x01	; 1
						ready_sound();
					}
					break;
				
				case aroll:
					DCmotorright(80);
    12ae:	de 01       	movw	r26, r28
    12b0:	11 96       	adiw	r26, 0x01	; 1
					sprintf(lcd1, "Start Dry     ");
    12b2:	01 90       	ld	r0, Z+
    12b4:	0d 92       	st	X+, r0
    12b6:	8a 95       	dec	r24
    12b8:	e1 f7       	brne	.-8      	; 0x12b2 <__stack+0x1b3>
    12ba:	8f e0       	ldi	r24, 0x0F	; 15
    12bc:	ee e7       	ldi	r30, 0x7E	; 126
    12be:	f1 e0       	ldi	r31, 0x01	; 1
    12c0:	de 01       	movw	r26, r28
    12c2:	53 96       	adiw	r26, 0x13	; 19
					sprintf(lcd2, "rolling...    ");
    12c4:	01 90       	ld	r0, Z+
    12c6:	0d 92       	st	X+, r0
    12c8:	8a 95       	dec	r24
    12ca:	e1 f7       	brne	.-8      	; 0x12c4 <__stack+0x1c5>
    12cc:	33 db       	rcall	.-2458   	; 0x934 <get_rotation>
    12ce:	64 3f       	cpi	r22, 0xF4	; 244
    12d0:	71 40       	sbci	r23, 0x01	; 1
    12d2:	81 05       	cpc	r24, r1
    12d4:	91 05       	cpc	r25, r1
					if(get_rotation() >= 500)
    12d6:	08 f4       	brcc	.+2      	; 0x12da <__stack+0x1db>
    12d8:	ee c1       	rjmp	.+988    	; 0x16b6 <__stack+0x5b7>
    12da:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DCmotorstop>
    12de:	82 e0       	ldi	r24, 0x02	; 2
    12e0:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <Run_State>
    12e4:	60 e0       	ldi	r22, 0x00	; 0
					{
						DCmotorstop();
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	cb 01       	movw	r24, r22
						Run_State = shake;
    12ea:	2d db       	rcall	.-2470   	; 0x946 <set_rotation>
    12ec:	e4 c1       	rjmp	.+968    	; 0x16b6 <__stack+0x5b7>
    12ee:	bd 9a       	sbi	0x17, 5	; 23
						set_rotation(0);
    12f0:	21 e2       	ldi	r18, 0x21	; 33
    12f2:	42 16       	cp	r4, r18
    12f4:	23 e0       	ldi	r18, 0x03	; 3
    12f6:	52 06       	cpc	r5, r18
    12f8:	61 04       	cpc	r6, r1
    12fa:	71 04       	cpc	r7, r1
						dht_flag =1;
					}
					break;
				
				case shake:
					DDRB |= (1 << 5);
    12fc:	40 f0       	brcs	.+16     	; 0x130e <__stack+0x20f>
					if(checker - servo_time >800) servo_Flag ^= 1;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	ee 96       	adiw	r28, 0x3e	; 62
    1302:	3f ad       	ldd	r19, Y+63	; 0x3f
    1304:	ee 97       	sbiw	r28, 0x3e	; 62
    1306:	38 27       	eor	r19, r24
    1308:	ee 96       	adiw	r28, 0x3e	; 62
    130a:	3f af       	std	Y+63, r19	; 0x3f
    130c:	ee 97       	sbiw	r28, 0x3e	; 62
    130e:	af 96       	adiw	r28, 0x2f	; 47
    1310:	8f ad       	ldd	r24, Y+63	; 0x3f
    1312:	af 97       	sbiw	r28, 0x2f	; 47
    1314:	1f 92       	push	r1
    1316:	8f 93       	push	r24
    1318:	ae 96       	adiw	r28, 0x2e	; 46
					// 흔들기
					sprintf(lcd1, "%d.%d%c   %d.%dC   ", ex1[0], ex1[1], '%' ,ex2[0], ex2[1]);
    131a:	8f ad       	ldd	r24, Y+63	; 0x3f
    131c:	ae 97       	sbiw	r28, 0x2e	; 46
    131e:	1f 92       	push	r1
    1320:	8f 93       	push	r24
    1322:	1f 92       	push	r1
    1324:	85 e2       	ldi	r24, 0x25	; 37
    1326:	8f 93       	push	r24
    1328:	ad 96       	adiw	r28, 0x2d	; 45
    132a:	8f ad       	ldd	r24, Y+63	; 0x3f
    132c:	ad 97       	sbiw	r28, 0x2d	; 45
    132e:	1f 92       	push	r1
    1330:	8f 93       	push	r24
    1332:	ac 96       	adiw	r28, 0x2c	; 44
    1334:	8f ad       	ldd	r24, Y+63	; 0x3f
    1336:	ac 97       	sbiw	r28, 0x2c	; 44
    1338:	1f 92       	push	r1
    133a:	8f 93       	push	r24
    133c:	4d e8       	ldi	r20, 0x8D	; 141
    133e:	51 e0       	ldi	r21, 0x01	; 1
    1340:	5f 93       	push	r21
    1342:	4f 93       	push	r20
    1344:	a1 e0       	ldi	r26, 0x01	; 1
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	ac 0f       	add	r26, r28
    134a:	bd 1f       	adc	r27, r29
    134c:	bf 93       	push	r27
    134e:	af 93       	push	r26
    1350:	c0 d4       	rcall	.+2432   	; 0x1cd2 <sprintf>
    1352:	e5 96       	adiw	r28, 0x35	; 53
    1354:	bf ad       	ldd	r27, Y+63	; 0x3f
    1356:	e5 97       	sbiw	r28, 0x35	; 53
    1358:	bf 93       	push	r27
    135a:	e4 96       	adiw	r28, 0x34	; 52
    135c:	ef ad       	ldd	r30, Y+63	; 0x3f
					sprintf(lcd2, "%ld mL dried  ", Lost_weight);
    135e:	e4 97       	sbiw	r28, 0x34	; 52
    1360:	ef 93       	push	r30
    1362:	e3 96       	adiw	r28, 0x33	; 51
    1364:	ff ad       	ldd	r31, Y+63	; 0x3f
    1366:	e3 97       	sbiw	r28, 0x33	; 51
    1368:	ff 93       	push	r31
    136a:	e2 96       	adiw	r28, 0x32	; 50
    136c:	2f ad       	ldd	r18, Y+63	; 0x3f
    136e:	e2 97       	sbiw	r28, 0x32	; 50
    1370:	2f 93       	push	r18
    1372:	41 ea       	ldi	r20, 0xA1	; 161
    1374:	51 e0       	ldi	r21, 0x01	; 1
    1376:	5f 93       	push	r21
    1378:	4f 93       	push	r20
    137a:	e1 96       	adiw	r28, 0x31	; 49
    137c:	9f ad       	ldd	r25, Y+63	; 0x3f
    137e:	e1 97       	sbiw	r28, 0x31	; 49
    1380:	9f 93       	push	r25
    1382:	e0 96       	adiw	r28, 0x30	; 48
    1384:	af ad       	ldd	r26, Y+63	; 0x3f
    1386:	e0 97       	sbiw	r28, 0x30	; 48
    1388:	af 93       	push	r26
    138a:	a3 d4       	rcall	.+2374   	; 0x1cd2 <sprintf>
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	1f 92       	push	r1
					if(night_Flag == 0) 
    1398:	2f 92       	push	r2
    139a:	20 eb       	ldi	r18, 0xB0	; 176
    139c:	31 e0       	ldi	r19, 0x01	; 1
    139e:	3f 93       	push	r19
    13a0:	2f 93       	push	r18
					{
						sprintf(BT_buff,"%d \n", shake_times);
    13a2:	1f 93       	push	r17
    13a4:	0f 93       	push	r16
    13a6:	95 d4       	rcall	.+2346   	; 0x1cd2 <sprintf>
    13a8:	c8 01       	movw	r24, r16
    13aa:	0e 94 7e 00 	call	0xfc	; 0xfc <BT_printf_string>
    13ae:	23 94       	inc	r2
    13b0:	e9 96       	adiw	r28, 0x39	; 57
    13b2:	8c ad       	ldd	r24, Y+60	; 0x3c
						BT_printf_string(BT_buff);
    13b4:	9d ad       	ldd	r25, Y+61	; 0x3d
    13b6:	ae ad       	ldd	r26, Y+62	; 0x3e
    13b8:	bf ad       	ldd	r27, Y+63	; 0x3f
						shake_times++;
    13ba:	e9 97       	sbiw	r28, 0x39	; 57
						total++;
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	a1 1d       	adc	r26, r1
    13c0:	b1 1d       	adc	r27, r1
    13c2:	e9 96       	adiw	r28, 0x39	; 57
    13c4:	8c af       	std	Y+60, r24	; 0x3c
    13c6:	9d af       	std	Y+61, r25	; 0x3d
    13c8:	ae af       	std	Y+62, r26	; 0x3e
    13ca:	bf af       	std	Y+63, r27	; 0x3f
    13cc:	e9 97       	sbiw	r28, 0x39	; 57
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
						if(servo_Flag)
    13d8:	0f 90       	pop	r0
    13da:	ee 96       	adiw	r28, 0x3e	; 62
    13dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    13de:	ee 97       	sbiw	r28, 0x3e	; 62
    13e0:	99 23       	and	r25, r25
    13e2:	61 f0       	breq	.+24     	; 0x13fc <__stack+0x2fd>
    13e4:	8e e1       	ldi	r24, 0x1E	; 30
    13e6:	e9 d1       	rcall	.+978    	; 0x17ba <servo_run>
    13e8:	af ef       	ldi	r26, 0xFF	; 255
    13ea:	b9 e6       	ldi	r27, 0x69	; 105
    13ec:	e8 e1       	ldi	r30, 0x18	; 24
						{
							servo_run(30);
    13ee:	a1 50       	subi	r26, 0x01	; 1
    13f0:	b0 40       	sbci	r27, 0x00	; 0
    13f2:	e0 40       	sbci	r30, 0x00	; 0
    13f4:	e1 f7       	brne	.-8      	; 0x13ee <__stack+0x2ef>
    13f6:	00 c0       	rjmp	.+0      	; 0x13f8 <__stack+0x2f9>
    13f8:	00 00       	nop
    13fa:	0b c0       	rjmp	.+22     	; 0x1412 <__stack+0x313>
    13fc:	8a e5       	ldi	r24, 0x5A	; 90
    13fe:	dd d1       	rcall	.+954    	; 0x17ba <servo_run>
    1400:	ff ef       	ldi	r31, 0xFF	; 255
    1402:	29 e6       	ldi	r18, 0x69	; 105
    1404:	38 e1       	ldi	r19, 0x18	; 24
							_delay_ms(500);
						}
						else
						{
							servo_run(90);
    1406:	f1 50       	subi	r31, 0x01	; 1
    1408:	20 40       	sbci	r18, 0x00	; 0
    140a:	30 40       	sbci	r19, 0x00	; 0
    140c:	e1 f7       	brne	.-8      	; 0x1406 <__stack+0x307>
    140e:	00 c0       	rjmp	.+0      	; 0x1410 <__stack+0x311>
    1410:	00 00       	nop
    1412:	45 e0       	ldi	r20, 0x05	; 5
    1414:	42 15       	cp	r20, r2
    1416:	08 f0       	brcs	.+2      	; 0x141a <__stack+0x31b>
    1418:	4e c1       	rjmp	.+668    	; 0x16b6 <__stack+0x5b7>
    141a:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <Run_State>
							_delay_ms(500);
						}
					}
					if(shake_times >= 6)
    141e:	84 30       	cpi	r24, 0x04	; 4
    1420:	09 f4       	brne	.+2      	; 0x1424 <__stack+0x325>
    1422:	3a c1       	rjmp	.+628    	; 0x1698 <__stack+0x599>
					{
						shake_times = 0;
						if(Run_State != broll) Run_State = measure;
    1424:	83 e0       	ldi	r24, 0x03	; 3
    1426:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <Run_State>
    142a:	21 2c       	mov	r2, r1
    142c:	44 c1       	rjmp	.+648    	; 0x16b6 <__stack+0x5b7>
    142e:	85 eb       	ldi	r24, 0xB5	; 181
    1430:	91 e0       	ldi	r25, 0x01	; 1
    1432:	0e 94 7e 00 	call	0xfc	; 0xfc <BT_printf_string>
							_delay_ms(500);
						}
					}
					if(shake_times >= 6)
					{
						shake_times = 0;
    1436:	be 01       	movw	r22, r28
					}
					break;
				
				case measure:
					// 수치 측정
					BT_printf_string("measure");
    1438:	69 5a       	subi	r22, 0xA9	; 169
    143a:	7f 4f       	sbci	r23, 0xFF	; 255
    143c:	85 e0       	ldi	r24, 0x05	; 5
    143e:	90 e0       	ldi	r25, 0x00	; 0
					calc_value(5, weight1);
    1440:	43 db       	rcall	.-2426   	; 0xac8 <calc_value>
    1442:	be 01       	movw	r22, r28
    1444:	61 5a       	subi	r22, 0xA1	; 161
    1446:	7f 4f       	sbci	r23, 0xFF	; 255
    1448:	85 e0       	ldi	r24, 0x05	; 5
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	2f dc       	rcall	.-1954   	; 0xcac <calc_value2>
					calc_value2(5, weight2);
    144e:	6b 96       	adiw	r28, 0x1b	; 27
    1450:	cc ac       	ldd	r12, Y+60	; 0x3c
    1452:	dd ac       	ldd	r13, Y+61	; 0x3d
    1454:	ee ac       	ldd	r14, Y+62	; 0x3e
    1456:	ff ac       	ldd	r15, Y+63	; 0x3f
    1458:	6b 97       	sbiw	r28, 0x1b	; 27
    145a:	a3 96       	adiw	r28, 0x23	; 35
					total_gram = weight1[0] + weight2[0];
    145c:	8c ad       	ldd	r24, Y+60	; 0x3c
    145e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1460:	ae ad       	ldd	r26, Y+62	; 0x3e
    1462:	bf ad       	ldd	r27, Y+63	; 0x3f
    1464:	a3 97       	sbiw	r28, 0x23	; 35
    1466:	c8 0e       	add	r12, r24
    1468:	d9 1e       	adc	r13, r25
    146a:	ea 1e       	adc	r14, r26
    146c:	fb 1e       	adc	r15, r27
    146e:	ed 96       	adiw	r28, 0x3d	; 61
    1470:	8c ad       	ldd	r24, Y+60	; 0x3c
    1472:	9d ad       	ldd	r25, Y+61	; 0x3d
    1474:	ae ad       	ldd	r26, Y+62	; 0x3e
    1476:	bf ad       	ldd	r27, Y+63	; 0x3f
    1478:	ed 97       	sbiw	r28, 0x3d	; 61
					Lost_weight = (First_weight - total_gram) > Lost_weight? (First_weight - total_gram) : Lost_weight;
    147a:	8c 19       	sub	r24, r12
    147c:	9d 09       	sbc	r25, r13
    147e:	ae 09       	sbc	r26, r14
    1480:	bf 09       	sbc	r27, r15
    1482:	e5 96       	adiw	r28, 0x35	; 53
    1484:	2c ad       	ldd	r18, Y+60	; 0x3c
    1486:	3d ad       	ldd	r19, Y+61	; 0x3d
    1488:	4e ad       	ldd	r20, Y+62	; 0x3e
    148a:	5f ad       	ldd	r21, Y+63	; 0x3f
    148c:	e5 97       	sbiw	r28, 0x35	; 53
    148e:	28 17       	cp	r18, r24
    1490:	39 07       	cpc	r19, r25
    1492:	4a 07       	cpc	r20, r26
    1494:	5b 07       	cpc	r21, r27
    1496:	30 f4       	brcc	.+12     	; 0x14a4 <__stack+0x3a5>
    1498:	e5 96       	adiw	r28, 0x35	; 53
    149a:	8c af       	std	Y+60, r24	; 0x3c
    149c:	9d af       	std	Y+61, r25	; 0x3d
    149e:	ae af       	std	Y+62, r26	; 0x3e
    14a0:	bf af       	std	Y+63, r27	; 0x3f
    14a2:	e5 97       	sbiw	r28, 0x35	; 53
    14a4:	22 e0       	ldi	r18, 0x02	; 2
    14a6:	40 e0       	ldi	r20, 0x00	; 0
    14a8:	be 01       	movw	r22, r28
    14aa:	67 59       	subi	r22, 0x97	; 151
    14ac:	7f 4f       	sbci	r23, 0xFF	; 255
					get_DHT_data(humi,temper, 0, 2);
    14ae:	ce 01       	movw	r24, r28
    14b0:	89 59       	subi	r24, 0x99	; 153
    14b2:	9f 4f       	sbci	r25, 0xFF	; 255
    14b4:	d5 d8       	rcall	.-3670   	; 0x660 <get_DHT_data>
    14b6:	21 e0       	ldi	r18, 0x01	; 1
    14b8:	41 e0       	ldi	r20, 0x01	; 1
    14ba:	be 01       	movw	r22, r28
    14bc:	63 59       	subi	r22, 0x93	; 147
    14be:	7f 4f       	sbci	r23, 0xFF	; 255
    14c0:	ce 01       	movw	r24, r28
					get_DHT_data(ex1, ex2, 1, 1);
    14c2:	85 59       	subi	r24, 0x95	; 149
    14c4:	9f 4f       	sbci	r25, 0xFF	; 255
    14c6:	cc d8       	rcall	.-3688   	; 0x660 <get_DHT_data>
    14c8:	a9 96       	adiw	r28, 0x29	; 41
    14ca:	8f ad       	ldd	r24, Y+63	; 0x3f
    14cc:	a9 97       	sbiw	r28, 0x29	; 41
    14ce:	1f 92       	push	r1
    14d0:	8f 93       	push	r24
    14d2:	a8 96       	adiw	r28, 0x28	; 40
					// 수치 발송
					sprintf(BT_buff, "Lweight %d extemp %d.%d humi %d.%d\n", Lost_weight, ex1[0], ex1[1], humi[0], humi[1]);
    14d4:	8f ad       	ldd	r24, Y+63	; 0x3f
    14d6:	a8 97       	sbiw	r28, 0x28	; 40
    14d8:	1f 92       	push	r1
    14da:	8f 93       	push	r24
    14dc:	ad 96       	adiw	r28, 0x2d	; 45
    14de:	8f ad       	ldd	r24, Y+63	; 0x3f
    14e0:	ad 97       	sbiw	r28, 0x2d	; 45
    14e2:	1f 92       	push	r1
    14e4:	8f 93       	push	r24
    14e6:	ac 96       	adiw	r28, 0x2c	; 44
    14e8:	8f ad       	ldd	r24, Y+63	; 0x3f
    14ea:	ac 97       	sbiw	r28, 0x2c	; 44
    14ec:	1f 92       	push	r1
    14ee:	8f 93       	push	r24
    14f0:	e5 96       	adiw	r28, 0x35	; 53
    14f2:	3f ad       	ldd	r19, Y+63	; 0x3f
    14f4:	e5 97       	sbiw	r28, 0x35	; 53
    14f6:	3f 93       	push	r19
    14f8:	e4 96       	adiw	r28, 0x34	; 52
    14fa:	4f ad       	ldd	r20, Y+63	; 0x3f
    14fc:	e4 97       	sbiw	r28, 0x34	; 52
    14fe:	4f 93       	push	r20
    1500:	e3 96       	adiw	r28, 0x33	; 51
    1502:	5f ad       	ldd	r21, Y+63	; 0x3f
    1504:	e3 97       	sbiw	r28, 0x33	; 51
    1506:	5f 93       	push	r21
    1508:	e2 96       	adiw	r28, 0x32	; 50
    150a:	8f ad       	ldd	r24, Y+63	; 0x3f
    150c:	e2 97       	sbiw	r28, 0x32	; 50
    150e:	8f 93       	push	r24
    1510:	ad eb       	ldi	r26, 0xBD	; 189
    1512:	b1 e0       	ldi	r27, 0x01	; 1
    1514:	bf 93       	push	r27
    1516:	af 93       	push	r26
    1518:	1f 93       	push	r17
    151a:	0f 93       	push	r16
    151c:	da d3       	rcall	.+1972   	; 0x1cd2 <sprintf>
    151e:	c8 01       	movw	r24, r16
    1520:	0e 94 7e 00 	call	0xfc	; 0xfc <BT_printf_string>
    1524:	ab 96       	adiw	r28, 0x2b	; 43
    1526:	8f ad       	ldd	r24, Y+63	; 0x3f
    1528:	ab 97       	sbiw	r28, 0x2b	; 43
					BT_printf_string(BT_buff);
    152a:	1f 92       	push	r1
    152c:	8f 93       	push	r24
    152e:	aa 96       	adiw	r28, 0x2a	; 42
					sprintf(lcd1, "%d.%d%c %d.%dC", humi[0], humi[1], '%', temper[0], temper[1]);
    1530:	8f ad       	ldd	r24, Y+63	; 0x3f
    1532:	aa 97       	sbiw	r28, 0x2a	; 42
    1534:	1f 92       	push	r1
    1536:	8f 93       	push	r24
    1538:	1f 92       	push	r1
    153a:	f5 e2       	ldi	r31, 0x25	; 37
    153c:	ff 93       	push	r31
    153e:	a9 96       	adiw	r28, 0x29	; 41
    1540:	8f ad       	ldd	r24, Y+63	; 0x3f
    1542:	a9 97       	sbiw	r28, 0x29	; 41
    1544:	1f 92       	push	r1
    1546:	8f 93       	push	r24
    1548:	a8 96       	adiw	r28, 0x28	; 40
    154a:	8f ad       	ldd	r24, Y+63	; 0x3f
    154c:	a8 97       	sbiw	r28, 0x28	; 40
    154e:	1f 92       	push	r1
    1550:	8f 93       	push	r24
    1552:	81 ee       	ldi	r24, 0xE1	; 225
    1554:	91 e0       	ldi	r25, 0x01	; 1
    1556:	9f 93       	push	r25
    1558:	8f 93       	push	r24
    155a:	21 e0       	ldi	r18, 0x01	; 1
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	2c 0f       	add	r18, r28
    1560:	3d 1f       	adc	r19, r29
    1562:	3f 93       	push	r19
    1564:	2f 93       	push	r18
    1566:	b5 d3       	rcall	.+1898   	; 0x1cd2 <sprintf>
    1568:	80 ef       	ldi	r24, 0xF0	; 240
    156a:	91 e0       	ldi	r25, 0x01	; 1
    156c:	9f 93       	push	r25
    156e:	8f 93       	push	r24
    1570:	e1 96       	adiw	r28, 0x31	; 49
    1572:	3f ad       	ldd	r19, Y+63	; 0x3f
					sprintf(lcd2, "%               ");
    1574:	e1 97       	sbiw	r28, 0x31	; 49
    1576:	3f 93       	push	r19
    1578:	e0 96       	adiw	r28, 0x30	; 48
    157a:	4f ad       	ldd	r20, Y+63	; 0x3f
    157c:	e0 97       	sbiw	r28, 0x30	; 48
    157e:	4f 93       	push	r20
    1580:	a8 d3       	rcall	.+1872   	; 0x1cd2 <sprintf>
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	ae 96       	adiw	r28, 0x2e	; 46
					sprintf(BT_buff, "%d.%d%c %d.%dC %d %d\n", humi[0], humi[1], '%', temper[0], temper[1], ex1[0], ex2[0]);
    158e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1590:	ae 97       	sbiw	r28, 0x2e	; 46
    1592:	1f 92       	push	r1
    1594:	8f 93       	push	r24
    1596:	ac 96       	adiw	r28, 0x2c	; 44
    1598:	8f ad       	ldd	r24, Y+63	; 0x3f
    159a:	ac 97       	sbiw	r28, 0x2c	; 44
    159c:	1f 92       	push	r1
    159e:	8f 93       	push	r24
    15a0:	ab 96       	adiw	r28, 0x2b	; 43
    15a2:	8f ad       	ldd	r24, Y+63	; 0x3f
    15a4:	ab 97       	sbiw	r28, 0x2b	; 43
    15a6:	1f 92       	push	r1
    15a8:	8f 93       	push	r24
    15aa:	aa 96       	adiw	r28, 0x2a	; 42
    15ac:	8f ad       	ldd	r24, Y+63	; 0x3f
    15ae:	aa 97       	sbiw	r28, 0x2a	; 42
    15b0:	1f 92       	push	r1
    15b2:	8f 93       	push	r24
    15b4:	1f 92       	push	r1
    15b6:	95 e2       	ldi	r25, 0x25	; 37
    15b8:	9f 93       	push	r25
    15ba:	a9 96       	adiw	r28, 0x29	; 41
    15bc:	8f ad       	ldd	r24, Y+63	; 0x3f
    15be:	a9 97       	sbiw	r28, 0x29	; 41
    15c0:	1f 92       	push	r1
    15c2:	8f 93       	push	r24
    15c4:	a8 96       	adiw	r28, 0x28	; 40
    15c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    15c8:	a8 97       	sbiw	r28, 0x28	; 40
    15ca:	1f 92       	push	r1
    15cc:	8f 93       	push	r24
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	92 e0       	ldi	r25, 0x02	; 2
    15d2:	9f 93       	push	r25
    15d4:	8f 93       	push	r24
    15d6:	1f 93       	push	r17
    15d8:	0f 93       	push	r16
    15da:	7b d3       	rcall	.+1782   	; 0x1cd2 <sprintf>
    15dc:	c8 01       	movw	r24, r16
    15de:	0e 94 7e 00 	call	0xfc	; 0xfc <BT_printf_string>
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	f8 94       	cli
    15e6:	de bf       	out	0x3e, r29	; 62
    15e8:	0f be       	out	0x3f, r0	; 63
					BT_printf_string(BT_buff);
    15ea:	cd bf       	out	0x3d, r28	; 61
    15ec:	e9 96       	adiw	r28, 0x39	; 57
    15ee:	2c ad       	ldd	r18, Y+60	; 0x3c
					// 복귀
					if(total > 60)
    15f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    15f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    15f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    15f6:	e9 97       	sbiw	r28, 0x39	; 57
    15f8:	2d 33       	cpi	r18, 0x3D	; 61
    15fa:	31 05       	cpc	r19, r1
    15fc:	41 05       	cpc	r20, r1
    15fe:	51 05       	cpc	r21, r1
    1600:	78 f0       	brcs	.+30     	; 0x1620 <__stack+0x521>
    1602:	84 e0       	ldi	r24, 0x04	; 4
    1604:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <Run_State>
    1608:	a8 96       	adiw	r28, 0x28	; 40
    160a:	8f ad       	ldd	r24, Y+63	; 0x3f
    160c:	a8 97       	sbiw	r28, 0x28	; 40
					{
						Run_State = broll;
    160e:	8b 34       	cpi	r24, 0x4B	; 75
    1610:	68 f0       	brcs	.+26     	; 0x162c <__stack+0x52d>
    1612:	e9 96       	adiw	r28, 0x39	; 57
						total = 0;
					}
					if(humi[0] < 75) Run_State = broll;
    1614:	1c ae       	std	Y+60, r1	; 0x3c
    1616:	1d ae       	std	Y+61, r1	; 0x3d
    1618:	1e ae       	std	Y+62, r1	; 0x3e
    161a:	1f ae       	std	Y+63, r1	; 0x3f
    161c:	e9 97       	sbiw	r28, 0x39	; 57
					BT_printf_string(BT_buff);
					// 복귀
					if(total > 60)
					{
						Run_State = broll;
						total = 0;
    161e:	4b c0       	rjmp	.+150    	; 0x16b6 <__stack+0x5b7>
    1620:	a8 96       	adiw	r28, 0x28	; 40
    1622:	8f ad       	ldd	r24, Y+63	; 0x3f
    1624:	a8 97       	sbiw	r28, 0x28	; 40
    1626:	8b 34       	cpi	r24, 0x4B	; 75
    1628:	58 f4       	brcc	.+22     	; 0x1640 <__stack+0x541>
    162a:	06 c0       	rjmp	.+12     	; 0x1638 <__stack+0x539>
					}
					if(humi[0] < 75) Run_State = broll;
    162c:	e9 96       	adiw	r28, 0x39	; 57
    162e:	1c ae       	std	Y+60, r1	; 0x3c
    1630:	1d ae       	std	Y+61, r1	; 0x3d
    1632:	1e ae       	std	Y+62, r1	; 0x3e
    1634:	1f ae       	std	Y+63, r1	; 0x3f
    1636:	e9 97       	sbiw	r28, 0x39	; 57
					BT_printf_string(BT_buff);
					// 복귀
					if(total > 60)
					{
						Run_State = broll;
						total = 0;
    1638:	84 e0       	ldi	r24, 0x04	; 4
    163a:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <Run_State>
    163e:	3b c0       	rjmp	.+118    	; 0x16b6 <__stack+0x5b7>
    1640:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <Run_State>
					}
					if(humi[0] < 75) Run_State = broll;
    1644:	84 30       	cpi	r24, 0x04	; 4
    1646:	b9 f1       	breq	.+110    	; 0x16b6 <__stack+0x5b7>
    1648:	82 e0       	ldi	r24, 0x02	; 2
    164a:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <Run_State>
					else
					{
						if(Run_State != broll) Run_State = shake;
    164e:	33 c0       	rjmp	.+102    	; 0x16b6 <__stack+0x5b7>
    1650:	80 e5       	ldi	r24, 0x50	; 80
    1652:	0e 94 74 01 	call	0x2e8	; 0x2e8 <DCmotorleft>
    1656:	6e d9       	rcall	.-3364   	; 0x934 <get_rotation>
    1658:	65 3f       	cpi	r22, 0xF5	; 245
    165a:	71 40       	sbci	r23, 0x01	; 1
					First_weight = 0;
					Lost_weight = 0;
					cloth_humid = 0;
					shake_times = 0;
					
					DCmotorleft(80);
    165c:	81 05       	cpc	r24, r1
    165e:	91 05       	cpc	r25, r1
    1660:	e8 f0       	brcs	.+58     	; 0x169c <__stack+0x59d>
					if(get_rotation() > 500)
    1662:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DCmotorstop>
    1666:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <Run_State>
    166a:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <Main_State>
    166e:	21 2c       	mov	r2, r1
					{
						DCmotorstop();
    1670:	e5 96       	adiw	r28, 0x35	; 53
    1672:	1c ae       	std	Y+60, r1	; 0x3c
						Run_State = ready;
    1674:	1d ae       	std	Y+61, r1	; 0x3d
    1676:	1e ae       	std	Y+62, r1	; 0x3e
						Main_State = Waiting;
    1678:	1f ae       	std	Y+63, r1	; 0x3f
    167a:	e5 97       	sbiw	r28, 0x35	; 53
					//reset
					dry_per = 0;
					First_weight = 0;
					Lost_weight = 0;
					cloth_humid = 0;
					shake_times = 0;
    167c:	ed 96       	adiw	r28, 0x3d	; 61
				
				case broll:
					//reset
					dry_per = 0;
					First_weight = 0;
					Lost_weight = 0;
    167e:	1c ae       	std	Y+60, r1	; 0x3c
    1680:	1d ae       	std	Y+61, r1	; 0x3d
    1682:	1e ae       	std	Y+62, r1	; 0x3e
    1684:	1f ae       	std	Y+63, r1	; 0x3f
    1686:	ed 97       	sbiw	r28, 0x3d	; 61
    1688:	16 c0       	rjmp	.+44     	; 0x16b6 <__stack+0x5b7>
					break;
				
				case broll:
					//reset
					dry_per = 0;
					First_weight = 0;
    168a:	ed 96       	adiw	r28, 0x3d	; 61
    168c:	cc ae       	std	Y+60, r12	; 0x3c
    168e:	dd ae       	std	Y+61, r13	; 0x3d
    1690:	ee ae       	std	Y+62, r14	; 0x3e
    1692:	ff ae       	std	Y+63, r15	; 0x3f
    1694:	ed 97       	sbiw	r28, 0x3d	; 61
    1696:	0f c0       	rjmp	.+30     	; 0x16b6 <__stack+0x5b7>
					if(checker - load_time > 3000);
					{
						calc_value(5, weight1);
						calc_value2(5, weight2);
						total_gram = weight1[0] + weight2[0];
						First_weight = total_gram;
    1698:	21 2c       	mov	r2, r1
    169a:	0d c0       	rjmp	.+26     	; 0x16b6 <__stack+0x5b7>
    169c:	21 2c       	mov	r2, r1
    169e:	e5 96       	adiw	r28, 0x35	; 53
    16a0:	1c ae       	std	Y+60, r1	; 0x3c
    16a2:	1d ae       	std	Y+61, r1	; 0x3d
    16a4:	1e ae       	std	Y+62, r1	; 0x3e
							_delay_ms(500);
						}
					}
					if(shake_times >= 6)
					{
						shake_times = 0;
    16a6:	1f ae       	std	Y+63, r1	; 0x3f
					//reset
					dry_per = 0;
					First_weight = 0;
					Lost_weight = 0;
					cloth_humid = 0;
					shake_times = 0;
    16a8:	e5 97       	sbiw	r28, 0x35	; 53
				
				case broll:
					//reset
					dry_per = 0;
					First_weight = 0;
					Lost_weight = 0;
    16aa:	ed 96       	adiw	r28, 0x3d	; 61
    16ac:	1c ae       	std	Y+60, r1	; 0x3c
    16ae:	1d ae       	std	Y+61, r1	; 0x3d
    16b0:	1e ae       	std	Y+62, r1	; 0x3e
    16b2:	1f ae       	std	Y+63, r1	; 0x3f
    16b4:	ed 97       	sbiw	r28, 0x3d	; 61
					break;
				
				case broll:
					//reset
					dry_per = 0;
					First_weight = 0;
    16b6:	0e 94 8c 00 	call	0x118	; 0x118 <isBTString>
    16ba:	88 23       	and	r24, r24
    16bc:	79 f0       	breq	.+30     	; 0x16dc <__stack+0x5dd>
    16be:	0e 94 8f 00 	call	0x11e	; 0x11e <getBTtring>
						Main_State = Waiting;
					}
					break;
			}
			// 블루투스 명령어
			if(isBTString())
    16c2:	24 e7       	ldi	r18, 0x74	; 116
    16c4:	dc 01       	movw	r26, r24
    16c6:	2c 93       	st	X, r18
    16c8:	81 e0       	ldi	r24, 0x01	; 1
			{
				cmd_buff = getBTtring();
    16ca:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <Main_State>
				if(cmd_buff[0] = 'at')
    16ce:	0e 94 ce 00 	call	0x19c	; 0x19c <button>
    16d2:	89 2b       	or	r24, r25
				{
					start_Flag = 1;
					Main_State = Running;
    16d4:	61 f4       	brne	.+24     	; 0x16ee <__stack+0x5ef>
    16d6:	33 24       	eor	r3, r3
    16d8:	33 94       	inc	r3
					auto_Flag = 1;
					night_Flag = 0;
				}
			}
			//버튼 작동
			if(button(start_stop_button))
    16da:	15 c0       	rjmp	.+42     	; 0x1706 <__stack+0x607>
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	0e 94 ce 00 	call	0x19c	; 0x19c <button>
			if(isBTString())
			{
				cmd_buff = getBTtring();
				if(cmd_buff[0] = 'at')
				{
					start_Flag = 1;
    16e2:	89 2b       	or	r24, r25
    16e4:	71 f0       	breq	.+28     	; 0x1702 <__stack+0x603>
    16e6:	33 20       	and	r3, r3
					auto_Flag = 1;
					night_Flag = 0;
				}
			}
			//버튼 작동
			if(button(start_stop_button))
    16e8:	09 f4       	brne	.+2      	; 0x16ec <__stack+0x5ed>
    16ea:	52 c0       	rjmp	.+164    	; 0x1790 <__stack+0x691>
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <__stack+0x5f3>
    16ee:	33 24       	eor	r3, r3
    16f0:	33 94       	inc	r3
			{
				if(start_Flag)
    16f2:	84 e0       	ldi	r24, 0x04	; 4
    16f4:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <Run_State>
			if(isBTString())
			{
				cmd_buff = getBTtring();
				if(cmd_buff[0] = 'at')
				{
					start_Flag = 1;
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	70 e0       	ldi	r23, 0x00	; 0
			//버튼 작동
			if(button(start_stop_button))
			{
				if(start_Flag)
				{
					Run_State = broll;
    16fc:	cb 01       	movw	r24, r22
    16fe:	23 d9       	rcall	.-3514   	; 0x946 <set_rotation>
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <__stack+0x607>
					set_rotation(0);
    1702:	33 20       	and	r3, r3
    1704:	b9 f0       	breq	.+46     	; 0x1734 <__stack+0x635>
    1706:	b5 e6       	ldi	r27, 0x65	; 101
    1708:	cb 16       	cp	r12, r27
    170a:	d1 04       	cpc	r13, r1
// 				if(read_ADC(0) >= 800) night_Flag = 0;
// 				else night_Flag =1;
// 			}
		}
		// 블로워 팬 작동
		if(start_Flag)
    170c:	e1 04       	cpc	r14, r1
		{
			if(total_gram > 100) Blower_Fan(255);
    170e:	f1 04       	cpc	r15, r1
    1710:	20 f0       	brcs	.+8      	; 0x171a <__stack+0x61b>
    1712:	8f ef       	ldi	r24, 0xFF	; 255
    1714:	0e 94 88 01 	call	0x310	; 0x310 <Blower_Fan>
    1718:	0d c0       	rjmp	.+26     	; 0x1734 <__stack+0x635>
    171a:	e3 e3       	ldi	r30, 0x33	; 51
    171c:	ce 16       	cp	r12, r30
    171e:	d1 04       	cpc	r13, r1
			else if(total_gram > 50) Blower_Fan(200);
    1720:	e1 04       	cpc	r14, r1
    1722:	f1 04       	cpc	r15, r1
    1724:	20 f0       	brcs	.+8      	; 0x172e <__stack+0x62f>
    1726:	88 ec       	ldi	r24, 0xC8	; 200
    1728:	0e 94 88 01 	call	0x310	; 0x310 <Blower_Fan>
    172c:	03 c0       	rjmp	.+6      	; 0x1734 <__stack+0x635>
    172e:	84 eb       	ldi	r24, 0xB4	; 180
    1730:	0e 94 88 01 	call	0x310	; 0x310 <Blower_Fan>
			else Blower_Fan(180);
    1734:	48 18       	sub	r4, r8
    1736:	59 08       	sbc	r5, r9
    1738:	6a 08       	sbc	r6, r10
		}
		if(checker-lcd_time > 500)
    173a:	7b 08       	sbc	r7, r11
    173c:	f5 ef       	ldi	r31, 0xF5	; 245
    173e:	4f 16       	cp	r4, r31
    1740:	f1 e0       	ldi	r31, 0x01	; 1
    1742:	5f 06       	cpc	r5, r31
    1744:	61 04       	cpc	r6, r1
    1746:	71 04       	cpc	r7, r1
    1748:	08 f4       	brcc	.+2      	; 0x174c <__stack+0x64d>
    174a:	c6 cc       	rjmp	.-1652   	; 0x10d8 <main+0xc2>
    174c:	c4 db       	rcall	.-2168   	; 0xed6 <isLcd_Flag>
    174e:	88 23       	and	r24, r24
    1750:	09 f4       	brne	.+2      	; 0x1754 <__stack+0x655>
		{
			if(isLcd_Flag())
    1752:	c2 cc       	rjmp	.-1660   	; 0x10d8 <main+0xc2>
    1754:	ae 01       	movw	r20, r28
    1756:	4f 5f       	subi	r20, 0xFF	; 255
    1758:	5f 4f       	sbci	r21, 0xFF	; 255
    175a:	60 e0       	ldi	r22, 0x00	; 0
			{
				I2C_LCD_write_string_XY(0, 0, lcd1);
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	a8 db       	rcall	.-2224   	; 0xeb0 <I2C_LCD_write_string_XY>
    1760:	ae 01       	movw	r20, r28
    1762:	4d 5e       	subi	r20, 0xED	; 237
    1764:	5f 4f       	sbci	r21, 0xFF	; 255
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	81 e0       	ldi	r24, 0x01	; 1
				I2C_LCD_write_string_XY(1, 0, lcd2);
    176a:	a2 db       	rcall	.-2236   	; 0xeb0 <I2C_LCD_write_string_XY>
    176c:	5e d0       	rcall	.+188    	; 0x182a <millis>
    176e:	4b 01       	movw	r8, r22
    1770:	5c 01       	movw	r10, r24
    1772:	61 e0       	ldi	r22, 0x01	; 1
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	0e 94 aa 03 	call	0x754	; 0x754 <avg_hum>
				lcd_time = millis();
    177a:	22 e0       	ldi	r18, 0x02	; 2
    177c:	40 e0       	ldi	r20, 0x00	; 0
    177e:	be 01       	movw	r22, r28
				external_humid = avg_hum(1, 1);
    1780:	67 59       	subi	r22, 0x97	; 151
    1782:	7f 4f       	sbci	r23, 0xFF	; 255
    1784:	ce 01       	movw	r24, r28
    1786:	89 59       	subi	r24, 0x99	; 153
				get_DHT_data(humi, temper, 0, 2);
    1788:	9f 4f       	sbci	r25, 0xFF	; 255
    178a:	0e 94 30 03 	call	0x660	; 0x660 <get_DHT_data>
    178e:	a4 cc       	rjmp	.-1720   	; 0x10d8 <main+0xc2>
    1790:	33 24       	eor	r3, r3
    1792:	33 94       	inc	r3
    1794:	b8 cf       	rjmp	.-144    	; 0x1706 <__stack+0x607>

00001796 <servoInit>:

#include "SERVO.h"

void servoInit()
{
	DDRB |= (1 << 5);
    1796:	bd 9a       	sbi	0x17, 5	; 23
	TCCR1A |= (1 << WGM11);
    1798:	8f b5       	in	r24, 0x2f	; 47
    179a:	82 60       	ori	r24, 0x02	; 2
    179c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) | (1 << WGM13) ;
    179e:	8e b5       	in	r24, 0x2e	; 46
    17a0:	88 61       	ori	r24, 0x18	; 24
    17a2:	8e bd       	out	0x2e, r24	; 46
	
	TCCR1A |= (1 << COM1A1); 
    17a4:	8f b5       	in	r24, 0x2f	; 47
    17a6:	80 68       	ori	r24, 0x80	; 128
    17a8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << CS11) | (1 << CS10);
    17aa:	8e b5       	in	r24, 0x2e	; 46
    17ac:	83 60       	ori	r24, 0x03	; 3
    17ae:	8e bd       	out	0x2e, r24	; 46
	
	ICR1 = 5000-1;
    17b0:	87 e8       	ldi	r24, 0x87	; 135
    17b2:	93 e1       	ldi	r25, 0x13	; 19
    17b4:	97 bd       	out	0x27, r25	; 39
    17b6:	86 bd       	out	0x26, r24	; 38
    17b8:	08 95       	ret

000017ba <servo_run>:
}

void servo_run(uint8_t degree)
{
	OCR1A = (degree / 180.0) * 500 + 124;
    17ba:	68 2f       	mov	r22, r24
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	67 d1       	rcall	.+718    	; 0x1a92 <__floatsisf>
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	44 e3       	ldi	r20, 0x34	; 52
    17ca:	53 e4       	ldi	r21, 0x43	; 67
    17cc:	cc d0       	rcall	.+408    	; 0x1966 <__divsf3>
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	4a ef       	ldi	r20, 0xFA	; 250
    17d4:	53 e4       	ldi	r21, 0x43	; 67
    17d6:	e9 d1       	rcall	.+978    	; 0x1baa <__mulsf3>
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	48 ef       	ldi	r20, 0xF8	; 248
    17de:	52 e4       	ldi	r21, 0x42	; 66
    17e0:	5e d0       	rcall	.+188    	; 0x189e <__addsf3>
    17e2:	29 d1       	rcall	.+594    	; 0x1a36 <__fixunssfsi>
    17e4:	7b bd       	out	0x2b, r23	; 43
    17e6:	6a bd       	out	0x2a, r22	; 42
    17e8:	08 95       	ret

000017ea <timer0init>:


void timer0init()
{
	//분주비 64
	TCCR0 |= _BV(CS02);
    17ea:	83 b7       	in	r24, 0x33	; 51
    17ec:	84 60       	ori	r24, 0x04	; 4
    17ee:	83 bf       	out	0x33, r24	; 51
	//CTC mode 사용
	TCCR0 |= _BV(WGM01);
    17f0:	83 b7       	in	r24, 0x33	; 51
    17f2:	88 60       	ori	r24, 0x08	; 8
    17f4:	83 bf       	out	0x33, r24	; 51
	//ouput compare interrupt enable
	TIMSK |= _BV(OCIE0);
    17f6:	87 b7       	in	r24, 0x37	; 55
    17f8:	82 60       	ori	r24, 0x02	; 2
    17fa:	87 bf       	out	0x37, r24	; 55
	OCR0 = 250;
    17fc:	8a ef       	ldi	r24, 0xFA	; 250
    17fe:	81 bf       	out	0x31, r24	; 49
    1800:	08 95       	ret

00001802 <incMilliSec>:
	// tcnt set 250
}

void incMilliSec()
{
	milliSec ++;
    1802:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <milliSec>
    1806:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <milliSec+0x1>
    180a:	a0 91 6e 02 	lds	r26, 0x026E	; 0x80026e <milliSec+0x2>
    180e:	b0 91 6f 02 	lds	r27, 0x026F	; 0x80026f <milliSec+0x3>
    1812:	01 96       	adiw	r24, 0x01	; 1
    1814:	a1 1d       	adc	r26, r1
    1816:	b1 1d       	adc	r27, r1
    1818:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <milliSec>
    181c:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <milliSec+0x1>
    1820:	a0 93 6e 02 	sts	0x026E, r26	; 0x80026e <milliSec+0x2>
    1824:	b0 93 6f 02 	sts	0x026F, r27	; 0x80026f <milliSec+0x3>
    1828:	08 95       	ret

0000182a <millis>:
}

uint32_t millis()
{
	return milliSec;
    182a:	60 91 6c 02 	lds	r22, 0x026C	; 0x80026c <milliSec>
    182e:	70 91 6d 02 	lds	r23, 0x026D	; 0x80026d <milliSec+0x1>
    1832:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <milliSec+0x2>
    1836:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <milliSec+0x3>
}
    183a:	08 95       	ret

0000183c <incTime>:

void incTime()
{
	if((milliSec%1000) == 0)
    183c:	60 91 6c 02 	lds	r22, 0x026C	; 0x80026c <milliSec>
    1840:	70 91 6d 02 	lds	r23, 0x026D	; 0x80026d <milliSec+0x1>
    1844:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <milliSec+0x2>
    1848:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <milliSec+0x3>
    184c:	28 ee       	ldi	r18, 0xE8	; 232
    184e:	33 e0       	ldi	r19, 0x03	; 3
    1850:	40 e0       	ldi	r20, 0x00	; 0
    1852:	50 e0       	ldi	r21, 0x00	; 0
    1854:	0d d2       	rcall	.+1050   	; 0x1c70 <__udivmodsi4>
    1856:	67 2b       	or	r22, r23
    1858:	68 2b       	or	r22, r24
    185a:	69 2b       	or	r22, r25
    185c:	f1 f4       	brne	.+60     	; 0x189a <incTime+0x5e>
	{
		sec++;
    185e:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <sec>
    1862:	8f 5f       	subi	r24, 0xFF	; 255
		if(sec >= 60)
    1864:	8c 33       	cpi	r24, 0x3C	; 60
    1866:	18 f4       	brcc	.+6      	; 0x186e <incTime+0x32>

void incTime()
{
	if((milliSec%1000) == 0)
	{
		sec++;
    1868:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <sec>
    186c:	08 95       	ret
		if(sec >= 60)
		{
			sec = 0;
    186e:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <sec>
			min ++;
    1872:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <min>
    1876:	8f 5f       	subi	r24, 0xFF	; 255
			if(min>=60)
    1878:	8c 33       	cpi	r24, 0x3C	; 60
    187a:	18 f4       	brcc	.+6      	; 0x1882 <incTime+0x46>
	{
		sec++;
		if(sec >= 60)
		{
			sec = 0;
			min ++;
    187c:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <min>
    1880:	08 95       	ret
			if(min>=60)
			{
				min = 0;
    1882:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <min>
				hour ++;
    1886:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <hour>
    188a:	8f 5f       	subi	r24, 0xFF	; 255
				if(hour>=24)
    188c:	88 31       	cpi	r24, 0x18	; 24
    188e:	18 f4       	brcc	.+6      	; 0x1896 <incTime+0x5a>
			sec = 0;
			min ++;
			if(min>=60)
			{
				min = 0;
				hour ++;
    1890:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <hour>
    1894:	08 95       	ret
				if(hour>=24)
				{
					hour =0;
    1896:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <hour>
    189a:	08 95       	ret

0000189c <__subsf3>:
    189c:	50 58       	subi	r21, 0x80	; 128

0000189e <__addsf3>:
    189e:	bb 27       	eor	r27, r27
    18a0:	aa 27       	eor	r26, r26
    18a2:	0e d0       	rcall	.+28     	; 0x18c0 <__addsf3x>
    18a4:	48 c1       	rjmp	.+656    	; 0x1b36 <__fp_round>
    18a6:	39 d1       	rcall	.+626    	; 0x1b1a <__fp_pscA>
    18a8:	30 f0       	brcs	.+12     	; 0x18b6 <__addsf3+0x18>
    18aa:	3e d1       	rcall	.+636    	; 0x1b28 <__fp_pscB>
    18ac:	20 f0       	brcs	.+8      	; 0x18b6 <__addsf3+0x18>
    18ae:	31 f4       	brne	.+12     	; 0x18bc <__addsf3+0x1e>
    18b0:	9f 3f       	cpi	r25, 0xFF	; 255
    18b2:	11 f4       	brne	.+4      	; 0x18b8 <__addsf3+0x1a>
    18b4:	1e f4       	brtc	.+6      	; 0x18bc <__addsf3+0x1e>
    18b6:	2e c1       	rjmp	.+604    	; 0x1b14 <__fp_nan>
    18b8:	0e f4       	brtc	.+2      	; 0x18bc <__addsf3+0x1e>
    18ba:	e0 95       	com	r30
    18bc:	e7 fb       	bst	r30, 7
    18be:	24 c1       	rjmp	.+584    	; 0x1b08 <__fp_inf>

000018c0 <__addsf3x>:
    18c0:	e9 2f       	mov	r30, r25
    18c2:	4a d1       	rcall	.+660    	; 0x1b58 <__fp_split3>
    18c4:	80 f3       	brcs	.-32     	; 0x18a6 <__addsf3+0x8>
    18c6:	ba 17       	cp	r27, r26
    18c8:	62 07       	cpc	r22, r18
    18ca:	73 07       	cpc	r23, r19
    18cc:	84 07       	cpc	r24, r20
    18ce:	95 07       	cpc	r25, r21
    18d0:	18 f0       	brcs	.+6      	; 0x18d8 <__addsf3x+0x18>
    18d2:	71 f4       	brne	.+28     	; 0x18f0 <__addsf3x+0x30>
    18d4:	9e f5       	brtc	.+102    	; 0x193c <__addsf3x+0x7c>
    18d6:	62 c1       	rjmp	.+708    	; 0x1b9c <__fp_zero>
    18d8:	0e f4       	brtc	.+2      	; 0x18dc <__addsf3x+0x1c>
    18da:	e0 95       	com	r30
    18dc:	0b 2e       	mov	r0, r27
    18de:	ba 2f       	mov	r27, r26
    18e0:	a0 2d       	mov	r26, r0
    18e2:	0b 01       	movw	r0, r22
    18e4:	b9 01       	movw	r22, r18
    18e6:	90 01       	movw	r18, r0
    18e8:	0c 01       	movw	r0, r24
    18ea:	ca 01       	movw	r24, r20
    18ec:	a0 01       	movw	r20, r0
    18ee:	11 24       	eor	r1, r1
    18f0:	ff 27       	eor	r31, r31
    18f2:	59 1b       	sub	r21, r25
    18f4:	99 f0       	breq	.+38     	; 0x191c <__addsf3x+0x5c>
    18f6:	59 3f       	cpi	r21, 0xF9	; 249
    18f8:	50 f4       	brcc	.+20     	; 0x190e <__addsf3x+0x4e>
    18fa:	50 3e       	cpi	r21, 0xE0	; 224
    18fc:	68 f1       	brcs	.+90     	; 0x1958 <__addsf3x+0x98>
    18fe:	1a 16       	cp	r1, r26
    1900:	f0 40       	sbci	r31, 0x00	; 0
    1902:	a2 2f       	mov	r26, r18
    1904:	23 2f       	mov	r18, r19
    1906:	34 2f       	mov	r19, r20
    1908:	44 27       	eor	r20, r20
    190a:	58 5f       	subi	r21, 0xF8	; 248
    190c:	f3 cf       	rjmp	.-26     	; 0x18f4 <__addsf3x+0x34>
    190e:	46 95       	lsr	r20
    1910:	37 95       	ror	r19
    1912:	27 95       	ror	r18
    1914:	a7 95       	ror	r26
    1916:	f0 40       	sbci	r31, 0x00	; 0
    1918:	53 95       	inc	r21
    191a:	c9 f7       	brne	.-14     	; 0x190e <__addsf3x+0x4e>
    191c:	7e f4       	brtc	.+30     	; 0x193c <__addsf3x+0x7c>
    191e:	1f 16       	cp	r1, r31
    1920:	ba 0b       	sbc	r27, r26
    1922:	62 0b       	sbc	r22, r18
    1924:	73 0b       	sbc	r23, r19
    1926:	84 0b       	sbc	r24, r20
    1928:	ba f0       	brmi	.+46     	; 0x1958 <__addsf3x+0x98>
    192a:	91 50       	subi	r25, 0x01	; 1
    192c:	a1 f0       	breq	.+40     	; 0x1956 <__addsf3x+0x96>
    192e:	ff 0f       	add	r31, r31
    1930:	bb 1f       	adc	r27, r27
    1932:	66 1f       	adc	r22, r22
    1934:	77 1f       	adc	r23, r23
    1936:	88 1f       	adc	r24, r24
    1938:	c2 f7       	brpl	.-16     	; 0x192a <__addsf3x+0x6a>
    193a:	0e c0       	rjmp	.+28     	; 0x1958 <__addsf3x+0x98>
    193c:	ba 0f       	add	r27, r26
    193e:	62 1f       	adc	r22, r18
    1940:	73 1f       	adc	r23, r19
    1942:	84 1f       	adc	r24, r20
    1944:	48 f4       	brcc	.+18     	; 0x1958 <__addsf3x+0x98>
    1946:	87 95       	ror	r24
    1948:	77 95       	ror	r23
    194a:	67 95       	ror	r22
    194c:	b7 95       	ror	r27
    194e:	f7 95       	ror	r31
    1950:	9e 3f       	cpi	r25, 0xFE	; 254
    1952:	08 f0       	brcs	.+2      	; 0x1956 <__addsf3x+0x96>
    1954:	b3 cf       	rjmp	.-154    	; 0x18bc <__addsf3+0x1e>
    1956:	93 95       	inc	r25
    1958:	88 0f       	add	r24, r24
    195a:	08 f0       	brcs	.+2      	; 0x195e <__addsf3x+0x9e>
    195c:	99 27       	eor	r25, r25
    195e:	ee 0f       	add	r30, r30
    1960:	97 95       	ror	r25
    1962:	87 95       	ror	r24
    1964:	08 95       	ret

00001966 <__divsf3>:
    1966:	0c d0       	rcall	.+24     	; 0x1980 <__divsf3x>
    1968:	e6 c0       	rjmp	.+460    	; 0x1b36 <__fp_round>
    196a:	de d0       	rcall	.+444    	; 0x1b28 <__fp_pscB>
    196c:	40 f0       	brcs	.+16     	; 0x197e <__divsf3+0x18>
    196e:	d5 d0       	rcall	.+426    	; 0x1b1a <__fp_pscA>
    1970:	30 f0       	brcs	.+12     	; 0x197e <__divsf3+0x18>
    1972:	21 f4       	brne	.+8      	; 0x197c <__divsf3+0x16>
    1974:	5f 3f       	cpi	r21, 0xFF	; 255
    1976:	19 f0       	breq	.+6      	; 0x197e <__divsf3+0x18>
    1978:	c7 c0       	rjmp	.+398    	; 0x1b08 <__fp_inf>
    197a:	51 11       	cpse	r21, r1
    197c:	10 c1       	rjmp	.+544    	; 0x1b9e <__fp_szero>
    197e:	ca c0       	rjmp	.+404    	; 0x1b14 <__fp_nan>

00001980 <__divsf3x>:
    1980:	eb d0       	rcall	.+470    	; 0x1b58 <__fp_split3>
    1982:	98 f3       	brcs	.-26     	; 0x196a <__divsf3+0x4>

00001984 <__divsf3_pse>:
    1984:	99 23       	and	r25, r25
    1986:	c9 f3       	breq	.-14     	; 0x197a <__divsf3+0x14>
    1988:	55 23       	and	r21, r21
    198a:	b1 f3       	breq	.-20     	; 0x1978 <__divsf3+0x12>
    198c:	95 1b       	sub	r25, r21
    198e:	55 0b       	sbc	r21, r21
    1990:	bb 27       	eor	r27, r27
    1992:	aa 27       	eor	r26, r26
    1994:	62 17       	cp	r22, r18
    1996:	73 07       	cpc	r23, r19
    1998:	84 07       	cpc	r24, r20
    199a:	38 f0       	brcs	.+14     	; 0x19aa <__divsf3_pse+0x26>
    199c:	9f 5f       	subi	r25, 0xFF	; 255
    199e:	5f 4f       	sbci	r21, 0xFF	; 255
    19a0:	22 0f       	add	r18, r18
    19a2:	33 1f       	adc	r19, r19
    19a4:	44 1f       	adc	r20, r20
    19a6:	aa 1f       	adc	r26, r26
    19a8:	a9 f3       	breq	.-22     	; 0x1994 <__divsf3_pse+0x10>
    19aa:	33 d0       	rcall	.+102    	; 0x1a12 <__divsf3_pse+0x8e>
    19ac:	0e 2e       	mov	r0, r30
    19ae:	3a f0       	brmi	.+14     	; 0x19be <__divsf3_pse+0x3a>
    19b0:	e0 e8       	ldi	r30, 0x80	; 128
    19b2:	30 d0       	rcall	.+96     	; 0x1a14 <__divsf3_pse+0x90>
    19b4:	91 50       	subi	r25, 0x01	; 1
    19b6:	50 40       	sbci	r21, 0x00	; 0
    19b8:	e6 95       	lsr	r30
    19ba:	00 1c       	adc	r0, r0
    19bc:	ca f7       	brpl	.-14     	; 0x19b0 <__divsf3_pse+0x2c>
    19be:	29 d0       	rcall	.+82     	; 0x1a12 <__divsf3_pse+0x8e>
    19c0:	fe 2f       	mov	r31, r30
    19c2:	27 d0       	rcall	.+78     	; 0x1a12 <__divsf3_pse+0x8e>
    19c4:	66 0f       	add	r22, r22
    19c6:	77 1f       	adc	r23, r23
    19c8:	88 1f       	adc	r24, r24
    19ca:	bb 1f       	adc	r27, r27
    19cc:	26 17       	cp	r18, r22
    19ce:	37 07       	cpc	r19, r23
    19d0:	48 07       	cpc	r20, r24
    19d2:	ab 07       	cpc	r26, r27
    19d4:	b0 e8       	ldi	r27, 0x80	; 128
    19d6:	09 f0       	breq	.+2      	; 0x19da <__divsf3_pse+0x56>
    19d8:	bb 0b       	sbc	r27, r27
    19da:	80 2d       	mov	r24, r0
    19dc:	bf 01       	movw	r22, r30
    19de:	ff 27       	eor	r31, r31
    19e0:	93 58       	subi	r25, 0x83	; 131
    19e2:	5f 4f       	sbci	r21, 0xFF	; 255
    19e4:	2a f0       	brmi	.+10     	; 0x19f0 <__divsf3_pse+0x6c>
    19e6:	9e 3f       	cpi	r25, 0xFE	; 254
    19e8:	51 05       	cpc	r21, r1
    19ea:	68 f0       	brcs	.+26     	; 0x1a06 <__divsf3_pse+0x82>
    19ec:	8d c0       	rjmp	.+282    	; 0x1b08 <__fp_inf>
    19ee:	d7 c0       	rjmp	.+430    	; 0x1b9e <__fp_szero>
    19f0:	5f 3f       	cpi	r21, 0xFF	; 255
    19f2:	ec f3       	brlt	.-6      	; 0x19ee <__divsf3_pse+0x6a>
    19f4:	98 3e       	cpi	r25, 0xE8	; 232
    19f6:	dc f3       	brlt	.-10     	; 0x19ee <__divsf3_pse+0x6a>
    19f8:	86 95       	lsr	r24
    19fa:	77 95       	ror	r23
    19fc:	67 95       	ror	r22
    19fe:	b7 95       	ror	r27
    1a00:	f7 95       	ror	r31
    1a02:	9f 5f       	subi	r25, 0xFF	; 255
    1a04:	c9 f7       	brne	.-14     	; 0x19f8 <__divsf3_pse+0x74>
    1a06:	88 0f       	add	r24, r24
    1a08:	91 1d       	adc	r25, r1
    1a0a:	96 95       	lsr	r25
    1a0c:	87 95       	ror	r24
    1a0e:	97 f9       	bld	r25, 7
    1a10:	08 95       	ret
    1a12:	e1 e0       	ldi	r30, 0x01	; 1
    1a14:	66 0f       	add	r22, r22
    1a16:	77 1f       	adc	r23, r23
    1a18:	88 1f       	adc	r24, r24
    1a1a:	bb 1f       	adc	r27, r27
    1a1c:	62 17       	cp	r22, r18
    1a1e:	73 07       	cpc	r23, r19
    1a20:	84 07       	cpc	r24, r20
    1a22:	ba 07       	cpc	r27, r26
    1a24:	20 f0       	brcs	.+8      	; 0x1a2e <__divsf3_pse+0xaa>
    1a26:	62 1b       	sub	r22, r18
    1a28:	73 0b       	sbc	r23, r19
    1a2a:	84 0b       	sbc	r24, r20
    1a2c:	ba 0b       	sbc	r27, r26
    1a2e:	ee 1f       	adc	r30, r30
    1a30:	88 f7       	brcc	.-30     	; 0x1a14 <__divsf3_pse+0x90>
    1a32:	e0 95       	com	r30
    1a34:	08 95       	ret

00001a36 <__fixunssfsi>:
    1a36:	98 d0       	rcall	.+304    	; 0x1b68 <__fp_splitA>
    1a38:	88 f0       	brcs	.+34     	; 0x1a5c <__fixunssfsi+0x26>
    1a3a:	9f 57       	subi	r25, 0x7F	; 127
    1a3c:	90 f0       	brcs	.+36     	; 0x1a62 <__fixunssfsi+0x2c>
    1a3e:	b9 2f       	mov	r27, r25
    1a40:	99 27       	eor	r25, r25
    1a42:	b7 51       	subi	r27, 0x17	; 23
    1a44:	a0 f0       	brcs	.+40     	; 0x1a6e <__fixunssfsi+0x38>
    1a46:	d1 f0       	breq	.+52     	; 0x1a7c <__fixunssfsi+0x46>
    1a48:	66 0f       	add	r22, r22
    1a4a:	77 1f       	adc	r23, r23
    1a4c:	88 1f       	adc	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	1a f0       	brmi	.+6      	; 0x1a58 <__fixunssfsi+0x22>
    1a52:	ba 95       	dec	r27
    1a54:	c9 f7       	brne	.-14     	; 0x1a48 <__fixunssfsi+0x12>
    1a56:	12 c0       	rjmp	.+36     	; 0x1a7c <__fixunssfsi+0x46>
    1a58:	b1 30       	cpi	r27, 0x01	; 1
    1a5a:	81 f0       	breq	.+32     	; 0x1a7c <__fixunssfsi+0x46>
    1a5c:	9f d0       	rcall	.+318    	; 0x1b9c <__fp_zero>
    1a5e:	b1 e0       	ldi	r27, 0x01	; 1
    1a60:	08 95       	ret
    1a62:	9c c0       	rjmp	.+312    	; 0x1b9c <__fp_zero>
    1a64:	67 2f       	mov	r22, r23
    1a66:	78 2f       	mov	r23, r24
    1a68:	88 27       	eor	r24, r24
    1a6a:	b8 5f       	subi	r27, 0xF8	; 248
    1a6c:	39 f0       	breq	.+14     	; 0x1a7c <__fixunssfsi+0x46>
    1a6e:	b9 3f       	cpi	r27, 0xF9	; 249
    1a70:	cc f3       	brlt	.-14     	; 0x1a64 <__fixunssfsi+0x2e>
    1a72:	86 95       	lsr	r24
    1a74:	77 95       	ror	r23
    1a76:	67 95       	ror	r22
    1a78:	b3 95       	inc	r27
    1a7a:	d9 f7       	brne	.-10     	; 0x1a72 <__fixunssfsi+0x3c>
    1a7c:	3e f4       	brtc	.+14     	; 0x1a8c <__fixunssfsi+0x56>
    1a7e:	90 95       	com	r25
    1a80:	80 95       	com	r24
    1a82:	70 95       	com	r23
    1a84:	61 95       	neg	r22
    1a86:	7f 4f       	sbci	r23, 0xFF	; 255
    1a88:	8f 4f       	sbci	r24, 0xFF	; 255
    1a8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8c:	08 95       	ret

00001a8e <__floatunsisf>:
    1a8e:	e8 94       	clt
    1a90:	09 c0       	rjmp	.+18     	; 0x1aa4 <__floatsisf+0x12>

00001a92 <__floatsisf>:
    1a92:	97 fb       	bst	r25, 7
    1a94:	3e f4       	brtc	.+14     	; 0x1aa4 <__floatsisf+0x12>
    1a96:	90 95       	com	r25
    1a98:	80 95       	com	r24
    1a9a:	70 95       	com	r23
    1a9c:	61 95       	neg	r22
    1a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa0:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa4:	99 23       	and	r25, r25
    1aa6:	a9 f0       	breq	.+42     	; 0x1ad2 <__floatsisf+0x40>
    1aa8:	f9 2f       	mov	r31, r25
    1aaa:	96 e9       	ldi	r25, 0x96	; 150
    1aac:	bb 27       	eor	r27, r27
    1aae:	93 95       	inc	r25
    1ab0:	f6 95       	lsr	r31
    1ab2:	87 95       	ror	r24
    1ab4:	77 95       	ror	r23
    1ab6:	67 95       	ror	r22
    1ab8:	b7 95       	ror	r27
    1aba:	f1 11       	cpse	r31, r1
    1abc:	f8 cf       	rjmp	.-16     	; 0x1aae <__floatsisf+0x1c>
    1abe:	fa f4       	brpl	.+62     	; 0x1afe <__floatsisf+0x6c>
    1ac0:	bb 0f       	add	r27, r27
    1ac2:	11 f4       	brne	.+4      	; 0x1ac8 <__floatsisf+0x36>
    1ac4:	60 ff       	sbrs	r22, 0
    1ac6:	1b c0       	rjmp	.+54     	; 0x1afe <__floatsisf+0x6c>
    1ac8:	6f 5f       	subi	r22, 0xFF	; 255
    1aca:	7f 4f       	sbci	r23, 0xFF	; 255
    1acc:	8f 4f       	sbci	r24, 0xFF	; 255
    1ace:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad0:	16 c0       	rjmp	.+44     	; 0x1afe <__floatsisf+0x6c>
    1ad2:	88 23       	and	r24, r24
    1ad4:	11 f0       	breq	.+4      	; 0x1ada <__floatsisf+0x48>
    1ad6:	96 e9       	ldi	r25, 0x96	; 150
    1ad8:	11 c0       	rjmp	.+34     	; 0x1afc <__floatsisf+0x6a>
    1ada:	77 23       	and	r23, r23
    1adc:	21 f0       	breq	.+8      	; 0x1ae6 <__floatsisf+0x54>
    1ade:	9e e8       	ldi	r25, 0x8E	; 142
    1ae0:	87 2f       	mov	r24, r23
    1ae2:	76 2f       	mov	r23, r22
    1ae4:	05 c0       	rjmp	.+10     	; 0x1af0 <__floatsisf+0x5e>
    1ae6:	66 23       	and	r22, r22
    1ae8:	71 f0       	breq	.+28     	; 0x1b06 <__floatsisf+0x74>
    1aea:	96 e8       	ldi	r25, 0x86	; 134
    1aec:	86 2f       	mov	r24, r22
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	60 e0       	ldi	r22, 0x00	; 0
    1af2:	2a f0       	brmi	.+10     	; 0x1afe <__floatsisf+0x6c>
    1af4:	9a 95       	dec	r25
    1af6:	66 0f       	add	r22, r22
    1af8:	77 1f       	adc	r23, r23
    1afa:	88 1f       	adc	r24, r24
    1afc:	da f7       	brpl	.-10     	; 0x1af4 <__floatsisf+0x62>
    1afe:	88 0f       	add	r24, r24
    1b00:	96 95       	lsr	r25
    1b02:	87 95       	ror	r24
    1b04:	97 f9       	bld	r25, 7
    1b06:	08 95       	ret

00001b08 <__fp_inf>:
    1b08:	97 f9       	bld	r25, 7
    1b0a:	9f 67       	ori	r25, 0x7F	; 127
    1b0c:	80 e8       	ldi	r24, 0x80	; 128
    1b0e:	70 e0       	ldi	r23, 0x00	; 0
    1b10:	60 e0       	ldi	r22, 0x00	; 0
    1b12:	08 95       	ret

00001b14 <__fp_nan>:
    1b14:	9f ef       	ldi	r25, 0xFF	; 255
    1b16:	80 ec       	ldi	r24, 0xC0	; 192
    1b18:	08 95       	ret

00001b1a <__fp_pscA>:
    1b1a:	00 24       	eor	r0, r0
    1b1c:	0a 94       	dec	r0
    1b1e:	16 16       	cp	r1, r22
    1b20:	17 06       	cpc	r1, r23
    1b22:	18 06       	cpc	r1, r24
    1b24:	09 06       	cpc	r0, r25
    1b26:	08 95       	ret

00001b28 <__fp_pscB>:
    1b28:	00 24       	eor	r0, r0
    1b2a:	0a 94       	dec	r0
    1b2c:	12 16       	cp	r1, r18
    1b2e:	13 06       	cpc	r1, r19
    1b30:	14 06       	cpc	r1, r20
    1b32:	05 06       	cpc	r0, r21
    1b34:	08 95       	ret

00001b36 <__fp_round>:
    1b36:	09 2e       	mov	r0, r25
    1b38:	03 94       	inc	r0
    1b3a:	00 0c       	add	r0, r0
    1b3c:	11 f4       	brne	.+4      	; 0x1b42 <__fp_round+0xc>
    1b3e:	88 23       	and	r24, r24
    1b40:	52 f0       	brmi	.+20     	; 0x1b56 <__fp_round+0x20>
    1b42:	bb 0f       	add	r27, r27
    1b44:	40 f4       	brcc	.+16     	; 0x1b56 <__fp_round+0x20>
    1b46:	bf 2b       	or	r27, r31
    1b48:	11 f4       	brne	.+4      	; 0x1b4e <__fp_round+0x18>
    1b4a:	60 ff       	sbrs	r22, 0
    1b4c:	04 c0       	rjmp	.+8      	; 0x1b56 <__fp_round+0x20>
    1b4e:	6f 5f       	subi	r22, 0xFF	; 255
    1b50:	7f 4f       	sbci	r23, 0xFF	; 255
    1b52:	8f 4f       	sbci	r24, 0xFF	; 255
    1b54:	9f 4f       	sbci	r25, 0xFF	; 255
    1b56:	08 95       	ret

00001b58 <__fp_split3>:
    1b58:	57 fd       	sbrc	r21, 7
    1b5a:	90 58       	subi	r25, 0x80	; 128
    1b5c:	44 0f       	add	r20, r20
    1b5e:	55 1f       	adc	r21, r21
    1b60:	59 f0       	breq	.+22     	; 0x1b78 <__fp_splitA+0x10>
    1b62:	5f 3f       	cpi	r21, 0xFF	; 255
    1b64:	71 f0       	breq	.+28     	; 0x1b82 <__fp_splitA+0x1a>
    1b66:	47 95       	ror	r20

00001b68 <__fp_splitA>:
    1b68:	88 0f       	add	r24, r24
    1b6a:	97 fb       	bst	r25, 7
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	61 f0       	breq	.+24     	; 0x1b88 <__fp_splitA+0x20>
    1b70:	9f 3f       	cpi	r25, 0xFF	; 255
    1b72:	79 f0       	breq	.+30     	; 0x1b92 <__fp_splitA+0x2a>
    1b74:	87 95       	ror	r24
    1b76:	08 95       	ret
    1b78:	12 16       	cp	r1, r18
    1b7a:	13 06       	cpc	r1, r19
    1b7c:	14 06       	cpc	r1, r20
    1b7e:	55 1f       	adc	r21, r21
    1b80:	f2 cf       	rjmp	.-28     	; 0x1b66 <__fp_split3+0xe>
    1b82:	46 95       	lsr	r20
    1b84:	f1 df       	rcall	.-30     	; 0x1b68 <__fp_splitA>
    1b86:	08 c0       	rjmp	.+16     	; 0x1b98 <__fp_splitA+0x30>
    1b88:	16 16       	cp	r1, r22
    1b8a:	17 06       	cpc	r1, r23
    1b8c:	18 06       	cpc	r1, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	f1 cf       	rjmp	.-30     	; 0x1b74 <__fp_splitA+0xc>
    1b92:	86 95       	lsr	r24
    1b94:	71 05       	cpc	r23, r1
    1b96:	61 05       	cpc	r22, r1
    1b98:	08 94       	sec
    1b9a:	08 95       	ret

00001b9c <__fp_zero>:
    1b9c:	e8 94       	clt

00001b9e <__fp_szero>:
    1b9e:	bb 27       	eor	r27, r27
    1ba0:	66 27       	eor	r22, r22
    1ba2:	77 27       	eor	r23, r23
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	97 f9       	bld	r25, 7
    1ba8:	08 95       	ret

00001baa <__mulsf3>:
    1baa:	0b d0       	rcall	.+22     	; 0x1bc2 <__mulsf3x>
    1bac:	c4 cf       	rjmp	.-120    	; 0x1b36 <__fp_round>
    1bae:	b5 df       	rcall	.-150    	; 0x1b1a <__fp_pscA>
    1bb0:	28 f0       	brcs	.+10     	; 0x1bbc <__mulsf3+0x12>
    1bb2:	ba df       	rcall	.-140    	; 0x1b28 <__fp_pscB>
    1bb4:	18 f0       	brcs	.+6      	; 0x1bbc <__mulsf3+0x12>
    1bb6:	95 23       	and	r25, r21
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <__mulsf3+0x12>
    1bba:	a6 cf       	rjmp	.-180    	; 0x1b08 <__fp_inf>
    1bbc:	ab cf       	rjmp	.-170    	; 0x1b14 <__fp_nan>
    1bbe:	11 24       	eor	r1, r1
    1bc0:	ee cf       	rjmp	.-36     	; 0x1b9e <__fp_szero>

00001bc2 <__mulsf3x>:
    1bc2:	ca df       	rcall	.-108    	; 0x1b58 <__fp_split3>
    1bc4:	a0 f3       	brcs	.-24     	; 0x1bae <__mulsf3+0x4>

00001bc6 <__mulsf3_pse>:
    1bc6:	95 9f       	mul	r25, r21
    1bc8:	d1 f3       	breq	.-12     	; 0x1bbe <__mulsf3+0x14>
    1bca:	95 0f       	add	r25, r21
    1bcc:	50 e0       	ldi	r21, 0x00	; 0
    1bce:	55 1f       	adc	r21, r21
    1bd0:	62 9f       	mul	r22, r18
    1bd2:	f0 01       	movw	r30, r0
    1bd4:	72 9f       	mul	r23, r18
    1bd6:	bb 27       	eor	r27, r27
    1bd8:	f0 0d       	add	r31, r0
    1bda:	b1 1d       	adc	r27, r1
    1bdc:	63 9f       	mul	r22, r19
    1bde:	aa 27       	eor	r26, r26
    1be0:	f0 0d       	add	r31, r0
    1be2:	b1 1d       	adc	r27, r1
    1be4:	aa 1f       	adc	r26, r26
    1be6:	64 9f       	mul	r22, r20
    1be8:	66 27       	eor	r22, r22
    1bea:	b0 0d       	add	r27, r0
    1bec:	a1 1d       	adc	r26, r1
    1bee:	66 1f       	adc	r22, r22
    1bf0:	82 9f       	mul	r24, r18
    1bf2:	22 27       	eor	r18, r18
    1bf4:	b0 0d       	add	r27, r0
    1bf6:	a1 1d       	adc	r26, r1
    1bf8:	62 1f       	adc	r22, r18
    1bfa:	73 9f       	mul	r23, r19
    1bfc:	b0 0d       	add	r27, r0
    1bfe:	a1 1d       	adc	r26, r1
    1c00:	62 1f       	adc	r22, r18
    1c02:	83 9f       	mul	r24, r19
    1c04:	a0 0d       	add	r26, r0
    1c06:	61 1d       	adc	r22, r1
    1c08:	22 1f       	adc	r18, r18
    1c0a:	74 9f       	mul	r23, r20
    1c0c:	33 27       	eor	r19, r19
    1c0e:	a0 0d       	add	r26, r0
    1c10:	61 1d       	adc	r22, r1
    1c12:	23 1f       	adc	r18, r19
    1c14:	84 9f       	mul	r24, r20
    1c16:	60 0d       	add	r22, r0
    1c18:	21 1d       	adc	r18, r1
    1c1a:	82 2f       	mov	r24, r18
    1c1c:	76 2f       	mov	r23, r22
    1c1e:	6a 2f       	mov	r22, r26
    1c20:	11 24       	eor	r1, r1
    1c22:	9f 57       	subi	r25, 0x7F	; 127
    1c24:	50 40       	sbci	r21, 0x00	; 0
    1c26:	8a f0       	brmi	.+34     	; 0x1c4a <__mulsf3_pse+0x84>
    1c28:	e1 f0       	breq	.+56     	; 0x1c62 <__mulsf3_pse+0x9c>
    1c2a:	88 23       	and	r24, r24
    1c2c:	4a f0       	brmi	.+18     	; 0x1c40 <__mulsf3_pse+0x7a>
    1c2e:	ee 0f       	add	r30, r30
    1c30:	ff 1f       	adc	r31, r31
    1c32:	bb 1f       	adc	r27, r27
    1c34:	66 1f       	adc	r22, r22
    1c36:	77 1f       	adc	r23, r23
    1c38:	88 1f       	adc	r24, r24
    1c3a:	91 50       	subi	r25, 0x01	; 1
    1c3c:	50 40       	sbci	r21, 0x00	; 0
    1c3e:	a9 f7       	brne	.-22     	; 0x1c2a <__mulsf3_pse+0x64>
    1c40:	9e 3f       	cpi	r25, 0xFE	; 254
    1c42:	51 05       	cpc	r21, r1
    1c44:	70 f0       	brcs	.+28     	; 0x1c62 <__mulsf3_pse+0x9c>
    1c46:	60 cf       	rjmp	.-320    	; 0x1b08 <__fp_inf>
    1c48:	aa cf       	rjmp	.-172    	; 0x1b9e <__fp_szero>
    1c4a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c4c:	ec f3       	brlt	.-6      	; 0x1c48 <__mulsf3_pse+0x82>
    1c4e:	98 3e       	cpi	r25, 0xE8	; 232
    1c50:	dc f3       	brlt	.-10     	; 0x1c48 <__mulsf3_pse+0x82>
    1c52:	86 95       	lsr	r24
    1c54:	77 95       	ror	r23
    1c56:	67 95       	ror	r22
    1c58:	b7 95       	ror	r27
    1c5a:	f7 95       	ror	r31
    1c5c:	e7 95       	ror	r30
    1c5e:	9f 5f       	subi	r25, 0xFF	; 255
    1c60:	c1 f7       	brne	.-16     	; 0x1c52 <__mulsf3_pse+0x8c>
    1c62:	fe 2b       	or	r31, r30
    1c64:	88 0f       	add	r24, r24
    1c66:	91 1d       	adc	r25, r1
    1c68:	96 95       	lsr	r25
    1c6a:	87 95       	ror	r24
    1c6c:	97 f9       	bld	r25, 7
    1c6e:	08 95       	ret

00001c70 <__udivmodsi4>:
    1c70:	a1 e2       	ldi	r26, 0x21	; 33
    1c72:	1a 2e       	mov	r1, r26
    1c74:	aa 1b       	sub	r26, r26
    1c76:	bb 1b       	sub	r27, r27
    1c78:	fd 01       	movw	r30, r26
    1c7a:	0d c0       	rjmp	.+26     	; 0x1c96 <__udivmodsi4_ep>

00001c7c <__udivmodsi4_loop>:
    1c7c:	aa 1f       	adc	r26, r26
    1c7e:	bb 1f       	adc	r27, r27
    1c80:	ee 1f       	adc	r30, r30
    1c82:	ff 1f       	adc	r31, r31
    1c84:	a2 17       	cp	r26, r18
    1c86:	b3 07       	cpc	r27, r19
    1c88:	e4 07       	cpc	r30, r20
    1c8a:	f5 07       	cpc	r31, r21
    1c8c:	20 f0       	brcs	.+8      	; 0x1c96 <__udivmodsi4_ep>
    1c8e:	a2 1b       	sub	r26, r18
    1c90:	b3 0b       	sbc	r27, r19
    1c92:	e4 0b       	sbc	r30, r20
    1c94:	f5 0b       	sbc	r31, r21

00001c96 <__udivmodsi4_ep>:
    1c96:	66 1f       	adc	r22, r22
    1c98:	77 1f       	adc	r23, r23
    1c9a:	88 1f       	adc	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	1a 94       	dec	r1
    1ca0:	69 f7       	brne	.-38     	; 0x1c7c <__udivmodsi4_loop>
    1ca2:	60 95       	com	r22
    1ca4:	70 95       	com	r23
    1ca6:	80 95       	com	r24
    1ca8:	90 95       	com	r25
    1caa:	9b 01       	movw	r18, r22
    1cac:	ac 01       	movw	r20, r24
    1cae:	bd 01       	movw	r22, r26
    1cb0:	cf 01       	movw	r24, r30
    1cb2:	08 95       	ret

00001cb4 <__umulhisi3>:
    1cb4:	a2 9f       	mul	r26, r18
    1cb6:	b0 01       	movw	r22, r0
    1cb8:	b3 9f       	mul	r27, r19
    1cba:	c0 01       	movw	r24, r0
    1cbc:	a3 9f       	mul	r26, r19
    1cbe:	70 0d       	add	r23, r0
    1cc0:	81 1d       	adc	r24, r1
    1cc2:	11 24       	eor	r1, r1
    1cc4:	91 1d       	adc	r25, r1
    1cc6:	b2 9f       	mul	r27, r18
    1cc8:	70 0d       	add	r23, r0
    1cca:	81 1d       	adc	r24, r1
    1ccc:	11 24       	eor	r1, r1
    1cce:	91 1d       	adc	r25, r1
    1cd0:	08 95       	ret

00001cd2 <sprintf>:
    1cd2:	0f 93       	push	r16
    1cd4:	1f 93       	push	r17
    1cd6:	cf 93       	push	r28
    1cd8:	df 93       	push	r29
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	2e 97       	sbiw	r28, 0x0e	; 14
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
    1cea:	0d 89       	ldd	r16, Y+21	; 0x15
    1cec:	1e 89       	ldd	r17, Y+22	; 0x16
    1cee:	86 e0       	ldi	r24, 0x06	; 6
    1cf0:	8c 83       	std	Y+4, r24	; 0x04
    1cf2:	1a 83       	std	Y+2, r17	; 0x02
    1cf4:	09 83       	std	Y+1, r16	; 0x01
    1cf6:	8f ef       	ldi	r24, 0xFF	; 255
    1cf8:	9f e7       	ldi	r25, 0x7F	; 127
    1cfa:	9e 83       	std	Y+6, r25	; 0x06
    1cfc:	8d 83       	std	Y+5, r24	; 0x05
    1cfe:	ae 01       	movw	r20, r28
    1d00:	47 5e       	subi	r20, 0xE7	; 231
    1d02:	5f 4f       	sbci	r21, 0xFF	; 255
    1d04:	6f 89       	ldd	r22, Y+23	; 0x17
    1d06:	78 8d       	ldd	r23, Y+24	; 0x18
    1d08:	ce 01       	movw	r24, r28
    1d0a:	01 96       	adiw	r24, 0x01	; 1
    1d0c:	10 d0       	rcall	.+32     	; 0x1d2e <vfprintf>
    1d0e:	ef 81       	ldd	r30, Y+7	; 0x07
    1d10:	f8 85       	ldd	r31, Y+8	; 0x08
    1d12:	e0 0f       	add	r30, r16
    1d14:	f1 1f       	adc	r31, r17
    1d16:	10 82       	st	Z, r1
    1d18:	2e 96       	adiw	r28, 0x0e	; 14
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	de bf       	out	0x3e, r29	; 62
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	cd bf       	out	0x3d, r28	; 61
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	1f 91       	pop	r17
    1d2a:	0f 91       	pop	r16
    1d2c:	08 95       	ret

00001d2e <vfprintf>:
    1d2e:	2f 92       	push	r2
    1d30:	3f 92       	push	r3
    1d32:	4f 92       	push	r4
    1d34:	5f 92       	push	r5
    1d36:	6f 92       	push	r6
    1d38:	7f 92       	push	r7
    1d3a:	8f 92       	push	r8
    1d3c:	9f 92       	push	r9
    1d3e:	af 92       	push	r10
    1d40:	bf 92       	push	r11
    1d42:	cf 92       	push	r12
    1d44:	df 92       	push	r13
    1d46:	ef 92       	push	r14
    1d48:	ff 92       	push	r15
    1d4a:	0f 93       	push	r16
    1d4c:	1f 93       	push	r17
    1d4e:	cf 93       	push	r28
    1d50:	df 93       	push	r29
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	2b 97       	sbiw	r28, 0x0b	; 11
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
    1d62:	6c 01       	movw	r12, r24
    1d64:	7b 01       	movw	r14, r22
    1d66:	8a 01       	movw	r16, r20
    1d68:	fc 01       	movw	r30, r24
    1d6a:	17 82       	std	Z+7, r1	; 0x07
    1d6c:	16 82       	std	Z+6, r1	; 0x06
    1d6e:	83 81       	ldd	r24, Z+3	; 0x03
    1d70:	81 ff       	sbrs	r24, 1
    1d72:	bf c1       	rjmp	.+894    	; 0x20f2 <vfprintf+0x3c4>
    1d74:	ce 01       	movw	r24, r28
    1d76:	01 96       	adiw	r24, 0x01	; 1
    1d78:	3c 01       	movw	r6, r24
    1d7a:	f6 01       	movw	r30, r12
    1d7c:	93 81       	ldd	r25, Z+3	; 0x03
    1d7e:	f7 01       	movw	r30, r14
    1d80:	93 fd       	sbrc	r25, 3
    1d82:	85 91       	lpm	r24, Z+
    1d84:	93 ff       	sbrs	r25, 3
    1d86:	81 91       	ld	r24, Z+
    1d88:	7f 01       	movw	r14, r30
    1d8a:	88 23       	and	r24, r24
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <vfprintf+0x62>
    1d8e:	ad c1       	rjmp	.+858    	; 0x20ea <vfprintf+0x3bc>
    1d90:	85 32       	cpi	r24, 0x25	; 37
    1d92:	39 f4       	brne	.+14     	; 0x1da2 <vfprintf+0x74>
    1d94:	93 fd       	sbrc	r25, 3
    1d96:	85 91       	lpm	r24, Z+
    1d98:	93 ff       	sbrs	r25, 3
    1d9a:	81 91       	ld	r24, Z+
    1d9c:	7f 01       	movw	r14, r30
    1d9e:	85 32       	cpi	r24, 0x25	; 37
    1da0:	21 f4       	brne	.+8      	; 0x1daa <vfprintf+0x7c>
    1da2:	b6 01       	movw	r22, r12
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	d6 d1       	rcall	.+940    	; 0x2154 <fputc>
    1da8:	e8 cf       	rjmp	.-48     	; 0x1d7a <vfprintf+0x4c>
    1daa:	91 2c       	mov	r9, r1
    1dac:	21 2c       	mov	r2, r1
    1dae:	31 2c       	mov	r3, r1
    1db0:	ff e1       	ldi	r31, 0x1F	; 31
    1db2:	f3 15       	cp	r31, r3
    1db4:	d8 f0       	brcs	.+54     	; 0x1dec <vfprintf+0xbe>
    1db6:	8b 32       	cpi	r24, 0x2B	; 43
    1db8:	79 f0       	breq	.+30     	; 0x1dd8 <vfprintf+0xaa>
    1dba:	38 f4       	brcc	.+14     	; 0x1dca <vfprintf+0x9c>
    1dbc:	80 32       	cpi	r24, 0x20	; 32
    1dbe:	79 f0       	breq	.+30     	; 0x1dde <vfprintf+0xb0>
    1dc0:	83 32       	cpi	r24, 0x23	; 35
    1dc2:	a1 f4       	brne	.+40     	; 0x1dec <vfprintf+0xbe>
    1dc4:	23 2d       	mov	r18, r3
    1dc6:	20 61       	ori	r18, 0x10	; 16
    1dc8:	1d c0       	rjmp	.+58     	; 0x1e04 <vfprintf+0xd6>
    1dca:	8d 32       	cpi	r24, 0x2D	; 45
    1dcc:	61 f0       	breq	.+24     	; 0x1de6 <vfprintf+0xb8>
    1dce:	80 33       	cpi	r24, 0x30	; 48
    1dd0:	69 f4       	brne	.+26     	; 0x1dec <vfprintf+0xbe>
    1dd2:	23 2d       	mov	r18, r3
    1dd4:	21 60       	ori	r18, 0x01	; 1
    1dd6:	16 c0       	rjmp	.+44     	; 0x1e04 <vfprintf+0xd6>
    1dd8:	83 2d       	mov	r24, r3
    1dda:	82 60       	ori	r24, 0x02	; 2
    1ddc:	38 2e       	mov	r3, r24
    1dde:	e3 2d       	mov	r30, r3
    1de0:	e4 60       	ori	r30, 0x04	; 4
    1de2:	3e 2e       	mov	r3, r30
    1de4:	2a c0       	rjmp	.+84     	; 0x1e3a <vfprintf+0x10c>
    1de6:	f3 2d       	mov	r31, r3
    1de8:	f8 60       	ori	r31, 0x08	; 8
    1dea:	1d c0       	rjmp	.+58     	; 0x1e26 <vfprintf+0xf8>
    1dec:	37 fc       	sbrc	r3, 7
    1dee:	2d c0       	rjmp	.+90     	; 0x1e4a <vfprintf+0x11c>
    1df0:	20 ed       	ldi	r18, 0xD0	; 208
    1df2:	28 0f       	add	r18, r24
    1df4:	2a 30       	cpi	r18, 0x0A	; 10
    1df6:	40 f0       	brcs	.+16     	; 0x1e08 <vfprintf+0xda>
    1df8:	8e 32       	cpi	r24, 0x2E	; 46
    1dfa:	b9 f4       	brne	.+46     	; 0x1e2a <vfprintf+0xfc>
    1dfc:	36 fc       	sbrc	r3, 6
    1dfe:	75 c1       	rjmp	.+746    	; 0x20ea <vfprintf+0x3bc>
    1e00:	23 2d       	mov	r18, r3
    1e02:	20 64       	ori	r18, 0x40	; 64
    1e04:	32 2e       	mov	r3, r18
    1e06:	19 c0       	rjmp	.+50     	; 0x1e3a <vfprintf+0x10c>
    1e08:	36 fe       	sbrs	r3, 6
    1e0a:	06 c0       	rjmp	.+12     	; 0x1e18 <vfprintf+0xea>
    1e0c:	8a e0       	ldi	r24, 0x0A	; 10
    1e0e:	98 9e       	mul	r9, r24
    1e10:	20 0d       	add	r18, r0
    1e12:	11 24       	eor	r1, r1
    1e14:	92 2e       	mov	r9, r18
    1e16:	11 c0       	rjmp	.+34     	; 0x1e3a <vfprintf+0x10c>
    1e18:	ea e0       	ldi	r30, 0x0A	; 10
    1e1a:	2e 9e       	mul	r2, r30
    1e1c:	20 0d       	add	r18, r0
    1e1e:	11 24       	eor	r1, r1
    1e20:	22 2e       	mov	r2, r18
    1e22:	f3 2d       	mov	r31, r3
    1e24:	f0 62       	ori	r31, 0x20	; 32
    1e26:	3f 2e       	mov	r3, r31
    1e28:	08 c0       	rjmp	.+16     	; 0x1e3a <vfprintf+0x10c>
    1e2a:	8c 36       	cpi	r24, 0x6C	; 108
    1e2c:	21 f4       	brne	.+8      	; 0x1e36 <vfprintf+0x108>
    1e2e:	83 2d       	mov	r24, r3
    1e30:	80 68       	ori	r24, 0x80	; 128
    1e32:	38 2e       	mov	r3, r24
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <vfprintf+0x10c>
    1e36:	88 36       	cpi	r24, 0x68	; 104
    1e38:	41 f4       	brne	.+16     	; 0x1e4a <vfprintf+0x11c>
    1e3a:	f7 01       	movw	r30, r14
    1e3c:	93 fd       	sbrc	r25, 3
    1e3e:	85 91       	lpm	r24, Z+
    1e40:	93 ff       	sbrs	r25, 3
    1e42:	81 91       	ld	r24, Z+
    1e44:	7f 01       	movw	r14, r30
    1e46:	81 11       	cpse	r24, r1
    1e48:	b3 cf       	rjmp	.-154    	; 0x1db0 <vfprintf+0x82>
    1e4a:	98 2f       	mov	r25, r24
    1e4c:	9f 7d       	andi	r25, 0xDF	; 223
    1e4e:	95 54       	subi	r25, 0x45	; 69
    1e50:	93 30       	cpi	r25, 0x03	; 3
    1e52:	28 f4       	brcc	.+10     	; 0x1e5e <vfprintf+0x130>
    1e54:	0c 5f       	subi	r16, 0xFC	; 252
    1e56:	1f 4f       	sbci	r17, 0xFF	; 255
    1e58:	9f e3       	ldi	r25, 0x3F	; 63
    1e5a:	99 83       	std	Y+1, r25	; 0x01
    1e5c:	0d c0       	rjmp	.+26     	; 0x1e78 <vfprintf+0x14a>
    1e5e:	83 36       	cpi	r24, 0x63	; 99
    1e60:	31 f0       	breq	.+12     	; 0x1e6e <vfprintf+0x140>
    1e62:	83 37       	cpi	r24, 0x73	; 115
    1e64:	71 f0       	breq	.+28     	; 0x1e82 <vfprintf+0x154>
    1e66:	83 35       	cpi	r24, 0x53	; 83
    1e68:	09 f0       	breq	.+2      	; 0x1e6c <vfprintf+0x13e>
    1e6a:	55 c0       	rjmp	.+170    	; 0x1f16 <vfprintf+0x1e8>
    1e6c:	20 c0       	rjmp	.+64     	; 0x1eae <vfprintf+0x180>
    1e6e:	f8 01       	movw	r30, r16
    1e70:	80 81       	ld	r24, Z
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	0e 5f       	subi	r16, 0xFE	; 254
    1e76:	1f 4f       	sbci	r17, 0xFF	; 255
    1e78:	88 24       	eor	r8, r8
    1e7a:	83 94       	inc	r8
    1e7c:	91 2c       	mov	r9, r1
    1e7e:	53 01       	movw	r10, r6
    1e80:	12 c0       	rjmp	.+36     	; 0x1ea6 <vfprintf+0x178>
    1e82:	28 01       	movw	r4, r16
    1e84:	f2 e0       	ldi	r31, 0x02	; 2
    1e86:	4f 0e       	add	r4, r31
    1e88:	51 1c       	adc	r5, r1
    1e8a:	f8 01       	movw	r30, r16
    1e8c:	a0 80       	ld	r10, Z
    1e8e:	b1 80       	ldd	r11, Z+1	; 0x01
    1e90:	36 fe       	sbrs	r3, 6
    1e92:	03 c0       	rjmp	.+6      	; 0x1e9a <vfprintf+0x16c>
    1e94:	69 2d       	mov	r22, r9
    1e96:	70 e0       	ldi	r23, 0x00	; 0
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <vfprintf+0x170>
    1e9a:	6f ef       	ldi	r22, 0xFF	; 255
    1e9c:	7f ef       	ldi	r23, 0xFF	; 255
    1e9e:	c5 01       	movw	r24, r10
    1ea0:	4e d1       	rcall	.+668    	; 0x213e <strnlen>
    1ea2:	4c 01       	movw	r8, r24
    1ea4:	82 01       	movw	r16, r4
    1ea6:	f3 2d       	mov	r31, r3
    1ea8:	ff 77       	andi	r31, 0x7F	; 127
    1eaa:	3f 2e       	mov	r3, r31
    1eac:	15 c0       	rjmp	.+42     	; 0x1ed8 <vfprintf+0x1aa>
    1eae:	28 01       	movw	r4, r16
    1eb0:	22 e0       	ldi	r18, 0x02	; 2
    1eb2:	42 0e       	add	r4, r18
    1eb4:	51 1c       	adc	r5, r1
    1eb6:	f8 01       	movw	r30, r16
    1eb8:	a0 80       	ld	r10, Z
    1eba:	b1 80       	ldd	r11, Z+1	; 0x01
    1ebc:	36 fe       	sbrs	r3, 6
    1ebe:	03 c0       	rjmp	.+6      	; 0x1ec6 <vfprintf+0x198>
    1ec0:	69 2d       	mov	r22, r9
    1ec2:	70 e0       	ldi	r23, 0x00	; 0
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <vfprintf+0x19c>
    1ec6:	6f ef       	ldi	r22, 0xFF	; 255
    1ec8:	7f ef       	ldi	r23, 0xFF	; 255
    1eca:	c5 01       	movw	r24, r10
    1ecc:	2d d1       	rcall	.+602    	; 0x2128 <strnlen_P>
    1ece:	4c 01       	movw	r8, r24
    1ed0:	f3 2d       	mov	r31, r3
    1ed2:	f0 68       	ori	r31, 0x80	; 128
    1ed4:	3f 2e       	mov	r3, r31
    1ed6:	82 01       	movw	r16, r4
    1ed8:	33 fc       	sbrc	r3, 3
    1eda:	19 c0       	rjmp	.+50     	; 0x1f0e <vfprintf+0x1e0>
    1edc:	82 2d       	mov	r24, r2
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	88 16       	cp	r8, r24
    1ee2:	99 06       	cpc	r9, r25
    1ee4:	a0 f4       	brcc	.+40     	; 0x1f0e <vfprintf+0x1e0>
    1ee6:	b6 01       	movw	r22, r12
    1ee8:	80 e2       	ldi	r24, 0x20	; 32
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	33 d1       	rcall	.+614    	; 0x2154 <fputc>
    1eee:	2a 94       	dec	r2
    1ef0:	f5 cf       	rjmp	.-22     	; 0x1edc <vfprintf+0x1ae>
    1ef2:	f5 01       	movw	r30, r10
    1ef4:	37 fc       	sbrc	r3, 7
    1ef6:	85 91       	lpm	r24, Z+
    1ef8:	37 fe       	sbrs	r3, 7
    1efa:	81 91       	ld	r24, Z+
    1efc:	5f 01       	movw	r10, r30
    1efe:	b6 01       	movw	r22, r12
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	28 d1       	rcall	.+592    	; 0x2154 <fputc>
    1f04:	21 10       	cpse	r2, r1
    1f06:	2a 94       	dec	r2
    1f08:	21 e0       	ldi	r18, 0x01	; 1
    1f0a:	82 1a       	sub	r8, r18
    1f0c:	91 08       	sbc	r9, r1
    1f0e:	81 14       	cp	r8, r1
    1f10:	91 04       	cpc	r9, r1
    1f12:	79 f7       	brne	.-34     	; 0x1ef2 <vfprintf+0x1c4>
    1f14:	e1 c0       	rjmp	.+450    	; 0x20d8 <vfprintf+0x3aa>
    1f16:	84 36       	cpi	r24, 0x64	; 100
    1f18:	11 f0       	breq	.+4      	; 0x1f1e <vfprintf+0x1f0>
    1f1a:	89 36       	cpi	r24, 0x69	; 105
    1f1c:	39 f5       	brne	.+78     	; 0x1f6c <vfprintf+0x23e>
    1f1e:	f8 01       	movw	r30, r16
    1f20:	37 fe       	sbrs	r3, 7
    1f22:	07 c0       	rjmp	.+14     	; 0x1f32 <vfprintf+0x204>
    1f24:	60 81       	ld	r22, Z
    1f26:	71 81       	ldd	r23, Z+1	; 0x01
    1f28:	82 81       	ldd	r24, Z+2	; 0x02
    1f2a:	93 81       	ldd	r25, Z+3	; 0x03
    1f2c:	0c 5f       	subi	r16, 0xFC	; 252
    1f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f30:	08 c0       	rjmp	.+16     	; 0x1f42 <vfprintf+0x214>
    1f32:	60 81       	ld	r22, Z
    1f34:	71 81       	ldd	r23, Z+1	; 0x01
    1f36:	07 2e       	mov	r0, r23
    1f38:	00 0c       	add	r0, r0
    1f3a:	88 0b       	sbc	r24, r24
    1f3c:	99 0b       	sbc	r25, r25
    1f3e:	0e 5f       	subi	r16, 0xFE	; 254
    1f40:	1f 4f       	sbci	r17, 0xFF	; 255
    1f42:	f3 2d       	mov	r31, r3
    1f44:	ff 76       	andi	r31, 0x6F	; 111
    1f46:	3f 2e       	mov	r3, r31
    1f48:	97 ff       	sbrs	r25, 7
    1f4a:	09 c0       	rjmp	.+18     	; 0x1f5e <vfprintf+0x230>
    1f4c:	90 95       	com	r25
    1f4e:	80 95       	com	r24
    1f50:	70 95       	com	r23
    1f52:	61 95       	neg	r22
    1f54:	7f 4f       	sbci	r23, 0xFF	; 255
    1f56:	8f 4f       	sbci	r24, 0xFF	; 255
    1f58:	9f 4f       	sbci	r25, 0xFF	; 255
    1f5a:	f0 68       	ori	r31, 0x80	; 128
    1f5c:	3f 2e       	mov	r3, r31
    1f5e:	2a e0       	ldi	r18, 0x0A	; 10
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	a3 01       	movw	r20, r6
    1f64:	33 d1       	rcall	.+614    	; 0x21cc <__ultoa_invert>
    1f66:	88 2e       	mov	r8, r24
    1f68:	86 18       	sub	r8, r6
    1f6a:	44 c0       	rjmp	.+136    	; 0x1ff4 <vfprintf+0x2c6>
    1f6c:	85 37       	cpi	r24, 0x75	; 117
    1f6e:	31 f4       	brne	.+12     	; 0x1f7c <vfprintf+0x24e>
    1f70:	23 2d       	mov	r18, r3
    1f72:	2f 7e       	andi	r18, 0xEF	; 239
    1f74:	b2 2e       	mov	r11, r18
    1f76:	2a e0       	ldi	r18, 0x0A	; 10
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	25 c0       	rjmp	.+74     	; 0x1fc6 <vfprintf+0x298>
    1f7c:	93 2d       	mov	r25, r3
    1f7e:	99 7f       	andi	r25, 0xF9	; 249
    1f80:	b9 2e       	mov	r11, r25
    1f82:	8f 36       	cpi	r24, 0x6F	; 111
    1f84:	c1 f0       	breq	.+48     	; 0x1fb6 <vfprintf+0x288>
    1f86:	18 f4       	brcc	.+6      	; 0x1f8e <vfprintf+0x260>
    1f88:	88 35       	cpi	r24, 0x58	; 88
    1f8a:	79 f0       	breq	.+30     	; 0x1faa <vfprintf+0x27c>
    1f8c:	ae c0       	rjmp	.+348    	; 0x20ea <vfprintf+0x3bc>
    1f8e:	80 37       	cpi	r24, 0x70	; 112
    1f90:	19 f0       	breq	.+6      	; 0x1f98 <vfprintf+0x26a>
    1f92:	88 37       	cpi	r24, 0x78	; 120
    1f94:	21 f0       	breq	.+8      	; 0x1f9e <vfprintf+0x270>
    1f96:	a9 c0       	rjmp	.+338    	; 0x20ea <vfprintf+0x3bc>
    1f98:	e9 2f       	mov	r30, r25
    1f9a:	e0 61       	ori	r30, 0x10	; 16
    1f9c:	be 2e       	mov	r11, r30
    1f9e:	b4 fe       	sbrs	r11, 4
    1fa0:	0d c0       	rjmp	.+26     	; 0x1fbc <vfprintf+0x28e>
    1fa2:	fb 2d       	mov	r31, r11
    1fa4:	f4 60       	ori	r31, 0x04	; 4
    1fa6:	bf 2e       	mov	r11, r31
    1fa8:	09 c0       	rjmp	.+18     	; 0x1fbc <vfprintf+0x28e>
    1faa:	34 fe       	sbrs	r3, 4
    1fac:	0a c0       	rjmp	.+20     	; 0x1fc2 <vfprintf+0x294>
    1fae:	29 2f       	mov	r18, r25
    1fb0:	26 60       	ori	r18, 0x06	; 6
    1fb2:	b2 2e       	mov	r11, r18
    1fb4:	06 c0       	rjmp	.+12     	; 0x1fc2 <vfprintf+0x294>
    1fb6:	28 e0       	ldi	r18, 0x08	; 8
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	05 c0       	rjmp	.+10     	; 0x1fc6 <vfprintf+0x298>
    1fbc:	20 e1       	ldi	r18, 0x10	; 16
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <vfprintf+0x298>
    1fc2:	20 e1       	ldi	r18, 0x10	; 16
    1fc4:	32 e0       	ldi	r19, 0x02	; 2
    1fc6:	f8 01       	movw	r30, r16
    1fc8:	b7 fe       	sbrs	r11, 7
    1fca:	07 c0       	rjmp	.+14     	; 0x1fda <vfprintf+0x2ac>
    1fcc:	60 81       	ld	r22, Z
    1fce:	71 81       	ldd	r23, Z+1	; 0x01
    1fd0:	82 81       	ldd	r24, Z+2	; 0x02
    1fd2:	93 81       	ldd	r25, Z+3	; 0x03
    1fd4:	0c 5f       	subi	r16, 0xFC	; 252
    1fd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd8:	06 c0       	rjmp	.+12     	; 0x1fe6 <vfprintf+0x2b8>
    1fda:	60 81       	ld	r22, Z
    1fdc:	71 81       	ldd	r23, Z+1	; 0x01
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	0e 5f       	subi	r16, 0xFE	; 254
    1fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe6:	a3 01       	movw	r20, r6
    1fe8:	f1 d0       	rcall	.+482    	; 0x21cc <__ultoa_invert>
    1fea:	88 2e       	mov	r8, r24
    1fec:	86 18       	sub	r8, r6
    1fee:	fb 2d       	mov	r31, r11
    1ff0:	ff 77       	andi	r31, 0x7F	; 127
    1ff2:	3f 2e       	mov	r3, r31
    1ff4:	36 fe       	sbrs	r3, 6
    1ff6:	0d c0       	rjmp	.+26     	; 0x2012 <vfprintf+0x2e4>
    1ff8:	23 2d       	mov	r18, r3
    1ffa:	2e 7f       	andi	r18, 0xFE	; 254
    1ffc:	a2 2e       	mov	r10, r18
    1ffe:	89 14       	cp	r8, r9
    2000:	58 f4       	brcc	.+22     	; 0x2018 <vfprintf+0x2ea>
    2002:	34 fe       	sbrs	r3, 4
    2004:	0b c0       	rjmp	.+22     	; 0x201c <vfprintf+0x2ee>
    2006:	32 fc       	sbrc	r3, 2
    2008:	09 c0       	rjmp	.+18     	; 0x201c <vfprintf+0x2ee>
    200a:	83 2d       	mov	r24, r3
    200c:	8e 7e       	andi	r24, 0xEE	; 238
    200e:	a8 2e       	mov	r10, r24
    2010:	05 c0       	rjmp	.+10     	; 0x201c <vfprintf+0x2ee>
    2012:	b8 2c       	mov	r11, r8
    2014:	a3 2c       	mov	r10, r3
    2016:	03 c0       	rjmp	.+6      	; 0x201e <vfprintf+0x2f0>
    2018:	b8 2c       	mov	r11, r8
    201a:	01 c0       	rjmp	.+2      	; 0x201e <vfprintf+0x2f0>
    201c:	b9 2c       	mov	r11, r9
    201e:	a4 fe       	sbrs	r10, 4
    2020:	0f c0       	rjmp	.+30     	; 0x2040 <vfprintf+0x312>
    2022:	fe 01       	movw	r30, r28
    2024:	e8 0d       	add	r30, r8
    2026:	f1 1d       	adc	r31, r1
    2028:	80 81       	ld	r24, Z
    202a:	80 33       	cpi	r24, 0x30	; 48
    202c:	21 f4       	brne	.+8      	; 0x2036 <vfprintf+0x308>
    202e:	9a 2d       	mov	r25, r10
    2030:	99 7e       	andi	r25, 0xE9	; 233
    2032:	a9 2e       	mov	r10, r25
    2034:	09 c0       	rjmp	.+18     	; 0x2048 <vfprintf+0x31a>
    2036:	a2 fe       	sbrs	r10, 2
    2038:	06 c0       	rjmp	.+12     	; 0x2046 <vfprintf+0x318>
    203a:	b3 94       	inc	r11
    203c:	b3 94       	inc	r11
    203e:	04 c0       	rjmp	.+8      	; 0x2048 <vfprintf+0x31a>
    2040:	8a 2d       	mov	r24, r10
    2042:	86 78       	andi	r24, 0x86	; 134
    2044:	09 f0       	breq	.+2      	; 0x2048 <vfprintf+0x31a>
    2046:	b3 94       	inc	r11
    2048:	a3 fc       	sbrc	r10, 3
    204a:	10 c0       	rjmp	.+32     	; 0x206c <vfprintf+0x33e>
    204c:	a0 fe       	sbrs	r10, 0
    204e:	06 c0       	rjmp	.+12     	; 0x205c <vfprintf+0x32e>
    2050:	b2 14       	cp	r11, r2
    2052:	80 f4       	brcc	.+32     	; 0x2074 <vfprintf+0x346>
    2054:	28 0c       	add	r2, r8
    2056:	92 2c       	mov	r9, r2
    2058:	9b 18       	sub	r9, r11
    205a:	0d c0       	rjmp	.+26     	; 0x2076 <vfprintf+0x348>
    205c:	b2 14       	cp	r11, r2
    205e:	58 f4       	brcc	.+22     	; 0x2076 <vfprintf+0x348>
    2060:	b6 01       	movw	r22, r12
    2062:	80 e2       	ldi	r24, 0x20	; 32
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	76 d0       	rcall	.+236    	; 0x2154 <fputc>
    2068:	b3 94       	inc	r11
    206a:	f8 cf       	rjmp	.-16     	; 0x205c <vfprintf+0x32e>
    206c:	b2 14       	cp	r11, r2
    206e:	18 f4       	brcc	.+6      	; 0x2076 <vfprintf+0x348>
    2070:	2b 18       	sub	r2, r11
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <vfprintf+0x34a>
    2074:	98 2c       	mov	r9, r8
    2076:	21 2c       	mov	r2, r1
    2078:	a4 fe       	sbrs	r10, 4
    207a:	0f c0       	rjmp	.+30     	; 0x209a <vfprintf+0x36c>
    207c:	b6 01       	movw	r22, r12
    207e:	80 e3       	ldi	r24, 0x30	; 48
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	68 d0       	rcall	.+208    	; 0x2154 <fputc>
    2084:	a2 fe       	sbrs	r10, 2
    2086:	16 c0       	rjmp	.+44     	; 0x20b4 <vfprintf+0x386>
    2088:	a1 fc       	sbrc	r10, 1
    208a:	03 c0       	rjmp	.+6      	; 0x2092 <vfprintf+0x364>
    208c:	88 e7       	ldi	r24, 0x78	; 120
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	02 c0       	rjmp	.+4      	; 0x2096 <vfprintf+0x368>
    2092:	88 e5       	ldi	r24, 0x58	; 88
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	b6 01       	movw	r22, r12
    2098:	0c c0       	rjmp	.+24     	; 0x20b2 <vfprintf+0x384>
    209a:	8a 2d       	mov	r24, r10
    209c:	86 78       	andi	r24, 0x86	; 134
    209e:	51 f0       	breq	.+20     	; 0x20b4 <vfprintf+0x386>
    20a0:	a1 fe       	sbrs	r10, 1
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <vfprintf+0x37a>
    20a4:	8b e2       	ldi	r24, 0x2B	; 43
    20a6:	01 c0       	rjmp	.+2      	; 0x20aa <vfprintf+0x37c>
    20a8:	80 e2       	ldi	r24, 0x20	; 32
    20aa:	a7 fc       	sbrc	r10, 7
    20ac:	8d e2       	ldi	r24, 0x2D	; 45
    20ae:	b6 01       	movw	r22, r12
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	50 d0       	rcall	.+160    	; 0x2154 <fputc>
    20b4:	89 14       	cp	r8, r9
    20b6:	30 f4       	brcc	.+12     	; 0x20c4 <vfprintf+0x396>
    20b8:	b6 01       	movw	r22, r12
    20ba:	80 e3       	ldi	r24, 0x30	; 48
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	4a d0       	rcall	.+148    	; 0x2154 <fputc>
    20c0:	9a 94       	dec	r9
    20c2:	f8 cf       	rjmp	.-16     	; 0x20b4 <vfprintf+0x386>
    20c4:	8a 94       	dec	r8
    20c6:	f3 01       	movw	r30, r6
    20c8:	e8 0d       	add	r30, r8
    20ca:	f1 1d       	adc	r31, r1
    20cc:	80 81       	ld	r24, Z
    20ce:	b6 01       	movw	r22, r12
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	40 d0       	rcall	.+128    	; 0x2154 <fputc>
    20d4:	81 10       	cpse	r8, r1
    20d6:	f6 cf       	rjmp	.-20     	; 0x20c4 <vfprintf+0x396>
    20d8:	22 20       	and	r2, r2
    20da:	09 f4       	brne	.+2      	; 0x20de <vfprintf+0x3b0>
    20dc:	4e ce       	rjmp	.-868    	; 0x1d7a <vfprintf+0x4c>
    20de:	b6 01       	movw	r22, r12
    20e0:	80 e2       	ldi	r24, 0x20	; 32
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	37 d0       	rcall	.+110    	; 0x2154 <fputc>
    20e6:	2a 94       	dec	r2
    20e8:	f7 cf       	rjmp	.-18     	; 0x20d8 <vfprintf+0x3aa>
    20ea:	f6 01       	movw	r30, r12
    20ec:	86 81       	ldd	r24, Z+6	; 0x06
    20ee:	97 81       	ldd	r25, Z+7	; 0x07
    20f0:	02 c0       	rjmp	.+4      	; 0x20f6 <vfprintf+0x3c8>
    20f2:	8f ef       	ldi	r24, 0xFF	; 255
    20f4:	9f ef       	ldi	r25, 0xFF	; 255
    20f6:	2b 96       	adiw	r28, 0x0b	; 11
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	ff 90       	pop	r15
    210c:	ef 90       	pop	r14
    210e:	df 90       	pop	r13
    2110:	cf 90       	pop	r12
    2112:	bf 90       	pop	r11
    2114:	af 90       	pop	r10
    2116:	9f 90       	pop	r9
    2118:	8f 90       	pop	r8
    211a:	7f 90       	pop	r7
    211c:	6f 90       	pop	r6
    211e:	5f 90       	pop	r5
    2120:	4f 90       	pop	r4
    2122:	3f 90       	pop	r3
    2124:	2f 90       	pop	r2
    2126:	08 95       	ret

00002128 <strnlen_P>:
    2128:	fc 01       	movw	r30, r24
    212a:	05 90       	lpm	r0, Z+
    212c:	61 50       	subi	r22, 0x01	; 1
    212e:	70 40       	sbci	r23, 0x00	; 0
    2130:	01 10       	cpse	r0, r1
    2132:	d8 f7       	brcc	.-10     	; 0x212a <strnlen_P+0x2>
    2134:	80 95       	com	r24
    2136:	90 95       	com	r25
    2138:	8e 0f       	add	r24, r30
    213a:	9f 1f       	adc	r25, r31
    213c:	08 95       	ret

0000213e <strnlen>:
    213e:	fc 01       	movw	r30, r24
    2140:	61 50       	subi	r22, 0x01	; 1
    2142:	70 40       	sbci	r23, 0x00	; 0
    2144:	01 90       	ld	r0, Z+
    2146:	01 10       	cpse	r0, r1
    2148:	d8 f7       	brcc	.-10     	; 0x2140 <strnlen+0x2>
    214a:	80 95       	com	r24
    214c:	90 95       	com	r25
    214e:	8e 0f       	add	r24, r30
    2150:	9f 1f       	adc	r25, r31
    2152:	08 95       	ret

00002154 <fputc>:
    2154:	0f 93       	push	r16
    2156:	1f 93       	push	r17
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	fb 01       	movw	r30, r22
    215e:	23 81       	ldd	r18, Z+3	; 0x03
    2160:	21 fd       	sbrc	r18, 1
    2162:	03 c0       	rjmp	.+6      	; 0x216a <fputc+0x16>
    2164:	8f ef       	ldi	r24, 0xFF	; 255
    2166:	9f ef       	ldi	r25, 0xFF	; 255
    2168:	2c c0       	rjmp	.+88     	; 0x21c2 <fputc+0x6e>
    216a:	22 ff       	sbrs	r18, 2
    216c:	16 c0       	rjmp	.+44     	; 0x219a <fputc+0x46>
    216e:	46 81       	ldd	r20, Z+6	; 0x06
    2170:	57 81       	ldd	r21, Z+7	; 0x07
    2172:	24 81       	ldd	r18, Z+4	; 0x04
    2174:	35 81       	ldd	r19, Z+5	; 0x05
    2176:	42 17       	cp	r20, r18
    2178:	53 07       	cpc	r21, r19
    217a:	44 f4       	brge	.+16     	; 0x218c <fputc+0x38>
    217c:	a0 81       	ld	r26, Z
    217e:	b1 81       	ldd	r27, Z+1	; 0x01
    2180:	9d 01       	movw	r18, r26
    2182:	2f 5f       	subi	r18, 0xFF	; 255
    2184:	3f 4f       	sbci	r19, 0xFF	; 255
    2186:	31 83       	std	Z+1, r19	; 0x01
    2188:	20 83       	st	Z, r18
    218a:	8c 93       	st	X, r24
    218c:	26 81       	ldd	r18, Z+6	; 0x06
    218e:	37 81       	ldd	r19, Z+7	; 0x07
    2190:	2f 5f       	subi	r18, 0xFF	; 255
    2192:	3f 4f       	sbci	r19, 0xFF	; 255
    2194:	37 83       	std	Z+7, r19	; 0x07
    2196:	26 83       	std	Z+6, r18	; 0x06
    2198:	14 c0       	rjmp	.+40     	; 0x21c2 <fputc+0x6e>
    219a:	8b 01       	movw	r16, r22
    219c:	ec 01       	movw	r28, r24
    219e:	fb 01       	movw	r30, r22
    21a0:	00 84       	ldd	r0, Z+8	; 0x08
    21a2:	f1 85       	ldd	r31, Z+9	; 0x09
    21a4:	e0 2d       	mov	r30, r0
    21a6:	09 95       	icall
    21a8:	89 2b       	or	r24, r25
    21aa:	e1 f6       	brne	.-72     	; 0x2164 <fputc+0x10>
    21ac:	d8 01       	movw	r26, r16
    21ae:	16 96       	adiw	r26, 0x06	; 6
    21b0:	8d 91       	ld	r24, X+
    21b2:	9c 91       	ld	r25, X
    21b4:	17 97       	sbiw	r26, 0x07	; 7
    21b6:	01 96       	adiw	r24, 0x01	; 1
    21b8:	17 96       	adiw	r26, 0x07	; 7
    21ba:	9c 93       	st	X, r25
    21bc:	8e 93       	st	-X, r24
    21be:	16 97       	sbiw	r26, 0x06	; 6
    21c0:	ce 01       	movw	r24, r28
    21c2:	df 91       	pop	r29
    21c4:	cf 91       	pop	r28
    21c6:	1f 91       	pop	r17
    21c8:	0f 91       	pop	r16
    21ca:	08 95       	ret

000021cc <__ultoa_invert>:
    21cc:	fa 01       	movw	r30, r20
    21ce:	aa 27       	eor	r26, r26
    21d0:	28 30       	cpi	r18, 0x08	; 8
    21d2:	51 f1       	breq	.+84     	; 0x2228 <__ultoa_invert+0x5c>
    21d4:	20 31       	cpi	r18, 0x10	; 16
    21d6:	81 f1       	breq	.+96     	; 0x2238 <__ultoa_invert+0x6c>
    21d8:	e8 94       	clt
    21da:	6f 93       	push	r22
    21dc:	6e 7f       	andi	r22, 0xFE	; 254
    21de:	6e 5f       	subi	r22, 0xFE	; 254
    21e0:	7f 4f       	sbci	r23, 0xFF	; 255
    21e2:	8f 4f       	sbci	r24, 0xFF	; 255
    21e4:	9f 4f       	sbci	r25, 0xFF	; 255
    21e6:	af 4f       	sbci	r26, 0xFF	; 255
    21e8:	b1 e0       	ldi	r27, 0x01	; 1
    21ea:	3e d0       	rcall	.+124    	; 0x2268 <__ultoa_invert+0x9c>
    21ec:	b4 e0       	ldi	r27, 0x04	; 4
    21ee:	3c d0       	rcall	.+120    	; 0x2268 <__ultoa_invert+0x9c>
    21f0:	67 0f       	add	r22, r23
    21f2:	78 1f       	adc	r23, r24
    21f4:	89 1f       	adc	r24, r25
    21f6:	9a 1f       	adc	r25, r26
    21f8:	a1 1d       	adc	r26, r1
    21fa:	68 0f       	add	r22, r24
    21fc:	79 1f       	adc	r23, r25
    21fe:	8a 1f       	adc	r24, r26
    2200:	91 1d       	adc	r25, r1
    2202:	a1 1d       	adc	r26, r1
    2204:	6a 0f       	add	r22, r26
    2206:	71 1d       	adc	r23, r1
    2208:	81 1d       	adc	r24, r1
    220a:	91 1d       	adc	r25, r1
    220c:	a1 1d       	adc	r26, r1
    220e:	20 d0       	rcall	.+64     	; 0x2250 <__ultoa_invert+0x84>
    2210:	09 f4       	brne	.+2      	; 0x2214 <__ultoa_invert+0x48>
    2212:	68 94       	set
    2214:	3f 91       	pop	r19
    2216:	2a e0       	ldi	r18, 0x0A	; 10
    2218:	26 9f       	mul	r18, r22
    221a:	11 24       	eor	r1, r1
    221c:	30 19       	sub	r19, r0
    221e:	30 5d       	subi	r19, 0xD0	; 208
    2220:	31 93       	st	Z+, r19
    2222:	de f6       	brtc	.-74     	; 0x21da <__ultoa_invert+0xe>
    2224:	cf 01       	movw	r24, r30
    2226:	08 95       	ret
    2228:	46 2f       	mov	r20, r22
    222a:	47 70       	andi	r20, 0x07	; 7
    222c:	40 5d       	subi	r20, 0xD0	; 208
    222e:	41 93       	st	Z+, r20
    2230:	b3 e0       	ldi	r27, 0x03	; 3
    2232:	0f d0       	rcall	.+30     	; 0x2252 <__ultoa_invert+0x86>
    2234:	c9 f7       	brne	.-14     	; 0x2228 <__ultoa_invert+0x5c>
    2236:	f6 cf       	rjmp	.-20     	; 0x2224 <__ultoa_invert+0x58>
    2238:	46 2f       	mov	r20, r22
    223a:	4f 70       	andi	r20, 0x0F	; 15
    223c:	40 5d       	subi	r20, 0xD0	; 208
    223e:	4a 33       	cpi	r20, 0x3A	; 58
    2240:	18 f0       	brcs	.+6      	; 0x2248 <__ultoa_invert+0x7c>
    2242:	49 5d       	subi	r20, 0xD9	; 217
    2244:	31 fd       	sbrc	r19, 1
    2246:	40 52       	subi	r20, 0x20	; 32
    2248:	41 93       	st	Z+, r20
    224a:	02 d0       	rcall	.+4      	; 0x2250 <__ultoa_invert+0x84>
    224c:	a9 f7       	brne	.-22     	; 0x2238 <__ultoa_invert+0x6c>
    224e:	ea cf       	rjmp	.-44     	; 0x2224 <__ultoa_invert+0x58>
    2250:	b4 e0       	ldi	r27, 0x04	; 4
    2252:	a6 95       	lsr	r26
    2254:	97 95       	ror	r25
    2256:	87 95       	ror	r24
    2258:	77 95       	ror	r23
    225a:	67 95       	ror	r22
    225c:	ba 95       	dec	r27
    225e:	c9 f7       	brne	.-14     	; 0x2252 <__ultoa_invert+0x86>
    2260:	00 97       	sbiw	r24, 0x00	; 0
    2262:	61 05       	cpc	r22, r1
    2264:	71 05       	cpc	r23, r1
    2266:	08 95       	ret
    2268:	9b 01       	movw	r18, r22
    226a:	ac 01       	movw	r20, r24
    226c:	0a 2e       	mov	r0, r26
    226e:	06 94       	lsr	r0
    2270:	57 95       	ror	r21
    2272:	47 95       	ror	r20
    2274:	37 95       	ror	r19
    2276:	27 95       	ror	r18
    2278:	ba 95       	dec	r27
    227a:	c9 f7       	brne	.-14     	; 0x226e <__ultoa_invert+0xa2>
    227c:	62 0f       	add	r22, r18
    227e:	73 1f       	adc	r23, r19
    2280:	84 1f       	adc	r24, r20
    2282:	95 1f       	adc	r25, r21
    2284:	a0 1d       	adc	r26, r0
    2286:	08 95       	ret

00002288 <_exit>:
    2288:	f8 94       	cli

0000228a <__stop_program>:
    228a:	ff cf       	rjmp	.-2      	; 0x228a <__stop_program>
